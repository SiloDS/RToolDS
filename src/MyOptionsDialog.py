# -*- coding: ISO-8859-1 -*-
# generated by wxGlade 0.4.1 on Wed Nov 29 09:19:40 2006
#TODO: Populate save dir with original dir if possible

import wx

# begin wxGlade: dependencies
# end wxGlade

import sys
import os
import copy
import wx.lib.filebrowsebutton as filebrowse
from ColumnListCtrlMixin import ColumnListCtrlMixin
import wx.lib.mixins.listctrl as listmix

import MyConfig

class MySizeListCtrl( wx.ListCtrl, 
                   listmix.ListCtrlAutoWidthMixin, 
                   listmix.TextEditMixin ):

    def __init__( self, parent, ID, pos=wx.DefaultPosition, 
                 size=wx.DefaultSize, style=0 ):
        wx.ListCtrl.__init__( self, parent, ID, pos, size, style )

        listmix.ListCtrlAutoWidthMixin.__init__( self )
        self.Populate()
        listmix.TextEditMixin.__init__( self )

    def Populate( self ):
        # for normal, simple columns, you can add them like this:
        self.InsertColumn( 0, "Sizes Available for Filter" )

        Count = 0
        for item in MyConfig.Sizes:
            self.InsertStringItem( Count, str ( item ) )
            Count += 1

#        self.SetColumnWidth(0, wx.LIST_AUTOSIZE)

        self.currentItem = 0
            
class MyGenreListCtrl( wx.ListCtrl, 
                   listmix.ListCtrlAutoWidthMixin, 
                   listmix.TextEditMixin ):

    def __init__( self, parent, ID, pos=wx.DefaultPosition, 
                 size=wx.DefaultSize, style=0 ):
        wx.ListCtrl.__init__( self, parent, ID, pos, size, style )

        listmix.ListCtrlAutoWidthMixin.__init__( self )
        self.Populate()
        listmix.TextEditMixin.__init__( self )

    def Populate( self ):
        # for normal, simple columns, you can add them like this:
        self.InsertColumn( 0, "Genre List" )

        for Genre in sorted(MyConfig.Genres):
            self.InsertStringItem( sys.maxint, Genre )

#        self.SetColumnWidth(0, wx.LIST_AUTOSIZE)

        self.currentItem = 0
            
class MyOptionsDialog( wx.Dialog ):
    def __init__( self, *args, **kwds ):
        # begin wxGlade: MyOptionsDialog.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE|wx.RESIZE_BORDER|wx.THICK_FRAME
        wx.Dialog.__init__(self, *args, **kwds)
        self.m_OptionsNotebook = wx.Notebook(self, -1, style=0)
        self.m_MiscPanel = wx.Panel(self.m_OptionsNotebook, -1)
        self.m_GenrePanel = wx.Panel(self.m_OptionsNotebook, -1)
        self.m_ColumnsPanel = wx.Panel(self.m_OptionsNotebook, -1)
        self.m_DirectoriesPanel = wx.Panel(self.m_OptionsNotebook, -1)
        self.m_DirBrowseButton = filebrowse.DirBrowseButton(self.m_DirectoriesPanel, -1, changeCallback = self.dbbCallback)
        self.m_AddButton = wx.Button(self.m_DirectoriesPanel, -1, "Add")
        self.m_RemoveButton = wx.Button(self.m_DirectoriesPanel, -1, "Remove")
        self.m_OptionsDirListCtrl = wx.ListCtrl(self.m_DirectoriesPanel, -1, style=wx.LC_REPORT|wx.LC_SINGLE_SEL|wx.SUNKEN_BORDER)
        self.m_ColumnsListCtrl = ColumnListCtrlMixin(self.m_ColumnsPanel, -1)
        self.m_UpButton = wx.Button(self.m_ColumnsPanel, -1, "Up")
        self.m_DownButton = wx.Button(self.m_ColumnsPanel, -1, "Down")
        self.m_GenreListCtrl = MyGenreListCtrl(self.m_GenrePanel, -1, style=wx.LC_REPORT)
        self.m_SaveDirectoryCtrl = filebrowse.DirBrowseButton(self.m_MiscPanel, -1, changeCallback = self.dbbSaveDirCallback, labelText = "Save Game Directory :")
        self.label_2 = wx.StaticText(self.m_MiscPanel, -1, "Number of Save Games to Keep : ")
        self.m_NumberOfSavesCtrl = wx.SpinCtrl(self.m_MiscPanel, -1, "1", min=1, max=99)
        self.label_2_copy = wx.StaticText(self.m_MiscPanel, -1, "Display ROM Sizes in : ")
        self.m_ShowROMSizesIn = wx.Choice(self.m_MiscPanel, -1, choices=[])
        self.m_ShowSplashCtrl = wx.CheckBox(self.m_MiscPanel, -1, "Show Splash Screen")
        self.m_SaveFiltersCtrl = wx.CheckBox(self.m_MiscPanel, -1, "Save Filters on Exit")
        self.m_SizeListCtrl = MySizeListCtrl(self.m_MiscPanel, -1, style=wx.LC_REPORT|wx.SUNKEN_BORDER)
        self.m_Options_OK_Btn = wx.Button(self, -1, "OK")
        self.m_Options_Cancel_Btn = wx.Button(self, -1, "Cancel")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.OnAdd, self.m_AddButton)
        self.Bind(wx.EVT_BUTTON, self.OnRemove, self.m_RemoveButton)
        self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnDirectoryDeselected, self.m_OptionsDirListCtrl)
        self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnDirectorySelected, self.m_OptionsDirListCtrl)
        self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnColDeselected, self.m_ColumnsListCtrl)
        self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnColSelected, self.m_ColumnsListCtrl)
        self.Bind(wx.EVT_BUTTON, self.OnColumnUp, self.m_UpButton)
        self.Bind(wx.EVT_BUTTON, self.OnColumnDown, self.m_DownButton)
        self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnColDeselected, self.m_GenreListCtrl)
        self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnColSelected, self.m_GenreListCtrl)
        self.Bind(wx.EVT_SPINCTRL, self.OnNumSavesSpinCtrl, self.m_NumberOfSavesCtrl)
        self.Bind(wx.EVT_CHOICE, self.OnROMSize, self.m_ShowROMSizesIn)
        self.Bind(wx.EVT_CHECKBOX, self.OnShowSplash, self.m_ShowSplashCtrl)
        self.Bind(wx.EVT_CHECKBOX, self.OnSaveFilters, self.m_SaveFiltersCtrl)
        self.Bind(wx.EVT_BUTTON, self.OnOptionsOK, self.m_Options_OK_Btn)
        self.Bind(wx.EVT_BUTTON, self.OnOptionsCancel, self.m_Options_Cancel_Btn)
        # end wxGlade
        self.Bind( wx.EVT_SIZE, self.OnSize )
        self.Bind( wx.EVT_MOVE, self.OnWindowMoved )
        self.__LocalInit ()

        # for wxMSW
        self.m_SizeListCtrl.Bind( wx.EVT_COMMAND_RIGHT_CLICK, self.OnRightClick )

        # for wxGTK
        self.m_SizeListCtrl.Bind( wx.EVT_RIGHT_UP, self.OnRightClick )

    def __set_properties( self ):
        # begin wxGlade: MyOptionsDialog.__set_properties
        self.SetTitle("Options")
        self.SetSize((473, 353))
        self.m_AddButton.Enable(False)
        self.m_RemoveButton.Enable(False)
        self.m_UpButton.Enable(False)
        self.m_DownButton.Enable(False)
        self.label_2.SetMinSize((162, 21))
        self.label_2_copy.SetMinSize((162, 21))
        # end wxGlade

    def __do_layout( self ):
        # begin wxGlade: MyOptionsDialog.__do_layout
        grid_sizer_2 = wx.FlexGridSizer(2, 1, 0, 0)
        grid_sizer_3 = wx.FlexGridSizer(1, 5, 0, 0)
        grid_sizer_8 = wx.FlexGridSizer(2, 1, 0, 0)
        grid_sizer_9 = wx.FlexGridSizer(5, 1, 0, 0)
        sizer_6_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_6_copy = wx.FlexGridSizer(1, 1, 0, 0)
        grid_sizer_6 = wx.FlexGridSizer(1, 2, 0, 0)
        grid_sizer_7 = wx.FlexGridSizer(4, 1, 0, 0)
        grid_sizer_4 = wx.FlexGridSizer(2, 1, 0, 0)
        grid_sizer_5 = wx.FlexGridSizer(1, 3, 0, 0)
        grid_sizer_5.Add(self.m_DirBrowseButton, 1, wx.EXPAND, 0)
        grid_sizer_5.Add(self.m_AddButton, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_5.Add(self.m_RemoveButton, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_5.AddGrowableCol(0)
        grid_sizer_4.Add(grid_sizer_5, 1, wx.EXPAND, 0)
        grid_sizer_4.Add(self.m_OptionsDirListCtrl, 1, wx.EXPAND, 0)
        self.m_DirectoriesPanel.SetSizer(grid_sizer_4)
        grid_sizer_4.AddGrowableRow(1)
        grid_sizer_4.AddGrowableCol(0)
        grid_sizer_6.Add(self.m_ColumnsListCtrl, 1, wx.EXPAND, 0)
        grid_sizer_7.Add(self.m_UpButton, 0, 0, 0)
        grid_sizer_7.Add((20, 20), 0, wx.EXPAND, 0)
        grid_sizer_7.Add((20, 20), 0, wx.EXPAND, 0)
        grid_sizer_7.Add((20, 20), 0, wx.EXPAND, 0)
        grid_sizer_7.Add(self.m_DownButton, 0, 0, 0)
        grid_sizer_7.AddGrowableRow(1)
        grid_sizer_7.AddGrowableRow(3)
        grid_sizer_6.Add(grid_sizer_7, 1, wx.EXPAND, 0)
        self.m_ColumnsPanel.SetSizer(grid_sizer_6)
        grid_sizer_6.AddGrowableRow(0)
        grid_sizer_6.AddGrowableCol(0)
        grid_sizer_6_copy.Add(self.m_GenreListCtrl, 1, wx.EXPAND, 0)
        self.m_GenrePanel.SetSizer(grid_sizer_6_copy)
        grid_sizer_6_copy.AddGrowableRow(0)
        grid_sizer_6_copy.AddGrowableCol(0)
        grid_sizer_9.Add(self.m_SaveDirectoryCtrl, 1, wx.ALL|wx.EXPAND, 3)
        sizer_6.Add(self.label_2, 0, wx.ALL|wx.EXPAND, 3)
        sizer_6.Add(self.m_NumberOfSavesCtrl, 0, wx.ALL, 3)
        grid_sizer_9.Add(sizer_6, 1, wx.EXPAND, 0)
        sizer_6_copy.Add(self.label_2_copy, 0, wx.ALL|wx.EXPAND, 3)
        sizer_6_copy.Add(self.m_ShowROMSizesIn, 0, wx.ALL, 3)
        grid_sizer_9.Add(sizer_6_copy, 1, wx.EXPAND, 0)
        grid_sizer_9.Add(self.m_ShowSplashCtrl, 0, wx.ALL, 3)
        grid_sizer_9.Add(self.m_SaveFiltersCtrl, 0, wx.ALL, 3)
        grid_sizer_9.AddGrowableRow(4)
        grid_sizer_9.AddGrowableCol(0)
        grid_sizer_8.Add(grid_sizer_9, 1, wx.EXPAND, 0)
        grid_sizer_8.Add(self.m_SizeListCtrl, 1, wx.EXPAND, 0)
        self.m_MiscPanel.SetSizer(grid_sizer_8)
        grid_sizer_8.AddGrowableRow(1)
        grid_sizer_8.AddGrowableCol(0)
        self.m_OptionsNotebook.AddPage(self.m_DirectoriesPanel, "Directories")
        self.m_OptionsNotebook.AddPage(self.m_ColumnsPanel, "Columns")
        self.m_OptionsNotebook.AddPage(self.m_GenrePanel, "Genre")
        self.m_OptionsNotebook.AddPage(self.m_MiscPanel, "Misc")
        grid_sizer_2.Add(self.m_OptionsNotebook, 1, wx.EXPAND, 0)
        grid_sizer_3.Add((20, 20), 0, wx.EXPAND, 0)
        grid_sizer_3.Add(self.m_Options_OK_Btn, 0, 0, 0)
        grid_sizer_3.Add((20, 20), 0, wx.EXPAND, 0)
        grid_sizer_3.Add(self.m_Options_Cancel_Btn, 0, 0, 0)
        grid_sizer_3.Add((20, 20), 0, wx.EXPAND, 0)
        grid_sizer_3.AddGrowableCol(0)
        grid_sizer_3.AddGrowableCol(4)
        grid_sizer_2.Add(grid_sizer_3, 1, wx.TOP|wx.BOTTOM|wx.EXPAND, 5)
        self.SetSizer(grid_sizer_2)
        grid_sizer_2.AddGrowableRow(0)
        grid_sizer_2.AddGrowableCol(0)
        self.Layout()
        # end wxGlade

    def __LocalInit( self ):
        self.InsertColumns ()
        self.Populate ()
        self.ResizeColumns ()
        self.Backup_ROMPaths = copy.copy( MyConfig.ROMPaths )
        self.Backup_ColumnsToDisplay = copy.copy( MyConfig.ColumnsToDisplay )
        self.Backup_ColumnTitles = copy.copy ( MyConfig.ColumnTitles )
        self.Backup_SaveDir = copy.copy ( MyConfig.SaveDir )
        self.Backup_NumSaves = copy.copy ( MyConfig.NumSaves )
        self.Backup_ShowSplash = copy.copy ( MyConfig.ShowSplash )
        self.Backup_Saves = copy.copy ( MyConfig.Sizes )
        self.Backup_Genres = copy.copy ( MyConfig.Genres )
        self.Backup_SaveFiltes = copy.copy ( MyConfig.SaveFilters )
        self.Backup_ShowROMSizeIn  = copy.copy ( MyConfig.ShowROMSizeIn )

        self.SetSize ( MyConfig.OptionsSize )
        if MyConfig.OptionsPos[0] == -1:
            self.CentreOnScreen()
        else:
            self.SetPosition( MyConfig.OptionsPos )
        
    def InsertColumns( self ):
        self.m_OptionsDirListCtrl.InsertColumn( 0, "Directory" )

        self.m_ColumnsListCtrl.InsertColumn( 0, "Column Name" )
        self.m_ColumnsListCtrl.InsertColumn( 1, "Display Name" )
        
    def ResizeColumns( self ):
        self.m_OptionsDirListCtrl.SetColumnWidth( 0, 300 )
    
        self.m_ColumnsListCtrl.SetColumnWidth( 0, wx.LIST_AUTOSIZE )
        self.m_ColumnsListCtrl.SetColumnWidth( 1, 200 )

    def Populate ( self ):
        Count = 0
        for Dir in MyConfig.ROMPaths:
            self.m_OptionsDirListCtrl.InsertStringItem( Count, Dir )
            Count += 1
        
        for Column in MyConfig.Columns:
            index = self.m_ColumnsListCtrl.InsertStringItem( sys.maxint, Column )
            self.m_ColumnsListCtrl.SetStringItem( index, 1, MyConfig.ColumnTitles[Column] )
            if Column in MyConfig.ColumnsToDisplay:
                self.m_ColumnsListCtrl.CheckItem ( index )
                
        self.m_SaveDirectoryCtrl.SetValue ( MyConfig.SaveDir )
        self.m_NumberOfSavesCtrl.SetValue( MyConfig.NumSaves )
        self.m_ShowSplashCtrl.SetValue ( MyConfig.ShowSplash )
        self.m_SaveFiltersCtrl.SetValue ( MyConfig.SaveFilters )
        
        for count in range ( self.m_ShowROMSizesIn.GetCount()-1, -1, -1 ):
            self.m_ShowROMSizesIn.Delete( count )
        for Size in MyConfig.ShowROMSizes:
            self.m_ShowROMSizesIn.Append( Size )
        try:
            self.m_ShowROMSizesIn.SetSelection( self.m_ShowROMSizesIn.FindString( MyConfig.ShowROMSizeIn ) )
        except:
            self.m_ShowROMSizesIn.SetSelection( 0 )

    def OnAdd( self, event ): # wxGlade: MyOptionsDialog.<event_handler>
        MyConfig.ROMPaths.append ( self.TypedDir )
        self.m_OptionsDirListCtrl.InsertStringItem( self.m_OptionsDirListCtrl.GetItemCount(), os.path.abspath( self.TypedDir ) )
        self.m_AddButton.Disable()
        self.m_DirBrowseButton.SetValue( "" )
        event.Skip()
        
    def OnRemove( self, event ): # wxGlade: MyOptionsDialog.<event_handler>
        Item = self.m_OptionsDirListCtrl.GetFirstSelected()
        self.m_OptionsDirListCtrl.DeleteItem( Item )
        del ( MyConfig.ROMPaths[Item] )
        event.Skip()
                
    def OnDirectoryDeselected( self, event ): # wxGlade: MyOptionsDialog.<event_handler>
        self.m_RemoveButton.Disable()
        event.Skip()
        
    def OnDirectorySelected( self, event ): # wxGlade: MyOptionsDialog.<event_handler>
        self.m_RemoveButton.Enable()
        event.Skip()

    def OnColDeselected( self, event ): # wxGlade: MyOptionsDialog.<event_handler>
        event.Skip()

    def OnColSelected( self, event ): # wxGlade: MyOptionsDialog.<event_handler>
        if self.m_ColumnsListCtrl.GetFirstSelected() > 1:
            self.m_UpButton.Enable()
        else:
            self.m_UpButton.Disable()
        if self.m_ColumnsListCtrl.GetFirstSelected() < self.m_ColumnsListCtrl.GetItemCount() - 1:
            self.m_DownButton.Enable()
        else:
            self.m_DownButton.Disable()
        if self.m_ColumnsListCtrl.GetFirstSelected() == 0:
            self.m_UpButton.Disable()
            self.m_UpButton.Disable()
        event.Skip()

    def OnColumnUp( self, event ): # wxGlade: MyOptionsDialog.<event_handler>
        CurPos = self.m_ColumnsListCtrl.GetFirstSelected()
        Item1 = self.m_ColumnsListCtrl.GetItemText( CurPos )
        Item2 = self.m_ColumnsListCtrl.GetItemText( CurPos - 1 )
        Item1C1 = self.m_ColumnsListCtrl.GetItem( CurPos, 1 )
        Item2C1 = self.m_ColumnsListCtrl.GetItem( CurPos - 1, 1 )
        Item1Checked = self.m_ColumnsListCtrl.IsChecked( CurPos )
        Item2Checked = self.m_ColumnsListCtrl.IsChecked( CurPos-1 )
        self.m_ColumnsListCtrl.SetStringItem( CurPos, 0, Item2 )
        self.m_ColumnsListCtrl.SetStringItem( CurPos - 1, 0, Item1 )
        self.m_ColumnsListCtrl.SetStringItem( CurPos, 1, Item2C1.GetText() )
        self.m_ColumnsListCtrl.SetStringItem( CurPos-1, 1, Item1C1.GetText() )
        self.m_ColumnsListCtrl.CheckItem( CurPos, Item2Checked )
        self.m_ColumnsListCtrl.CheckItem( CurPos-1, Item1Checked )
        self.m_ColumnsListCtrl.SetItemState( CurPos-1, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED )
        event.Skip()

    def OnColumnDown( self, event ): # wxGlade: MyOptionsDialog.<event_handler>
        CurPos = self.m_ColumnsListCtrl.GetFirstSelected()
        Item1 = self.m_ColumnsListCtrl.GetItemText( CurPos )
        Item2 = self.m_ColumnsListCtrl.GetItemText( CurPos + 1 )
        Item1C1 = self.m_ColumnsListCtrl.GetItem( CurPos, 1 )
        Item2C2 = self.m_ColumnsListCtrl.GetItem( CurPos + 1, 1 )
        Item1Checked = self.m_ColumnsListCtrl.IsChecked( CurPos )
        Item2Checked = self.m_ColumnsListCtrl.IsChecked( CurPos+1 )
        self.m_ColumnsListCtrl.SetStringItem( CurPos, 0, Item2 )
        self.m_ColumnsListCtrl.SetStringItem( CurPos + 1, 0, Item1 )
        self.m_ColumnsListCtrl.SetStringItem( CurPos, 1, Item2C2.GetText() )
        self.m_ColumnsListCtrl.SetStringItem( CurPos+1, 1, Item1C1.GetText() )
        self.m_ColumnsListCtrl.CheckItem( CurPos, Item2Checked )
        self.m_ColumnsListCtrl.CheckItem( CurPos+1, Item1Checked )
        self.m_ColumnsListCtrl.SetItemState( CurPos+1, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED )
        event.Skip()

    def OnOptionsOK( self, event ): # wxGlade: MyOptionsDialog.<event_handler>
        MyConfig.OptionsAreOK = True

        MyConfig.ColumnsToDisplay = []
        for Count in range ( 0, self.m_ColumnsListCtrl.GetItemCount() ):
            if self.m_ColumnsListCtrl.IsChecked( Count ):
                MyConfig.ColumnsToDisplay.append ( self.m_ColumnsListCtrl.GetItemText( Count ) )
            MyConfig.ColumnTitles[self.m_ColumnsListCtrl.GetItemText( Count )] = self.m_ColumnsListCtrl.GetItem( Count, 1 ).GetText()
        
        MyConfig.Sizes = []
        for itemnum in range ( 0, self.m_SizeListCtrl.GetItemCount() ):
            try:
                MyConfig.Sizes.append ( int ( self.m_SizeListCtrl.GetItemText( itemnum ) ) )
            except:
                pass
        
        self.Close()
        event.Skip()

    def OnOptionsCancel( self, event ): # wxGlade: MyOptionsDialog.<event_handler>
        MyConfig.ROMPaths = copy.copy( self.Backup_ROMPaths )
        MyConfig.ColumnsToDisplay = copy.copy( self.Backup_ColumnsToDisplay )
        MyConfig.ColumnTitles = copy.copy ( self.Backup_ColumnTitles )
        MyConfig.SaveDir = copy.copy ( self.Backup_SaveDir )
        MyConfig.NumSaves = copy.copy ( self.Backup_NumSaves )
        MyConfig.ShowSplash = copy.copy ( self.Backup_ShowSplash )
        MyConfig.Sizes = copy.copy ( self.Backup_Saves )
        MyConfig.Genres = copy.copy ( self.Backup_Genres )
        MyConfig.ShowROMSizeIn = copy.copy ( self.Backup_ShowROMSizeIn )
        self.Close()
        event.Skip()

    def dbbCallback( self, evt ):
        self.TypedDir = evt.GetString()
        if os.path.isdir( os.path.abspath( self.TypedDir ) ) and os.path.abspath( self.TypedDir ) not in MyConfig.ROMPaths:
            self.m_AddButton.Enable()
        else:
            self.m_AddButton.Disable()
            
    def dbbSaveDirCallback( self, evt ):
        self.SaveDir = evt.GetString()
        if self.SaveDir == "":
            MyConfig.SaveDir = ""
        elif os.path.isdir( os.path.abspath( self.SaveDir ) ):
            MyConfig.SaveDir = os.path.abspath( self.SaveDir )

    def OnSize( self, event ):
        MyConfig.OptionsSize = self.GetSize()
        event.Skip()

    def OnWindowMoved( self, event ):
        MyConfig.OptionsPos = self.GetPosition()
        event.Skip()

    def OnNumSavesSpinCtrl( self, event ): # wxGlade: MyOptionsDialog.<event_handler>
        MyConfig.NumSaves = event.Int
        event.Skip()

    def OnShowSplash( self, event ): # wxGlade: MyOptionsDialog.<event_handler>
        MyConfig.ShowSplash = event.Int
        event.Skip()

    def OnAddSize( self, event ):
        self.m_SizeListCtrl.InsertStringItem( sys.maxint, "Change Me!" )
        
    def OnDeleteSize( self, event ):
        self.m_SizeListCtrl.DeleteItem( self.selitem )
    
    def OnRightClick( self, event ): # wxGlade: MyOptionsDialog.<event_handler>
        if not hasattr( self, "popupSizeList1" ):
            self.popupSizeList1 = wx.NewId()
            self.Bind( wx.EVT_MENU, self.OnAddSize, id=self.popupSizeList1 )
            self.popupSizeList2 = wx.NewId()
            self.Bind( wx.EVT_MENU, self.OnDeleteSize, id=self.popupSizeList2 )
        menu = wx.Menu()
        item = wx.MenuItem( menu, self.popupSizeList1, "Add" )
        menu.AppendItem( item )
        self.selitem = self.m_SizeListCtrl.GetFirstSelected()
        if self.selitem != -1:
            item = wx.MenuItem( menu, self.popupSizeList2, "Delete" )
            menu.AppendItem( item )
        self.PopupMenu( menu )
        menu.Destroy()
        event.Skip()

    def OnSaveFilters(self, event): # wxGlade: MyOptionsDialog.<event_handler>
        MyConfig.SaveFilters = event.Int
        event.Skip()

    def OnROMSize(self, event): # wxGlade: MyOptionsDialog.<event_handler>
        MyConfig.ShowROMSizeIn = event.GetString()
        event.Skip()

# end of class MyOptionsDialog