# -*- coding: ISO-8859-1 -*-
# generated by wxGlade 0.4.1cvs on Thu Dec 07 09:32:00 2006 from C:\Documents and Settings\rj\workspace\RToolDS\RToolDS.wxg

import wx
import wx.gizmos as gizmos
import os
import glob
import datetime
import shutil
import sys
from stat import *

import MyConfig

# begin wxGlade: dependencies
# end wxGlade

class MySaveGameDlg( wx.Dialog ):
    def __init__( self, *args, **kwds ):
        # begin wxGlade: MySaveGameDlg.__init__
        kwds["style"] = wx.CAPTION|wx.RESIZE_BORDER|wx.CLOSE_BOX|wx.THICK_FRAME
        wx.Dialog.__init__(self, *args, **kwds)
        self.m_TreeCtrl = gizmos.TreeListCtrl(self, -1, style=wx.TR_DEFAULT_STYLE|wx.TR_FULL_ROW_HIGHLIGHT)
        self.m_SaveGame_OK_Btn = wx.Button(self, -1, "OK")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.OnOptionsOK, self.m_SaveGame_OK_Btn)
        # end wxGlade

        self.Bind( wx.EVT_TREE_ITEM_RIGHT_CLICK, self.OnTreeRightClick, self.m_TreeCtrl )
        self.Bind( wx.EVT_LIST_COL_END_DRAG, self.OnTreeColResized, self.m_TreeCtrl )
        self.Bind( wx.EVT_SIZE, self.OnSize )

        self.__LocalInit()

    def __set_properties( self ):
        # begin wxGlade: MySaveGameDlg.__set_properties
        self.SetTitle("Save Game Manager")
        self.SetSize((500, 400))
        # end wxGlade

    def __do_layout( self ):
        # begin wxGlade: MySaveGameDlg.__do_layout
        sizer_7 = wx.FlexGridSizer(2, 1, 0, 0)
        grid_sizer_3_copy = wx.FlexGridSizer(1, 3, 0, 0)
        sizer_7.Add(self.m_TreeCtrl, 1, wx.EXPAND, 0)
        grid_sizer_3_copy.Add((20, 20), 0, wx.EXPAND, 0)
        grid_sizer_3_copy.Add(self.m_SaveGame_OK_Btn, 0, wx.TOP|wx.BOTTOM, 5)
        grid_sizer_3_copy.Add((20, 20), 0, wx.EXPAND, 0)
        grid_sizer_3_copy.AddGrowableCol(0)
        grid_sizer_3_copy.AddGrowableCol(2)
        sizer_7.Add(grid_sizer_3_copy, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_7)
        sizer_7.AddGrowableRow(0)
        sizer_7.AddGrowableCol(0)
        self.Layout()
        self.Centre()
        # end wxGlade
        
    def __LocalInit( self ):
        isz = ( 16, 16 )
        il = wx.ImageList( isz[0], isz[1] )
        self.fldridx     = il.Add( wx.ArtProvider_GetBitmap( wx.ART_FOLDER, wx.ART_OTHER, isz ) )
        self.fldropenidx = il.Add( wx.ArtProvider_GetBitmap( wx.ART_FILE_OPEN, wx.ART_OTHER, isz ) )
        self.fileidx     = il.Add( wx.ArtProvider_GetBitmap( wx.ART_NORMAL_FILE, wx.ART_OTHER, isz ) )

        self.m_TreeCtrl.SetImageList( il )
        self.il = il

        self.m_TreeCtrl.AddColumn( "Title" )
        self.m_TreeCtrl.AddColumn( "Num Saves" )
        self.m_TreeCtrl.AddColumn( "Date" )
        self.m_TreeCtrl.SetMainColumn( 0 ) # the one with the tree in it...
        self.m_TreeCtrl.SetColumnWidth( 0, MyConfig.SaveMgrColSizes[0] )
        self.m_TreeCtrl.SetColumnWidth( 1, MyConfig.SaveMgrColSizes[1] )
        self.m_TreeCtrl.SetColumnWidth( 2, MyConfig.SaveMgrColSizes[2] )
        
        self.Populate()
        
        self.SetSize( MyConfig.SaveMgrSize )
        self.Centre()
        
    def Populate( self ):
        self.m_TreeCtrl.DeleteAllItems()
        SearchStr = os.path.join ( MyConfig.SaveDir, "*.sav.*" )
        DirList = glob.glob ( SearchStr )

        self.root = self.m_TreeCtrl.AddRoot( "Saves" )
        self.m_TreeCtrl.SetItemImage( self.root, self.fldridx, which = wx.TreeItemIcon_Normal )
        self.m_TreeCtrl.SetItemImage( self.root, self.fldropenidx, which = wx.TreeItemIcon_Expanded )

        child = None
        Count = 0
        for File in sorted ( DirList ):
            if os.path.isdir( File ):
                pass
            else:
                FullName = os.path.split ( File )[1]
                DisplayName = os.path.splitext ( os.path.splitext ( FullName )[0] )[0]
                Ext = os.path.splitext( File )[1]
                SaveNum = Ext[1:]
                
                if SaveNum == "1":
                    if child != None:
                        self.m_TreeCtrl.SetItemText ( child, "%d" % ( Count - 1 ) , 1 )
                    child = self.m_TreeCtrl.AppendItem( self.root, DisplayName )
                    self.m_TreeCtrl.SetItemText( child, "0", 1 )
                    self.m_TreeCtrl.SetItemText( child, "", 2 )
                    self.m_TreeCtrl.SetItemImage( child, self.fldridx, which = wx.TreeItemIcon_Normal )
                    self.m_TreeCtrl.SetItemImage( child, self.fldropenidx, which = wx.TreeItemIcon_Expanded )
                    Count = 1

                if Count > 0:
                    Count += 1
                    Stat = os.stat( File )
                    Date = datetime.datetime.fromtimestamp( Stat[ST_MTIME] )
                    childchild = self.m_TreeCtrl.AppendItem( child, "Save %s" % SaveNum )
                    self.m_TreeCtrl.SetItemImage( childchild, self.fileidx, which = wx.TreeItemIcon_Normal )
                    self.m_TreeCtrl.SetItemText( childchild, str( Date ), 2 )
                    
        if child != None:
            self.m_TreeCtrl.SetItemText ( child, "%d" % ( Count - 1 ) , 1 )
        self.m_TreeCtrl.Expand( self.root )
        
    def OnSize ( self, event ):
        MyConfig.SaveMgrSize = self.GetSize()
        event.Skip()

    def OnTreeColResized( self, event ): # wxGlade: MyFrame.<event_handler>
        if sys.version_info[0] == 2 and sys.version_info[1] >= 5:
            ColNum = event.Column
        else:
            ColNum = event.m_col
        MyConfig.SaveMgrColSizes[ ColNum ] = self.m_TreeCtrl.GetColumnWidth( ColNum )

        event.Skip()

    def OnTreeRightClick( self, event ): # wxGlade: MyFrame.<event_handler>
        item = event.GetItem()
        self.m_SelItem = item
        self.m_SelItemText = self.m_TreeCtrl.GetItemText( item )
        if item and self.m_TreeCtrl.GetItemText( item )[:5] == "Save ":
            if not hasattr( self, "popupTree1" ):
                self.popupTree1 = wx.NewId()
                self.Bind( wx.EVT_MENU, self.OnCopyToCart, id=self.popupTree1 )
                self.popupTree2 = wx.NewId()
                self.Bind( wx.EVT_MENU, self.OnDeleteSave, id=self.popupTree2 )
            menu = wx.Menu()
            item = wx.MenuItem( menu, self.popupTree1, "Copy to Cart" )
            menu.AppendItem( item )
            item = wx.MenuItem( menu, self.popupTree2, "Delete Save Game" )
            menu.AppendItem( item )
            self.PopupMenu( menu )
            menu.Destroy()
        elif item and self.m_TreeCtrl.GetItemText( item )[:5] != "Saves":
            if not hasattr( self, "popupTree11" ):
                self.popupTree11 = wx.NewId()
                self.Bind( wx.EVT_MENU, self.OnDeleteAllSaves, id=self.popupTree11 )
            menu = wx.Menu()
            item = wx.MenuItem( menu, self.popupTree11, "Delete All Saves for this Game" )
            menu.AppendItem( item )
            self.PopupMenu( menu )
            menu.Destroy()
        event.Skip()
        
    def OnCopyToCart ( self, event ):
        parent     = self.m_TreeCtrl.GetItemParent( self.m_SelItem )
        parenttext = self.m_TreeCtrl.GetItemText( parent )
        savenum    = self.m_TreeCtrl.GetItemText ( self.m_SelItem )[5:]
        
        DirList = os.listdir ( MyConfig.CartDrive )

        Found = 0
        for File in DirList:
            if os.path.isdir( File ):
                pass
            else:
                Ext = os.path.splitext( File )[1]
                if Ext not in MyConfig.SaveExtensions:
                    if File.find ( parenttext ) != -1:
                        Found=1
        if Found == 1:
            SaveFile = os.path.join ( MyConfig.SaveDir, parenttext + ".sav." + savenum )
            shutil.copy2 ( SaveFile, os.path.join ( MyConfig.CartDrive, parenttext + ".sav" ) )
            wx.MessageBox( 'Save Game has been Copied', 'Complete', wx.OK | wx.ICON_INFORMATION )
        else:
            wx.MessageBox( 'Game Not on Cart', 'Error', wx.OK | wx.ICON_EXCLAMATION )
        event.Skip()

    def OnDeleteSave ( self, event ):
        parent     = self.m_TreeCtrl.GetItemParent( self.m_SelItem )
        parenttext = self.m_TreeCtrl.GetItemText( parent )
        savenum    = self.m_TreeCtrl.GetItemText ( self.m_SelItem )[5:]
        
        wx.MessageBox( 'Not Yet Implemented', 'Erm', wx.OK | wx.ICON_EXCLAMATION )
        event.Skip()
        
    def OnDeleteAllSaves ( self, event ):
        SearchStr = os.path.join ( MyConfig.SaveDir, self.m_SelItemText+".sav.*" )
        DirList = glob.glob ( SearchStr )

        for File in sorted ( DirList ):
            if os.path.isdir( File ):
                pass
            else:
                os.unlink( File )
        self.m_TreeCtrl.DeleteChildren( self.m_SelItem )
        self.m_TreeCtrl.Delete( self.m_SelItem )
        wx.MessageBox( 'Save Games have been Deleted', 'Complete', wx.OK | wx.ICON_INFORMATION )
        event.Skip()
        
    def OnOptionsOK( self, event ): # wxGlade: MySaveGameDlg.<event_handler>
        self.Close()
        event.Skip()


# end of class MySaveGameDlg
