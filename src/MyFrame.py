# -*- coding: ISO-8859-1 -*-
# generated by wxGlade 0.4.1 on Wed Nov 29 09:19:40 2006

#TODO: Make trimmed size work in display and copy
#TODO: Ctrl A
#TODO: Make Rom list have focus on line 0
#TODO: Genre Overhall
#TODO: Disble Roms that are on Cart
#TODO: Change references to python version to wxwindows
#TODO: Sorting, autosizing columns

import wx

# begin wxGlade: dependencies
# end wxGlade

import sys
import os
import shutil
import array
from stat import *
if sys.version_info[0] == 2 and sys.version_info[1] >= 5:
    import hashlib
else:
    import md5
import glob
import wx.lib.filebrowsebutton as filebrowse
#from wx.lib.mixins.listctrl import CheckListCtrlMixin
#from wx.lib.mixins.listctrl import TextEditMixin
if sys.version_info[0] == 2 and sys.version_info[1] >= 5:
    from sqlite3 import dbapi2 as sqlite
else:
    from pysqlite2 import dbapi2 as sqlite

from ROM import ROM
from CreateDB import CreateDB, UpdateDB
import MyConfig
import DiskSpace
import zipfile2
import MyFileDropTarget
import MyOptionsDialog
import MyIcon
import MySaveGameDlg
import MyMissingDialog
import MyAboutDialog
import MyEditGenreDialog
import MyBadZipDialog

from MyWeb import MyWeb

ID_ANALYZE = wx.NewId()
ID_COPYTRIM = wx.NewId()
ID_OPTIONS = wx.NewId()
ID_BACKUPSAVES = wx.NewId()
ID_AUTOBACKUPSAVES = wx.NewId()
ID_AUTORESTORESAVES = wx.NewId()
ID_SAVEGAME_MGR = wx.NewId()
ID_QUIT = wx.NewId()
ID_CHECKNEWFILES = wx.NewId()
ID_CHECKNEWFILESSTARTUP = wx.NewId()
ID_POPULATE = wx.NewId()
ID_SYNC = wx.NewId()
ID_SYNCALL = wx.NewId()
ID_ABOUT = wx.NewId()

class MyFrame( wx.Frame ):
    def __init__( self, *args, **kwds ):
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = wx.CAPTION|wx.CLOSE_BOX|wx.MINIMIZE_BOX|wx.MAXIMIZE_BOX|wx.SYSTEM_MENU|wx.RESIZE_BORDER|wx.TAB_TRAVERSAL|wx.CLIP_CHILDREN
        wx.Frame.__init__(self, *args, **kwds)
        self.m_Splitter = wx.SplitterWindow(self, -1, style=wx.SP_3D|wx.SP_BORDER)
        self.window_1_pane_2 = wx.Panel(self.m_Splitter, -1, style=wx.RAISED_BORDER|wx.TAB_TRAVERSAL)
        self.panel_1_copy = wx.Panel(self.window_1_pane_2, -1)
        self.window_1_pane_1 = wx.Panel(self.m_Splitter, -1, style=wx.RAISED_BORDER|wx.TAB_TRAVERSAL)
        self.panel_1 = wx.Panel(self.window_1_pane_1, -1)
        self.sizer_4_copy_staticbox = wx.StaticBox(self.panel_1_copy, -1, "Cart Info ")
        self.sizer_4_staticbox = wx.StaticBox(self.panel_1, -1, " ROM Info ")
        
        # Menu Bar
        self.m_MainFrame_menubar = wx.MenuBar()
        self.SetMenuBar(self.m_MainFrame_menubar)
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(ID_ANALYZE, "&Analyze for Trim", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendSeparator()
        wxglade_tmp_menu.Append(ID_OPTIONS, "&Options", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(ID_ANALYZE, "Analyze for Trim", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(ID_COPYTRIM, "Use Trimmed Size", "", wx.ITEM_CHECK)
        wxglade_tmp_menu.Append(ID_BACKUPSAVES, "Backup Saves", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(ID_AUTOBACKUPSAVES, "Auto Backup Saves", "", wx.ITEM_CHECK)
        wxglade_tmp_menu.Append(ID_AUTORESTORESAVES, "Auto Restore Saves", "", wx.ITEM_CHECK)
        wxglade_tmp_menu.Append(ID_SAVEGAME_MGR, "Save Game Manager", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendSeparator()
        wxglade_tmp_menu.Append(ID_QUIT, "&Quit", "", wx.ITEM_NORMAL)
        self.m_MainFrame_menubar.Append(wxglade_tmp_menu, "&File")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(ID_CHECKNEWFILES, "Check for New Files", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(ID_CHECKNEWFILESSTARTUP, "Check for New Filles on Startup", "", wx.ITEM_CHECK)
        wxglade_tmp_menu.AppendSeparator()
        wxglade_tmp_menu.Append(ID_POPULATE, "&Populate Database", "", wx.ITEM_NORMAL)
        self.m_MainFrame_menubar.Append(wxglade_tmp_menu, "&Database")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(ID_SYNC, "&Sync Releases with PocketHeaven", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(ID_SYNCALL, "Sync &All Genres", "", wx.ITEM_NORMAL)
        self.m_MainFrame_menubar.Append(wxglade_tmp_menu, "&Web")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(ID_ABOUT, "About", "", wx.ITEM_NORMAL)
        self.m_MainFrame_menubar.Append(wxglade_tmp_menu, "&Help")
        # Menu Bar end
        self.label_1 = wx.StaticText(self.window_1_pane_1, -1, "Filter")
        self.m_FilterCtrl = wx.TextCtrl(self.window_1_pane_1, -1, "", style=wx.TE_PROCESS_ENTER|wx.TE_PROCESS_TAB)
        self.m_FilterApplyButton = wx.Button(self.window_1_pane_1, -1, "Apply")
        self.m_FilterClearButton = wx.Button(self.window_1_pane_1, -1, "Clear")
        self.m_FilterDummyStaticCtrl = wx.StaticText(self.window_1_pane_1, -1, "", style=wx.ST_NO_AUTORESIZE)
        self.m_GenreChoice = wx.Choice(self.window_1_pane_1, -1, choices=[])
        self.m_SizeCtrl = wx.Choice(self.window_1_pane_1, -1, choices=[])
        self.m_CountryCtrl = wx.Choice(self.window_1_pane_1, -1, choices=[])
        self.m_RomListCtrl = wx.ListCtrl(self.window_1_pane_1, -1, style=wx.LC_REPORT|wx.SUNKEN_BORDER)
        self.m_RomListSizeCtrl = wx.StaticText(self.panel_1, -1, "label_2")
        self.m_RomListNumCtrl = wx.StaticText(self.panel_1, -1, "label_3")
        self.m_RomListTotalSizeCtrl = wx.StaticText(self.panel_1, -1, "label_2")
        self.m_RomListTotalNumCtrl = wx.StaticText(self.panel_1, -1, "label_3")
        self.m_CartDirPicker = filebrowse.DirBrowseButton(self.window_1_pane_2, -1, changeCallback = self.dbbCallback, labelText = "")
        self.m_CartApplyButton = wx.Button(self.window_1_pane_2, -1, "Apply Changes")
        self.m_CartClearButton = wx.Button(self.window_1_pane_2, -1, "Clear Changes")
        self.m_CartListCtrl = wx.ListCtrl(self.window_1_pane_2, -1, style=wx.LC_REPORT|wx.SUNKEN_BORDER)
        self.m_CartListSizeCtrl = wx.StaticText(self.panel_1_copy, -1, "label_2")
        self.m_CartListNumCtrl = wx.StaticText(self.panel_1_copy, -1, "label_3")
        self.m_CartListTotalSizeCtrl = wx.StaticText(self.panel_1_copy, -1, "label_2")
        self.m_CartListTotalNumCtrl = wx.StaticText(self.panel_1_copy, -1, "label_3")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_MENU, self.On_Analyze, id=ID_ANALYZE)
        self.Bind(wx.EVT_MENU, self.On_Options, id=ID_OPTIONS)
        self.Bind(wx.EVT_MENU, self.On_CopyTrim, id=ID_COPYTRIM)
        self.Bind(wx.EVT_MENU, self.On_BackupSaves, id=ID_BACKUPSAVES)
        self.Bind(wx.EVT_MENU, self.On_AutoBackupSaves, id=ID_AUTOBACKUPSAVES)
        self.Bind(wx.EVT_MENU, self.On_AutoRestoreSaves, id=ID_AUTORESTORESAVES)
        self.Bind(wx.EVT_MENU, self.On_SaveGameMgr, id=ID_SAVEGAME_MGR)
        self.Bind(wx.EVT_MENU, self.On_Quit, id=ID_QUIT)
        self.Bind(wx.EVT_MENU, self.OnCheckNewFiles, id=ID_CHECKNEWFILES)
        self.Bind(wx.EVT_MENU, self.OnCheckNewFilesOnStartup, id=ID_CHECKNEWFILESSTARTUP)
        self.Bind(wx.EVT_MENU, self.On_Populate, id=ID_POPULATE)
        self.Bind(wx.EVT_MENU, self.On_Sync, id=ID_SYNC)
        self.Bind(wx.EVT_MENU, self.On_SyncAll, id=ID_SYNCALL)
        self.Bind(wx.EVT_MENU, self.On_About, id=ID_ABOUT)
        self.Bind(wx.EVT_TEXT_ENTER, self.OnFilter, self.m_FilterCtrl)
        self.Bind(wx.EVT_BUTTON, self.OnFilterApply, self.m_FilterApplyButton)
        self.Bind(wx.EVT_BUTTON, self.OnFilterClear, self.m_FilterClearButton)
        self.Bind(wx.EVT_CHOICE, self.OnGenreCtrl, self.m_GenreChoice)
        self.Bind(wx.EVT_CHOICE, self.OnSizeCtrl, self.m_SizeCtrl)
        self.Bind(wx.EVT_CHOICE, self.OnCountry, self.m_CountryCtrl)
        self.Bind(wx.EVT_LIST_BEGIN_DRAG, self.OnBeginDrag, self.m_RomListCtrl)
        self.Bind(wx.EVT_LIST_ITEM_RIGHT_CLICK, self.OnROMRightClick, self.m_RomListCtrl)
        self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnROMActivated, self.m_RomListCtrl)
        self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnROMSelected, self.m_RomListCtrl)
        self.Bind(wx.EVT_LIST_COL_END_DRAG, self.OnRomColResized, self.m_RomListCtrl)
        self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnROMDeselected, self.m_RomListCtrl)
        self.Bind(wx.EVT_BUTTON, self.OnCartApply, self.m_CartApplyButton)
        self.Bind(wx.EVT_BUTTON, self.OnCartClear, self.m_CartClearButton)
        self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.OnCartDeselected, self.m_CartListCtrl)
        self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnCartSelected, self.m_CartListCtrl)
        self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.OnCartActivated, self.m_CartListCtrl)
        self.Bind(wx.EVT_LIST_ITEM_RIGHT_CLICK, self.OnCartRightClick, self.m_CartListCtrl)
        self.Bind(wx.EVT_LIST_COL_END_DRAG, self.OnCartColResized, self.m_CartListCtrl)
        # end wxGlade
        self.Bind( wx.EVT_SIZE, self.OnSize )
        self.Bind( wx.EVT_MOVE, self.OnWindowMoved )
#TODO Is Needed?        self.Bind( wx.EVT_DIRPICKER_CHANGED, self.OnCartDirChanged, self.m_CartDirPicker )

        self.__LocalInit ()

        if MyConfig.AutoBackupSaves == 1:
            self.m_MainFrame_menubar.FindItemById( ID_AUTOBACKUPSAVES ).Check( True )
        else:
            self.m_MainFrame_menubar.FindItemById( ID_AUTOBACKUPSAVES ).Check( False )

        if MyConfig.AutoRestoreSaves == 1:
            self.m_MainFrame_menubar.FindItemById( ID_AUTORESTORESAVES ).Check( True )
        else:
            self.m_MainFrame_menubar.FindItemById( ID_AUTORESTORESAVES ).Check( False )
        
        if MyConfig.CheckNewFilesOnStartup == 1:
            self.m_MainFrame_menubar.FindItemById( ID_CHECKNEWFILESSTARTUP ).Check( True )
        else:
            self.m_MainFrame_menubar.FindItemById( ID_CHECKNEWFILESSTARTUP ).Check( False )
            
        if MyConfig.CopyTrim == 1:
            self.m_MainFrame_menubar.FindItemById( ID_COPYTRIM ).Check( True )
        else:
            self.m_MainFrame_menubar.FindItemById( ID_COPYTRIM ).Check( False )

        try:
            self.SetIcon( MyIcon.GetIcon() )
        except:
            pass
        
    def __set_properties( self ):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle("RToolDS")
        self.SetSize((800, 601))
        self.m_FilterApplyButton.SetMinSize((40, -1))
        self.m_FilterClearButton.SetMinSize((40, -1))
        self.m_FilterDummyStaticCtrl.SetMinSize((24, 13))
        self.m_CartApplyButton.SetMinSize((90, -1))
        self.m_CartClearButton.SetMinSize((90, -1))
        # end wxGlade

    def __do_layout( self ):
        # begin wxGlade: MyFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3 = wx.FlexGridSizer(3, 1, 0, 0)
        sizer_4_copy = wx.StaticBoxSizer(self.sizer_4_copy_staticbox, wx.HORIZONTAL)
        grid_sizer_1_copy = wx.GridSizer(2, 2, 5, 5)
        sizer_5_copy = wx.FlexGridSizer(1, 3, 0, 0)
        sizer_2 = wx.FlexGridSizer(3, 1, 0, 0)
        sizer_4 = wx.StaticBoxSizer(self.sizer_4_staticbox, wx.HORIZONTAL)
        grid_sizer_1 = wx.GridSizer(2, 2, 5, 5)
        grid_sizer_12 = wx.FlexGridSizer(1, 4, 0, 0)
        sizer_5 = wx.FlexGridSizer(1, 4, 0, 0)
        sizer_5.Add(self.label_1, 0, wx.LEFT|wx.RIGHT|wx.TOP|wx.ALIGN_CENTER_VERTICAL, 3)
        sizer_5.Add(self.m_FilterCtrl, 0, wx.LEFT|wx.RIGHT|wx.TOP|wx.EXPAND, 3)
        sizer_5.Add(self.m_FilterApplyButton, 0, wx.LEFT|wx.RIGHT|wx.TOP, 3)
        sizer_5.Add(self.m_FilterClearButton, 0, wx.LEFT|wx.RIGHT|wx.TOP, 3)
        sizer_5.AddGrowableCol(1)
        sizer_2.Add(sizer_5, 1, wx.EXPAND, 0)
        grid_sizer_12.Add(self.m_FilterDummyStaticCtrl, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 3)
        grid_sizer_12.Add(self.m_GenreChoice, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 3)
        grid_sizer_12.Add(self.m_SizeCtrl, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 3)
        grid_sizer_12.Add(self.m_CountryCtrl, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 3)
        sizer_2.Add(grid_sizer_12, 1, wx.EXPAND, 0)
        sizer_2.Add(self.m_RomListCtrl, 1, wx.EXPAND, 0)
        grid_sizer_1.Add(self.m_RomListSizeCtrl, 0, 0, 0)
        grid_sizer_1.Add(self.m_RomListNumCtrl, 0, 0, 0)
        grid_sizer_1.Add(self.m_RomListTotalSizeCtrl, 0, 0, 0)
        grid_sizer_1.Add(self.m_RomListTotalNumCtrl, 0, 0, 0)
        sizer_4.Add(grid_sizer_1, 1, wx.EXPAND, 0)
        self.panel_1.SetSizer(sizer_4)
        sizer_2.Add(self.panel_1, 1, wx.EXPAND, 0)
        self.window_1_pane_1.SetSizer(sizer_2)
        sizer_2.AddGrowableRow(2)
        sizer_2.AddGrowableCol(0)
        sizer_5_copy.Add(self.m_CartDirPicker, 0, wx.EXPAND, 0)
        sizer_5_copy.Add(self.m_CartApplyButton, 0, wx.LEFT|wx.RIGHT|wx.TOP|wx.ALIGN_CENTER_VERTICAL, 3)
        sizer_5_copy.Add(self.m_CartClearButton, 0, wx.LEFT|wx.RIGHT|wx.TOP|wx.ALIGN_CENTER_VERTICAL, 3)
        sizer_5_copy.AddGrowableCol(0)
        sizer_3.Add(sizer_5_copy, 1, wx.EXPAND, 0)
        sizer_3.Add((20, 21), 0, wx.LEFT|wx.RIGHT|wx.TOP, 3)
        sizer_3.Add(self.m_CartListCtrl, 1, wx.EXPAND, 0)
        grid_sizer_1_copy.Add(self.m_CartListSizeCtrl, 0, 0, 0)
        grid_sizer_1_copy.Add(self.m_CartListNumCtrl, 0, 0, 0)
        grid_sizer_1_copy.Add(self.m_CartListTotalSizeCtrl, 0, 0, 0)
        grid_sizer_1_copy.Add(self.m_CartListTotalNumCtrl, 0, 0, 0)
        sizer_4_copy.Add(grid_sizer_1_copy, 1, wx.EXPAND, 0)
        self.panel_1_copy.SetSizer(sizer_4_copy)
        sizer_3.Add(self.panel_1_copy, 1, wx.EXPAND, 0)
        self.window_1_pane_2.SetSizer(sizer_3)
        sizer_3.AddGrowableRow(2)
        sizer_3.AddGrowableCol(0)
        self.m_Splitter.SplitVertically(self.window_1_pane_1, self.window_1_pane_2)
        sizer_1.Add(self.m_Splitter, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade
        
    def __LocalInit( self ):
        self.InInit = True
        self.m_ROMListSelectedSize  = 0
        self.m_ROMListSelectedNum   = 0
        self.m_ROMListTotalSize     = 0
        self.m_ROMListTotalNum      = 0
        self.m_CartListSelectedSize = 0
        self.m_CartListSelectedNum  = 0
        self.m_CartListTotalSize    = 0
        self.m_CartListTotalNum     = 0
#        self.m_Filter  = ""
        self.m_Pending = []
        try:
            self.m_CartFree = DiskSpace.DriveFree( MyConfig.CartDrive )
            self.m_CartSize = DiskSpace.DriveSize( MyConfig.CartDrive )
            self.m_CartDirPicker.SetValue( MyConfig.CartDrive )
            self.m_MainFrame_menubar.FindItemById( ID_AUTOBACKUPSAVES ).Enable( True )
            self.m_MainFrame_menubar.FindItemById( ID_BACKUPSAVES ).Enable( True )
        except:
            self.m_CartFree = 0
            self.m_CartSize = 0
            self.m_CartListCtrl.Disable()
            self.m_MainFrame_menubar.FindItemById( ID_AUTOBACKUPSAVES ).Enable( False )
            self.m_MainFrame_menubar.FindItemById( ID_BACKUPSAVES ).Enable( False )

        if ( self.m_CartSize/1024/1024 ) > 1023:
            self.m_CartSizeStr = "%0.1f Gb" % ( float( self.m_CartSize )/1024/1024/1024 )
        else:
            self.m_CartSizeStr = "%d Mb" % ( self.m_CartSize/1024/1024 )

        self.m_ImageList = wx.ImageList( 32, 32 )

        self.InsertColumns()
        
        self.m_CountryCtrl.Append( "Any Country" )
        for Region in sorted( MyConfig.Regions.keys() ):
            self.m_CountryCtrl.Append( Region )
        MyConfig.Regions["Any Country"] = ""
        self.m_Region = MyConfig.CurrentRegion
        self.m_CountryCtrl.SetSelection( self.m_CountryCtrl.FindString( self.m_Region ) )
        
        self.Populate_Sizes ()

        self.Populate_Genre ()
        
        self.m_FilterCtrl.SetValue (MyConfig.CurrentFilter)

        self.m_Con = MyConfig.SetupDatabase()

        if MyConfig.CheckNewFilesOnStartup == 1:
            if UpdateDB( self, MyConfig.ROMPaths, self.m_Con, MyConfig.AllExtensions ) > 0:
                wx.MessageBox( 'The Database has been Updated', 'Update', wx.OK | wx.ICON_INFORMATION )

        if MyConfig.SaveDir == "":
            wx.MessageBox( 'No Save File Directory Set.\nPlease Set it in Options\n\nNo Saves will be Backed Up', 'Save Directory', wx.OK| wx.ICON_WARNING )
            self.m_MainFrame_menubar.FindItemById( ID_AUTOBACKUPSAVES ).Enable( False )
            self.m_MainFrame_menubar.FindItemById( ID_BACKUPSAVES ).Enable( False )
        else:
            if MyConfig.AutoBackupSaves == 1 and self.m_MainFrame_menubar.FindItemById( ID_AUTOBACKUPSAVES ).IsEnabled():
                self.BackupSaves ()

        self.LoadROMCache()

        self.CountSaves()
        
        self.PopulateROMList()
        self.PopulateCartList()

        self.ResizeColumns()
        
        self.m_RomListCtrl.SetFocus()
        
        self.SetSize( MyConfig.ScreenSize )
        
        if MyConfig.ScreenPos[0] == -1:
            self.CentreOnScreen()
        else:
            self.SetPosition( MyConfig.ScreenPos )
        if MyConfig.ScreenMaximize:
            self.Maximize( True )
        else:
            self.Maximize( False )
            
        target = MyFileDropTarget.MyFileDropTarget( self )
        self.m_CartListCtrl.SetDropTarget( target )
        self.m_Web = MyWeb( self.m_Con )
        
        self.InInit = False
        
    def InsertColumns( self ):
        self.m_RomListCtrl.DeleteAllColumns()
        if "Icon" in MyConfig.ColumnsToDisplay:
            self.m_RomListCtrl.SetImageList( self.m_ImageList, wx.IMAGE_LIST_SMALL )
        self.m_CartListCtrl.DeleteAllColumns()
        if "Icon" in MyConfig.ColumnsToDisplay:
            self.m_CartListCtrl.SetImageList( self.m_ImageList, wx.IMAGE_LIST_SMALL )
        
        ColNum = 0
        for Col in MyConfig.ColumnsToDisplay:
            if Col != "Size":
                self.m_RomListCtrl.InsertColumn( ColNum, MyConfig.ColumnTitles[MyConfig.ColumnsToDisplay[ColNum]] )
                self.m_CartListCtrl.InsertColumn( ColNum, MyConfig.ColumnTitles[MyConfig.ColumnsToDisplay[ColNum]] )
            else:
                self.m_RomListCtrl.InsertColumn( ColNum, MyConfig.ColumnTitles[MyConfig.ColumnsToDisplay[ColNum]], wx.LIST_FORMAT_RIGHT )
                self.m_CartListCtrl.InsertColumn( ColNum, MyConfig.ColumnTitles[MyConfig.ColumnsToDisplay[ColNum]], wx.LIST_FORMAT_RIGHT )
            ColNum += 1

    def ResizeColumns( self ):
        ColNum = 0
        for Column in MyConfig.ColumnsToDisplay:
            if MyConfig.ColumnSizes[Column] != -1:
                self.m_RomListCtrl.SetColumnWidth( ColNum, MyConfig.ColumnSizes[Column] )
                self.m_CartListCtrl.SetColumnWidth( ColNum, MyConfig.ColumnSizes[Column] )
            else:
                self.m_RomListCtrl.SetColumnWidth( ColNum, wx.LIST_AUTOSIZE )
#                self.m_CartListCtrl.SetColumnWidth( ColNum, wx.LIST_AUTOSIZE )
                self.m_CartListCtrl.SetColumnWidth( ColNum, self.m_RomListCtrl.GetColumnWidth(ColNum) )
            ColNum += 1
            
    def Populate_Sizes ( self ):
        for count in range ( self.m_SizeCtrl.GetCount()-1, -1, -1 ):
            self.m_SizeCtrl.Delete( count )
        self.m_SizeCtrl.Append( "Any Size" )
        for Size in MyConfig.Sizes:
            self.m_SizeCtrl.Append( "<=%dMb" % Size )
        try:
            self.m_SizeCtrl.SetSelection( self.m_SizeCtrl.FindString( MyConfig.CurrentSize ) )
        except:
            self.m_SizeCtrl.SetSelection( 0 )
        if MyConfig.CurrentSize == "Any Size":
            self.m_Size = 0
        else:
            self.m_Size = int ( MyConfig.CurrentSize[2:-2] ) * 1024 * 1024
            
    def Populate_Genre ( self ):
        for count in range ( self.m_GenreChoice.GetCount()-1, -1, -1 ):
            self.m_GenreChoice.Delete( count )
        self.m_GenreChoice.Append( "Any Genre" )
        for Genre in MyConfig.Genres:
            self.m_GenreChoice.Append( Genre )
        try:
            self.m_GenreChoice.SetSelection( self.m_GenreChoice.FindString( MyConfig.Genre ) )
        except:
            self.m_GenreChoice.SetSelection( 0 )

    def LoadROMCache( self ):
        self.m_ROMCache = []
        self.m_ROMDict = {}

        self.m_Cursor = self.m_Con.cursor ()
        self.m_Cursor.execute ( 'select * from DefaultView' )

        Count=0
        for Row in self.m_Cursor:
            m_ROM = ROM( Row )
            self.m_ROMCache.append ( m_ROM )
            self.m_ROMDict [m_ROM.m_ID] = Count
            self.m_ImageList.Add ( m_ROM.m_LargeImage )
            Count += 1

        self.m_Cursor.close()
        
    def InsertRow ( self, Ctrl, Row, IconNum, ItemData, Saves ):
        Index = -1
        ColumnNumber = 0
        for Col in MyConfig.ColumnsToDisplay:
            if Col == "Icon":
                Index = Ctrl.InsertImageItem ( sys.maxint, IconNum )
            if Col == "Release Number":
                if Index != -1:
                    Ctrl.SetStringItem ( Index, ColumnNumber, "%04d" % Row.m_ReleaseNumber )
                else:
                    Index = Ctrl.InsertStringItem( sys.maxint, "%04d" % Row.m_ReleaseNumber )
            if Col == "Filename":
                if Index != -1:
                    Ctrl.SetStringItem ( Index, ColumnNumber, Row.m_FileName )
                else:
                    Index = Ctrl.InsertStringItem( sys.maxint, Row.m_FileName )
            if Col == "Display Name":
                if Index != -1:
                    Ctrl.SetStringItem ( Index, ColumnNumber, Row.m_DisplayName )
                else:
                    Index = Ctrl.InsertStringItem( sys.maxint, Row.m_DisplayName )
            if Col == "Size":
                if Index != -1:
#                    Ctrl.SetStringItem ( Index, ColumnNumber, str( Row.m_Size/1024/1024 )+" Mb" )
                    Ctrl.SetStringItem ( Index, ColumnNumber, self.FormatSize ( Row.m_Size ))
                else:
#                    Index = Ctrl.InsertStringItem( sys.maxint, str( Row.m_Size/1024/1024 )+" Mb" )
                    Index = Ctrl.InsertStringItem( sys.maxint, self.FormatSize ( Row.m_Size ))
            if Col == "Header Title":
                if Index != -1:
                    Ctrl.SetStringItem ( Index, ColumnNumber, Row.m_Header_Title )
                else:
                    Index = Ctrl.InsertStringItem( sys.maxint, Row.m_Header_Title )
            if Col == "Maker":
                if Index != -1:
                    Ctrl.SetStringItem ( Index, ColumnNumber, Row.m_Header_Maker_Code )
                else:
                    Index = Ctrl.InsertStringItem( sys.maxint, Row.m_Header_Maker_Code )
            if Col == "Logo Title":
                if Index != -1:
                    Ctrl.SetStringItem ( Index, ColumnNumber, Row.m_Header_Logo_Title )
                else:
                    Index = Ctrl.InsertStringItem( sys.maxint, Row.m_Header_Logo_Title )
            if Col == "Saves":
                if Index != -1:
                    Ctrl.SetStringItem ( Index, ColumnNumber, str( Saves ) )
                else:
                    Index = Ctrl.InsertStringItem( sys.maxint, str( Saves ) )
            if Col == "Genre":
                if Index != -1:
                    Ctrl.SetStringItem ( Index, ColumnNumber, Row.m_Genre )
                else:
                    Index = Ctrl.InsertStringItem( sys.maxint, Row.m_Genre )
            if Col == "Trimmed Size":
                if Row.m_TrimSize != 0:
                    if Index != -1:
#                        Ctrl.SetStringItem ( Index, ColumnNumber, str( Row.m_TrimSize/1024/1024 )+" Mb" )
                        Ctrl.SetStringItem ( Index, ColumnNumber, self.FormatSize ( Row.m_TrimSize) )
                    else:
                        Index = Ctrl.InsertStringItem( sys.maxint, self.FormatSize ( Row.m_TrimSize ) )
                else:
                    if Index != -1:
                        Ctrl.SetStringItem ( Index, ColumnNumber, "n/a" )
                    else:
                        Index = Ctrl.InsertStringItem( sys.maxint, "n/a" )

            ColumnNumber += 1
        if ItemData != None:
            Ctrl.SetItemBackgroundColour( Index, "light blue" )
            Ctrl.SetItemData ( Index, ItemData )
        return Index
    
    def CheckRegion( self, FileName ):
        if MyConfig.Regions [self.m_Region][0] == "!":
            ret = FileName.find ( MyConfig.Regions[self.m_Region][1:] )
            if ret == -1:
                return 1
            else:
                return -1
        else:
            return FileName.find ( MyConfig.Regions[self.m_Region] )

    def CheckSize( self, Size ):
        if self.m_Size == 0:
            return 1
        else:
            if Size <= self.m_Size:
                return 1
            else:
                return -1

    def CheckGenre( self, Genre ):
        if Genre == MyConfig.Genre:
            return 1
        else:
            return -1

    def PopulateROMList( self ):
        Index = -1
        Filter = MyConfig.CurrentFilter.lower()
        self.m_RomListCtrl.DeleteAllItems()

        Count = 0
        self.m_ROMListTotalSize = 0
        self.m_ROMListTotalNum  = 0
        self.m_ROMListCache = []

        for Row in self.m_ROMCache:
            if self.m_Region == "Any Country" or self.CheckRegion ( Row.m_FileName ) != -1:
                if MyConfig.CurrentSize == "Any Size" or self.CheckSize ( Row.m_Size ) != -1:
                    if MyConfig.Genre == "Any Genre" or self.CheckGenre ( Row.m_Genre) != -1:
                        if Filter == "" or Row.m_FileName.lower().find ( Filter ) != -1:
                            try:
                                Saves = self.RomSaves[os.path.splitext ( Row.m_InternalZipName )[0]]
                            except:
                                Saves = 0
                            Index = self.InsertRow ( self.m_RomListCtrl, Row, Count, None, Saves )
                            self.m_ROMListCache.append ( [ Row.m_FileName, Row.m_Size, Row.m_ID ] )
                            self.m_ROMListTotalNum  += 1
                            self.m_ROMListTotalSize += Row.m_Size
            Count += 1
        if Index != -1:
            self.UpdateROMCtrl()
            self.m_BGColour = self.m_RomListCtrl.GetItemBackgroundColour( Index )
            self.m_RomListCtrl.Enable()
        else:
            self.m_RomListCtrl.Disable()
            wx.MessageBox( 'Nothing will work until you populate the database', 'Warning', wx.OK | wx.ICON_EXCLAMATION )

    def PopulateCartList( self ):
        self.m_CartListCtrl.DeleteAllItems()
        MyConfig.Missing = []
        self.m_CartListTotalSize = 0
        self.m_CartListTotalNum  = 0
        self.m_CartListCache = []

        if not self.m_CartListCtrl.IsEnabled() or not self.m_RomListCtrl.IsEnabled():
            self.UpdateCartCtrl()
            return
        
        m_Cursor = self.m_Con.cursor ()
        DirList = os.listdir ( MyConfig.CartDrive )
        sDirList = sorted( DirList )
        for File in sDirList:
            if os.path.isdir( File ):
                pass
            else:
                Ext = os.path.splitext( File )[1]
                if Ext in MyConfig.CartExtensions:
                   LongName = os.path.join ( MyConfig.CartDrive, File )
                   fp=open( LongName, "rb" )
                   Header=fp.read( 0x12 )
                   fp.close()
                   Header_Game_Code = Header[0x0C:0x10].strip()
                   Header_Maker_Code = Header[0x10:0x12]
                   ID = ( Header_Maker_Code + Header_Game_Code, )
                   m_Cursor.execute ( 'select * from DefaultView where ID=?', ID )
                   try:
                       Row = ROM( m_Cursor.fetchone() )
                   except:
                       MyConfig.Missing.append ( File )

                   try:
                        Saves = self.CartSaves[os.path.splitext ( Row.m_InternalZipName )[0]]
                   except:
                        Saves = 0
                   
                   self.InsertRow ( self.m_CartListCtrl, Row, self.m_ROMDict [Row.m_ID], None, Saves )

                   self.m_CartListCache.append ( [ File, Row.m_Size, Row.m_ID ] )
                   self.m_CartListTotalNum  += 1
                   self.m_CartListTotalSize += Row.m_Size

        m_Cursor.close()
        self.UpdateCartCtrl()
        if MyConfig.Missing != []:
            dlg = MyMissingDialog.MyMissingDialog ( self )
            dlg.ShowModal()
            dlg.Destroy()

    def UpdateROMCtrl ( self ):
        if ( self.m_ROMListSelectedSize/1024/1024 ) > 1023:
            SelSize = "%0.1f Gb" % ( float ( self.m_ROMListSelectedSize )/1024/1024/1024 )
        else:
            SelSize = "%d Mb" % ( self.m_ROMListSelectedSize/1024/1024 )
        if ( self.m_ROMListTotalSize/1024/1024 ) > 1023:
            TotalSize = "%0.2f Gb" % ( self.m_ROMListTotalSize/1024/1024/1024 )
        else:
            TotalSize = "%d Mb" % ( float ( self.m_ROMListTotalSize )/1024/1024 )
        self.m_RomListSizeCtrl.SetLabel( "Selected ROM Size : %s" % ( SelSize ) )
        self.m_RomListNumCtrl.SetLabel( "Selected ROMs : %d" % ( self.m_ROMListSelectedNum ) )
        self.m_RomListTotalSizeCtrl.SetLabel( "Total ROM Size : %s" % ( TotalSize ) )
        self.m_RomListTotalNumCtrl.SetLabel( "Total ROMs : %d" % ( self.m_ROMListTotalNum ) )

    def UpdateCartCtrl ( self ):
        if ( self.m_CartListSelectedSize/1024/1024 ) > 1023:
            SelSize = "%0.1f Gb" % ( float ( self.m_CartListSelectedSize )/1024/1024/1024 )
        else:
            SelSize = "%d Mb" % ( self.m_CartListSelectedSize/1024/1024 )
        if ( ( self.m_CartSize - self.m_CartListTotalSize )/1024/1024 ) > 1023:
            AvailableSize = "%0.2f Gb" % ( float( self.m_CartSize - self.m_CartListTotalSize )/1024/1024/1024 )
        else:
            AvailableSize = "%d Mb" % ( ( self.m_CartSize - self.m_CartListTotalSize )/1024/1024 )
        self.m_CartListSizeCtrl.SetLabel( "Selected ROM Size : %s" % ( SelSize ) )
        self.m_CartListNumCtrl.SetLabel( "Selected ROMs : %d" % ( self.m_CartListSelectedNum ) )
        self.m_CartListTotalSizeCtrl.SetLabel( "Available Space : %s" % ( AvailableSize ) )
        self.m_CartListTotalNumCtrl.SetLabel( "Total ROMs : %d" % ( self.m_CartListTotalNum ) )

    def GetHash ( self, FileName ):
        SaveFile = open( FileName, "rb" )
        Data = SaveFile.read()
        SaveFile.close ()
        if sys.version_info[0] == 2 and sys.version_info[1] >= 5:
            md5hash = hashlib.md5()
        else:
            md5hash = md5.new()
        md5hash.update( Data )
        return md5hash.hexdigest()
    
    def CountSaves ( self ):
        SearchStr = os.path.join ( MyConfig.SaveDir, "*.sav.*" )
        DirList = glob.glob ( SearchStr )
        
        self.RomSaves  = {}
        
        child = None
        Count = 0
        for File in sorted ( DirList ):
            if os.path.isdir( File ):
                pass
            else:
                FullName = os.path.split ( File )[1]
                DisplayName = os.path.splitext ( os.path.splitext ( FullName )[0] )[0]
                Ext = os.path.splitext( File )[1]
                SaveNum = Ext[1:]
                
                if SaveNum == "1":
                    if child != None:
                        self.RomSaves [child] = Count - 1
                    child = DisplayName
                    Count = 1

                if Count > 0:
                    Count += 1
        if child != None:
            self.RomSaves [child] = Count - 1
        
        self.CartSaves = {}
        if not self.m_CartListCtrl.IsEnabled():
            return

        DirList = os.listdir ( MyConfig.CartDrive )

        for File in DirList:
            if os.path.isdir( File ):
                pass
            else:
                Ext = os.path.splitext( File )[1]
                if Ext in MyConfig.SaveExtensions:
                    DisplayName = os.path.splitext( File )[0]
                    self.CartSaves [DisplayName] = 1
    
    def BackupSaves( self ):
        if not self.m_CartListCtrl.IsEnabled():
            return

        DirList = os.listdir ( MyConfig.CartDrive )

        for File in DirList:
            if os.path.isdir( File ):
                pass
            else:
                Ext = os.path.splitext( File )[1]
                if Ext in MyConfig.SaveExtensions:
                   LongName = os.path.join ( MyConfig.CartDrive, File )
                   SaveName = os.path.join ( MyConfig.SaveDir, os.path.basename( LongName ) )
                   CartHash = self.GetHash( LongName )
                   
                   if os.path.isfile ( SaveName+".1" ):
                       if self.GetHash( SaveName+".1" ) != CartHash:
                           for Count in range ( MyConfig.NumSaves-1, 0, -1 ):
                               if os.path.isfile ( SaveName+"."+str( Count ) ):
                                   shutil.move( SaveName+"."+str( Count ), SaveName+"."+str( Count+1 ) )
                           shutil.copy2 ( LongName, os.path.join ( MyConfig.SaveDir, os.path.basename( LongName )+".1" ) )
                   else:
                       shutil.copy2 ( LongName, os.path.join ( MyConfig.SaveDir, os.path.basename( LongName )+".1" ) )
        self.CountSaves()

    def ROMCopy ( self, SelRow ):
        Skip = 0
        Index = -1
        Row = self.m_ROMCache [self.m_ROMDict[self.m_ROMListCache [SelRow][2]]]
        for Item in self.m_CartListCache:
            if Item[2] == Row.m_ID:
                Skip = 1
        if Skip != 1:
            if Row.m_Size + self.m_CartListTotalSize > self.m_CartSize:
                wx.MessageBox( 'Not Enough Free Space!', 'Error', wx.OK | wx.ICON_ERROR )
                Skip = 2
        if Skip == 0:
            if Row.m_InternalZipName:
                File = Row.m_InternalZipName
            else:
                File = Row.m_FileName
            Index = self.InsertRow ( self.m_CartListCtrl, Row, self.m_ROMDict [Row.m_ID], 1, "" )

            self.m_CartListCache.append ( [ File, Row.m_Size, Row.m_ID ] )
            self.m_CartListTotalNum  += 1
            self.m_CartListTotalSize += Row.m_Size
        return ( Skip, Index )

    def OnSize( self, event ):
        self.m_Splitter.SetSashPosition( ( self.GetSize ()[0] / 2 ) - 6 ) #TODO: Fudge Factor
        if not self.InInit:
            if not self.IsMaximized():
                MyConfig.ScreenSize = self.GetSize()
                MyConfig.ScreenMaximize = False
            else:
                MyConfig.ScreenMaximize = True
   
        event.Skip()
        return

    def OnWindowMoved( self, event ):
        if not self.InInit:
            if not self.IsMaximized():
                MyConfig.ScreenPos = self.GetPosition()
        self.m_Splitter.SetSashPosition( ( self.GetSize ()[0] / 2 ) - 6 ) #TODO: Fudge Factor
        if not self.InInit:
            if not self.IsMaximized():
                MyConfig.ScreenSize = self.GetSize()
            else:
                MyConfig.ScreenMaximize = True
        event.Skip()
        return

    def On_Options( self, event ): # wxGlade: MyFrame.<event_handler>
        MyConfig.OptionsAreOK = False
        dlg = MyOptionsDialog.MyOptionsDialog ( self )
        dlg.ShowModal()
        dlg.Destroy()
        if MyConfig.OptionsAreOK:
            self.Populate_Sizes ()
            self.Populate_Genre ()
            self.InsertColumns()
            self.PopulateROMList()
            self.PopulateCartList()
            self.ResizeColumns()
            self.m_RomListCtrl.SetFocus()
            if MyConfig.SaveDir == "":
                self.m_MainFrame_menubar.FindItemById( ID_AUTOBACKUPSAVES ).Enable( False )
                self.m_MainFrame_menubar.FindItemById( ID_BACKUPSAVES ).Enable( False )
            else:
                self.m_MainFrame_menubar.FindItemById( ID_AUTOBACKUPSAVES ).Enable( True )
                self.m_MainFrame_menubar.FindItemById( ID_BACKUPSAVES ).Enable( True )

        event.Skip()

    def On_Quit( self, event ): # wxGlade: MyFrame.<event_handler>
        self.Close()
        event.Skip()

    def On_Populate( self, event ): # wxGlade: MyFrame.<event_handler>
        Res = wx.MessageBox( 'Are you Sure you want to Re-Populate the Database?', 'Confirmation', wx.YES_NO| wx.ICON_QUESTION )
        if Res == wx.YES: 
            CreateDB( self, MyConfig.ROMPaths, self.m_Con, MyConfig.AllExtensions )
            self.m_RomListCtrl.Enable()
            self.LoadROMCache()
            self.PopulateROMList()
            self.PopulateCartList()

            self.ResizeColumns()
        event.Skip()

    def On_About( self, event ): # wxGlade: MyFrame.<event_handler>
        dlg = MyAboutDialog.MyAboutDialog ( self )
        dlg.m_TitleText.SetLabel ( "RToolDS Version %s" % MyConfig.ProgVersion )
        dlg.m_AboutText.SetLabel ( """
Python %s
wxPython %s
""" % ( sys.version, wx.VERSION_STRING ) )
        dlg.ShowModal()
        dlg.Destroy()
        event.Skip()

    def OnFilter( self, event ): # wxGlade: MyFrame.<event_handler>
        MyConfig.CurrentFilter = event.GetString()
        self.PopulateROMList()
        event.Skip()


    def OnCountry( self, event ): # wxGlade: MyFrame.<event_handler>
        if not self.InInit:
            if event.GetString() != self.m_Region:
                self.m_Region = event.GetString()
                MyConfig.CurrentRegion = self.m_Region
                self.PopulateROMList ()
        event.Skip()

    def OnFilterApply( self, event ): # wxGlade: MyFrame.<event_handler>
        MyConfig.CurrentFilter = self.m_FilterCtrl.GetValue()
        self.PopulateROMList()
        event.Skip()

    def OnFilterClear( self, event ): # wxGlade: MyFrame.<event_handler>
        if self.m_FilterCtrl.GetValue() != "":
            self.m_FilterCtrl.Clear()
            MyConfig.CurrentFilter = ""
            self.PopulateROMList()
        event.Skip()

    def OnROMDeselected( self, event ): # wxGlade: MyFrame.<event_handler>
        self.currentItem = event.m_itemIndex
        self.m_ROMListSelectedSize -= self.m_ROMListCache[self.currentItem][1]
        self.m_ROMListSelectedNum -= 1
        self.UpdateROMCtrl()
        event.Skip()

    def OnBeginDrag( self, event ): # wxGlade: MyFrame.<event_handler>
        linesdata = "Argh"

        data = wx.CustomDataObject( "RToolDS_DD" )
        data.SetData( linesdata )

        dropSource = wx.DropSource( self )
        dropSource.SetData( data )
        result = dropSource.DoDragDrop( wx.Drag_AllowMove )

        if result == wx.DragMove:
            self.OnROMCopy( None )
            self.Refresh()
        event.Skip()

    def OnROMActivated( self, event ): # wxGlade: MyFrame.<event_handler>
        SelRow = event.m_itemIndex
        self.ROMCopy( SelRow )
        self.UpdateCartCtrl()
        event.Skip()

    def OnROMRightClick( self, event ): # wxGlade: MyFrame.<event_handler>
        if not hasattr( self, "popupROMList1" ):
            self.popupROMList1 = wx.NewId()
            self.Bind( wx.EVT_MENU, self.OnROMCopy, id=self.popupROMList1 )
            self.popupROMList2 = wx.NewId()
            self.Bind( wx.EVT_MENU, self.OnROMEditGenre, id=self.popupROMList2 )
            self.popupROMList3 = wx.NewId()
            self.Bind( wx.EVT_MENU, self.OnROMGetGenre, id=self.popupROMList3 )
            self.popupROMList4 = wx.NewId()
            self.Bind( wx.EVT_MENU, self.On_Analyze, id=self.popupROMList4 )
        menu = wx.Menu()
        item = wx.MenuItem( menu, self.popupROMList1, "Copy" )
        menu.AppendItem( item )
        item = wx.MenuItem( menu, self.popupROMList2, "Edit Genre" )
        menu.AppendItem( item )
        item = wx.MenuItem( menu, self.popupROMList3, "Update Genre from PocketHeaven" )
        menu.AppendItem( item )
        item = wx.MenuItem( menu, self.popupROMList4, "Analyze for Trim" )
        menu.AppendItem( item )
        self.PopupMenu( menu )
        menu.Destroy()
        event.Skip()

    def OnROMSelected( self, event ): # wxGlade: MyFrame.<event_handler>
        self.currentItem = event.m_itemIndex
        self.m_ROMListSelectedSize += self.m_ROMListCache[self.currentItem][1]
        self.m_ROMListSelectedNum += 1
        self.UpdateROMCtrl()
        event.Skip()

    def OnCartApply( self, event ): # wxGlade: MyFrame.<event_handler>
        self.SetCursor( wx.StockCursor( wx.CURSOR_WAIT ) )

        Items = self.m_CartListCtrl.GetItemCount()
        ToProcess = 0
        for Count in range ( Items-1, -1, -1 ):
            Data = self.m_CartListCtrl.GetItemData ( Count )
            if Data == 1:
                ToProcess += 1
                
        dlg = wx.ProgressDialog( "Copying", 
                                        "Copying in Progress", 
                                        maximum = ToProcess, 
                                        parent=self, 
                                        style = wx.PD_APP_MODAL
                                )
        dlg.SetCursor( wx.StockCursor( wx.CURSOR_WAIT ) )
        Processed = 0
        for Count in range ( Items-1, -1, -1 ):
            Data = self.m_CartListCtrl.GetItemData ( Count )
            if Data == 1:
                Row = self.m_ROMCache [self.m_ROMDict[self.m_CartListCache [Count][2]]]
                if os.path.splitext( Row.m_FileName )[1].lower() == '.zip':
                    File=zipfile2.ZipFile ( os.path.join ( Row.m_DirectoryName, Row.m_FileName ) , "r" )
#RMJ                    if Row.m_TrimSize
#                    read_size
                    bytes = File.read ( Row.m_InternalZipName )
                    FileOut = open ( os.path.join ( MyConfig.CartDrive, Row.m_InternalZipName ), "wb" )
                    FileOut.write ( bytes )
                    FileOut.close ()
                else:
                    shutil.copy( os.path.join ( Row.m_DirectoryName, Row.m_FileName ), os.path.join ( MyConfig.CartDrive, Row.m_FileName ) )
                
                if MyConfig.AutoRestoreSaves == 1 and self.m_MainFrame_menubar.FindItemById( ID_AUTORESTORESAVES ).IsEnabled():
                    if os.path.splitext( Row.m_FileName )[1].lower() == '.zip':
                        SaveName = os.path.splitext ( Row.m_InternalZipName )[0] + ".sav.1"
                    else:
                        SaveName = os.path.splitext ( Row.m_FileName )[0] + ".sav.1"
                    if os.path.isfile ( os.path.join ( MyConfig.SaveDir, SaveName ) ):
                        shutil.copy2 ( os.path.join ( MyConfig.SaveDir, SaveName ), os.path.join ( MyConfig.CartDrive, os.path.splitext ( SaveName )[0] ) )

                dlg.Update( Processed )
                wx.Yield()
                Processed += 1
                self.m_CartListCtrl.SetItemData( Count, 0 )
                self.m_CartListCtrl.SetItemBackgroundColour( Count, wx.Colour( 255, 255, 255 ) )
        self.PopulateCartList()
        dlg.Destroy()
        self.SetCursor( wx.StockCursor( wx.CURSOR_ARROW ) )

        self.PopulateCartList()
        self.UpdateCartCtrl()
        event.Skip()

    def OnCartClear( self, event ): # wxGlade: MyFrame.<event_handler>
        Items = self.m_CartListCtrl.GetItemCount()
        for Count in range ( Items-1, -1, -1 ):
            Data = self.m_CartListCtrl.GetItemData ( Count )
            if Data == 1:
                self.m_CartListTotalSize -= self.m_CartListCache[Count][1]
                self.m_CartListTotalNum -= 1
                self.m_CartListCtrl.DeleteItem( Count )
                del self.m_CartListCache[Count]
        self.UpdateCartCtrl()
        event.Skip()

    def OnCartDeselected( self, event ): # wxGlade: MyFrame.<event_handler>
        self.currentItem = event.m_itemIndex
        self.m_CartListSelectedSize -= self.m_CartListCache[self.currentItem][1]
        self.m_CartListSelectedNum -= 1
        self.UpdateCartCtrl()
        event.Skip()

    def OnCartSelected( self, event ): # wxGlade: MyFrame.<event_handler>
        self.currentItem = event.m_itemIndex
        self.m_CartListSelectedSize += self.m_CartListCache[self.currentItem][1]
        self.m_CartListSelectedNum += 1
        self.UpdateCartCtrl()
        event.Skip()

    def OnCartActivated( self, event ): # wxGlade: MyFrame.<event_handler>
        SelRow = event.m_itemIndex

        if self.m_CartListCtrl.GetItemData ( SelRow ) == 0: # Real Delete
            Res = wx.MessageBox( 'Are you Sure you want to Delete Real Files?', 'Confirmation', wx.YES_NO| wx.ICON_QUESTION )
            if Res == wx.YES: 
                os.unlink ( os.path.join ( MyConfig.CartDrive, self.m_CartListCache[SelRow][0] ) )
                self.m_CartListTotalSize -= self.m_CartListCache[SelRow][1]
                self.m_CartListTotalNum -= 1
                self.m_CartListCtrl.DeleteItem( SelRow )
                del self.m_CartListCache[SelRow]
        else:
            self.m_CartListTotalSize -= self.m_CartListCache[SelRow][1]
            self.m_CartListTotalNum -= 1
            self.m_CartListCtrl.DeleteItem( SelRow )
            del self.m_CartListCache[SelRow]

        self.UpdateCartCtrl()
        event.Skip()

    def OnCartRightClick( self, event ): # wxGlade: MyFrame.<event_handler>
        if not hasattr( self, "popupCartList1" ):
            self.popupCartList1 = wx.NewId()
            self.Bind( wx.EVT_MENU, self.OnCartDeleteItem, id=self.popupCartList1 )
        menu = wx.Menu()
        item = wx.MenuItem( menu, self.popupCartList1, "Delete" )
        menu.AppendItem( item )
        self.PopupMenu( menu )
        menu.Destroy()
        event.Skip()
        
#    def OnCartDirChanged ( self, event ):
#        MyConfig.CartDrive = self.m_CartDirPicker.GetValue()
#        try:
#            self.m_CartFree = DiskSpace.DriveFree( MyConfig.CartDrive )
#            self.m_CartSize = DiskSpace.DriveSize( MyConfig.CartDrive )
#            self.m_CartDirPicker.GetValue( MyConfig.CartDrive )
#            self.m_CartListCtrl.Enable()
#            if MyConfig.SaveDir != "":
#                self.m_MainFrame_menubar.FindItemById( ID_AUTOBACKUPSAVES ).Enable( True )
#                self.m_MainFrame_menubar.FindItemById( ID_BACKUPSAVES ).Enable( True )
#            else:
#                self.m_MainFrame_menubar.FindItemById( ID_AUTOBACKUPSAVES ).Enable( False )
#                self.m_MainFrame_menubar.FindItemById( ID_BACKUPSAVES ).Enable( False )
#            self.PopulateCartList()
#            self.ResizeColumns()
#        except:
#            self.m_CartFree = 0
#            self.m_CartSize = 0
#            self.m_CartListCtrl.Disable()
#            self.m_MainFrame_menubar.FindItemById( ID_AUTOBACKUPSAVES ).Enable( False )
#            self.m_MainFrame_menubar.FindItemById( ID_BACKUPSAVES ).Enable( False )
#        event.Skip()

    def OnROMCopy( self, event ):
        SelRow = self.m_RomListCtrl.GetFirstSelected()
        Skip = 0
        while SelRow != -1 and Skip != 2:
            ( Skip, CartRow ) = self.ROMCopy ( SelRow )
            self.m_CartListCtrl.EnsureVisible( CartRow )
            SelRow = self.m_RomListCtrl.GetNextSelected( SelRow )
        self.UpdateCartCtrl()

    def OnCartDeleteItem( self, event ):
        Selected = []
        index = self.m_CartListCtrl.GetFirstSelected()
        while index != -1:
            Selected.append ( index )
            index = self.m_CartListCtrl.GetNextSelected( index )
        Selected = sorted ( Selected, reverse=1 )
        
        FirstRemoved = True
        DoDelete = False
        for SelRow in Selected:
#            Row = self.m_ROMCache [self.m_ROMDict[self.m_CartListCache [SelRow][2]]]
            if self.m_CartListCtrl.GetItemData ( SelRow ) == 0: # Real Delete
                if FirstRemoved:
                    FirstRemoved = False
                    Res = wx.MessageBox( 'Are you Sure you want to Delete Real Files?', 'Confirmation', wx.YES_NO| wx.ICON_QUESTION )
                    if Res == wx.YES: 
                        DoDelete = True
                if DoDelete:
                    os.unlink ( os.path.join ( MyConfig.CartDrive, self.m_CartListCache[SelRow][0] ) )
                    try:
                        os.unlink ( os.path.join ( MyConfig.CartDrive, os.path.splitext ( self.m_CartListCache[SelRow][0] )[0]+".sav" ) )
                    except:
                        pass
                    self.m_CartListTotalSize -= self.m_CartListCache[SelRow][1]
                    self.m_CartListTotalNum -= 1
                    self.m_CartListCtrl.DeleteItem( SelRow )
                    del self.m_CartListCache[SelRow]
            else:
                self.m_CartListTotalSize -= self.m_CartListCache[SelRow][1]
                self.m_CartListTotalNum -= 1
                self.m_CartListCtrl.DeleteItem( SelRow )
                del self.m_CartListCache[SelRow]
        self.UpdateCartCtrl()
        
    def On_BackupSaves( self, event ): # wxGlade: MyFrame.<event_handler>
        self.BackupSaves()
        wx.MessageBox( 'Saved', 'Backup Saves', wx.OK| wx.ICON_INFORMATION )
        
        event.Skip()

    def On_AutoBackupSaves( self, event ): # wxGlade: MyFrame.<event_handler>
        if self.m_MainFrame_menubar.FindItemById( ID_AUTOBACKUPSAVES ).IsChecked():
            MyConfig.AutoBackupSaves = 1
        else:
            MyConfig.AutoBackupSaves = 0
        event.Skip()

    def On_AutoRestoreSaves( self, event ): # wxGlade: MyFrame.<event_handler>
        if self.m_MainFrame_menubar.FindItemById( ID_AUTORESTORESAVES ).IsChecked():
            MyConfig.AutoRestoreSaves = 1
        else:
            MyConfig.AutoRestoreSaves = 0
        event.Skip()

    def OnCheckNewFilesOnStartup( self, event ): # wxGlade: MyFrame.<event_handler>
        if self.m_MainFrame_menubar.FindItemById( ID_CHECKNEWFILESSTARTUP ).IsChecked():
            MyConfig.CheckNewFilesOnStartup = 1
        else:
            MyConfig.CheckNewFilesOnStartup = 0
        event.Skip()

    def OnCheckNewFiles( self, event ): # wxGlade: MyFrame.<event_handler>
        res = UpdateDB( self, MyConfig.ROMPaths, self.m_Con, MyConfig.AllExtensions )
        self.m_RomListCtrl.Enable()
        self.LoadROMCache()
        self.PopulateROMList()
        self.PopulateCartList()
        if res == 0:
            wx.MessageBox ( 'No new files have been found.', 'Update', wx.OK | wx.ICON_INFORMATION )
        else:
            wx.MessageBox( 'New files have been added.', 'Update', wx.OK | wx.ICON_INFORMATION )

        self.ResizeColumns()
        event.Skip()
        
    def On_SaveGameMgr( self, event ): # wxGlade: MyFrame.<event_handler>
        dlg = MySaveGameDlg.MySaveGameDlg ( self )
        dlg.ShowModal()
        dlg.Destroy()
        self.CountSaves()
        self.PopulateROMList()
        event.Skip()

    def OnRomColResized( self, event ): # wxGlade: MyFrame.<event_handler>
        if sys.version_info[0] == 2 and sys.version_info[1] >= 5:
            ColNum  = event.Column
        else:
            ColNum = event.m_col
        ColName = MyConfig.ColumnsToDisplay[ColNum]
#TODO: Fixme
        if sys.platform == "win32":
            if sys.version_info[0] == 2 and sys.version_info[1] >= 5:
                ColSize = event.m_item.Width
            else:
                ColSize = event.m_item.m_width
        else:
            if sys.version_info[0] == 2 and sys.version_info[1] >= 5:
                ColSize = event.m_item.Width
            else:
                ColSize = self.m_RomListCtrl.GetColumnWidth ( ColNum )

        MyConfig.ColumnSizes [ ColName ] = ColSize
        self.m_CartListCtrl.SetColumnWidth( ColNum, ColSize )
        event.Skip()

    def OnCartColResized( self, event ): # wxGlade: MyFrame.<event_handler>
        if sys.version_info[0] == 2 and sys.version_info[1] >= 5:
            ColNum = event.Column
        else:
            ColNum = event.m_col
        ColName = MyConfig.ColumnsToDisplay[ColNum]
#TODO: Fixme
        if sys.platform == "win32":
            if sys.version_info[0] == 2 and sys.version_info[1] >= 5:
                ColSize = event.m_item.Width
            else:
                ColSize = event.m_item.m_width
        else:
            if sys.version_info[0] == 2 and sys.version_info[1] >= 5:
                ColSize = event.m_item.Width
            else:
                ColSize = self.m_CartListCtrl.GetColumnWidth ( ColNum )

        MyConfig.ColumnSizes [ ColName ] = ColSize
        self.m_RomListCtrl.SetColumnWidth( ColNum, ColSize )
        event.Skip()
        
    def dbbCallback( self, event ):
        self.TmpDir = event.GetString()
        if self.TmpDir == "" or self.InInit == True:
            pass
        elif os.path.isdir( os.path.abspath( self.TmpDir ) ):
            MyConfig.CartDrive = self.TmpDir
            try:
                self.m_CartFree = DiskSpace.DriveFree( MyConfig.CartDrive )
                self.m_CartSize = DiskSpace.DriveSize( MyConfig.CartDrive )
#                self.m_CartDirPicker.SetPath( MyConfig.CartDrive )
                self.m_CartListCtrl.Enable()
                if MyConfig.SaveDir != "":
                    self.m_MainFrame_menubar.FindItemById( ID_AUTOBACKUPSAVES ).Enable( True )
                    self.m_MainFrame_menubar.FindItemById( ID_BACKUPSAVES ).Enable( True )
                else:
                    self.m_MainFrame_menubar.FindItemById( ID_AUTOBACKUPSAVES ).Enable( False )
                    self.m_MainFrame_menubar.FindItemById( ID_BACKUPSAVES ).Enable( False )
                self.PopulateCartList()
                self.ResizeColumns()
            except:
                self.m_CartFree = 0
                self.m_CartSize = 0
                self.m_CartListCtrl.Disable()
                self.m_MainFrame_menubar.FindItemById( ID_AUTOBACKUPSAVES ).Enable( False )
                self.m_MainFrame_menubar.FindItemById( ID_BACKUPSAVES ).Enable( False )
        event.Skip()

    def OnSizeCtrl( self, event ): # wxGlade: MyFrame.<event_handler>
        if not self.InInit:
            if event.GetString() != MyConfig.CurrentSize:
                MyConfig.CurrentSize = event.GetString()
                if MyConfig.CurrentSize == "Any Size":
                    self.m_Size = 0
                else:
                    self.m_Size = int ( MyConfig.CurrentSize[2:-2] ) * 1024 * 1024
                self.PopulateROMList ()
        event.Skip()

    def On_Sync( self, event ): # wxGlade: MyFrame.<event_handler>
        self.m_Web.Sync( self )
        self.LoadROMCache()

        self.CountSaves()
        
        self.PopulateROMList()
        self.PopulateCartList()
        
        event.Skip()

    def ClearSelection ( self, Ctrl ):
        SelRow = Ctrl.GetFirstSelected()
        while SelRow != -1:
            Ctrl.SetItemState( SelRow, 0, wx.LIST_STATE_SELECTED )
            SelRow = self.m_RomListCtrl.GetNextSelected( SelRow )
        
    def On_SyncAll( self, event ): # wxGlade: MyFrame.<event_handler>
        self.ClearSelection( self.m_RomListCtrl )
        self.m_RomListCtrl.SetItemState ( 0, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED )
        Items = self.m_RomListCtrl.GetItemCount()
        for Count in range ( 0, Items ):
            if Count > 0:
                self.m_RomListCtrl.SetItemState ( Count-1, 0, wx.LIST_STATE_SELECTED )
            self.m_RomListCtrl.SetItemState ( Count, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED )
            self.m_RomListCtrl.EnsureVisible ( Count )
            wx.Yield()
            Row = self.m_ROMCache [self.m_ROMDict[self.m_ROMListCache [Count][2]]]
            if Row.m_PocketHeavenGenre == None:
                self.ROMGetSingleGenre( Count )
            wx.Yield()
        event.Skip()

    def OnROMGetGenre( self, event ):
        SelRow = self.m_RomListCtrl.GetFirstSelected()
        Skip = 0
        while SelRow != -1 and Skip != 2:
            Skip = self.ROMGetSingleGenre ( SelRow )
            SelRow = self.m_RomListCtrl.GetNextSelected( SelRow )
        self.UpdateROMCtrl()
        event.Skip()
    
    def ROMGetSingleGenre ( self, SelRow ):
        Row = self.m_ROMCache [self.m_ROMDict[self.m_ROMListCache [SelRow][2]]]
        if Row.m_PocketHeavenNum != -1:
            Genre = self.m_Web.GetGenre( Row.m_ReleaseNumber, Row.m_PocketHeavenNum )
            if Genre != "NA":
                try:
                    c = self.m_Con.cursor ()
                    c.execute ( 'update Genre set PocketHeavenGenre="'+Genre+'" where ReleaseNum='+str( Row.m_ReleaseNumber ) )
                    Lines = c.execute ( 'select Genre from Genre where ReleaseNum='+str( Row.m_ReleaseNumber ) )
                    CustomGenre = Lines.fetchone()[0]
                    if CustomGenre == "Unknown":
                        c.execute ( 'update Genre set Genre="'+Genre+'" where ReleaseNum='+str( Row.m_ReleaseNumber ) )
                    c.close()
                    self.m_Con.commit()
                except:
                    pass
            Row.m_Genre = Genre
            Row.m_PocketHeavenGenre = Genre
            self.m_ROMCache [self.m_ROMDict[self.m_ROMListCache [SelRow][2]]] = Row
            try:
                ColNum = MyConfig.ColumnsToDisplay.index ( 'Genre' )
            except:
                return
            self.m_RomListCtrl.SetStringItem( SelRow, ColNum, Genre )
            wx.Yield()
            
    def OnROMEditGenre ( self, event ):
        MyConfig.EditGenreOK = False
        SelRow = self.m_RomListCtrl.GetFirstSelected()
        Row = self.m_ROMCache [self.m_ROMDict[self.m_ROMListCache [SelRow][2]]]

        MyConfig.EditGenreText = Row.m_InternalZipName
        MyConfig.CurrentGenre = Row.m_Genre
        dlg = MyEditGenreDialog.MyEditGenreDialog ( self )
        dlg.ShowModal()
        dlg.Destroy()
        if MyConfig.EditGenreOK:
            try:
                c = self.m_Con.cursor ()
                c.execute ( 'update Genre set Genre="'+MyConfig.CurrentGenre+'" where ReleaseNum='+str( Row.m_ReleaseNumber ) )
                c.close()
                self.m_Con.commit()
            except:
                pass
            Row.m_Genre = MyConfig.CurrentGenre
            self.m_ROMCache [self.m_ROMDict[self.m_ROMListCache [SelRow][2]]] = Row
            try:
                ColNum = MyConfig.ColumnsToDisplay.index ( 'Genre' )
            except:
                return
            self.m_RomListCtrl.SetStringItem( SelRow, ColNum, MyConfig.CurrentGenre )
            wx.Yield()            
        
        event.Skip()
        
    def OnGenreCtrl( self, event ): # wxGlade: MyFrame.<event_handler>
        if not self.InInit:
            if event.GetString() != MyConfig.Genre:
                MyConfig.Genre = event.GetString()
                self.PopulateROMList ()
        event.Skip()

    def On_Analyze(self, event): # wxGlade: MyFrame.<event_handler>
#RMJ
        Count = 0
        SelRow = self.m_RomListCtrl.GetFirstSelected()
        while SelRow != -1:
            Count += 1
            SelRow = self.m_RomListCtrl.GetNextSelected( SelRow )
            wx.Yield()
        SelRow = self.m_RomListCtrl.GetFirstSelected()
        Skip = 0
        dlg = wx.ProgressDialog("Analysing",
                               "Processing Files",
                               maximum = Count+1,
                               parent=self,
                               style = wx.PD_CAN_ABORT
                                | wx.PD_APP_MODAL
                                | wx.PD_ELAPSED_TIME
                                #| wx.PD_ESTIMATED_TIME
                                | wx.PD_REMAINING_TIME
                                )
        keepGoing = True
        num = 0
        MyConfig.BadZips = []
        while SelRow != -1 and Skip != 2 and keepGoing:
            self.Trim ( SelRow )
            SelRow = self.m_RomListCtrl.GetNextSelected( SelRow )
            num += 1
            wx.Yield()
            (keepGoing, skip) = dlg.Update(num)
        
        dlg.Destroy()
        self.UpdateROMCtrl()
        if MyConfig.BadZips != []:
            dlg = MyBadZipDialog.MyBadZipDialog ( self )
            dlg.ShowModal()
            dlg.Destroy()
        event.Skip()
        
    def Trim (self, SelRow):
        Row = self.m_ROMCache [self.m_ROMDict[self.m_ROMListCache [SelRow][2]]]

        if os.path.splitext( Row.m_FileName )[1].lower() == '.zip':
            File=zipfile2.ZipFile ( os.path.join ( Row.m_DirectoryName, Row.m_FileName ) , "r" )
            Size = Row.m_Size
            try:
                Data = File.read ( Row.m_InternalZipName )
            except:
                MyConfig.BadZips.append (Row.m_FileName)
                return
            First = True
            Count = Size
            while Count > 0:
                Count -= 1
                if First:
                    TrimChar = Data[Count]
                    First = False
                if Data [Count] != TrimChar:
                    EndFound = Count + 1
                    break
        else:
            Filename = os.path.join ( Row.m_DirectoryName, Row.m_FileName )
            InFile = open (Filename, "rb")
            Stat = os.stat( Filename )
            Size = Stat[ST_SIZE]

            ToRead = 64 * 1024
            Position = Size - ToRead
            First = True
            EndFound = False

            while EndFound == False:
                InFile.seek( Position, 0 )
                Data = array.array ( 'B' )
                Data.fromfile ( InFile, ToRead )
                if First:
                    First = False
                    TrimChar = Data[ToRead-1]
                for Count in range (ToRead-1,-1,-1):
                    if Data [Count] != TrimChar:
                        EndFound = Position + Count + 1
                        break
                if EndFound == False:
                    Position = Position - ToRead
        
        TrimSize = EndFound
        try:
            c = self.m_Con.cursor ()
            c.execute ( 'update Files set TrimSize='+str(TrimSize)+' where ReleaseNumber='+str( Row.m_ReleaseNumber ) )
            c.close()
            self.m_Con.commit()
        except:
            pass
        Row.m_TrimSize = TrimSize
        self.m_ROMCache [self.m_ROMDict[self.m_ROMListCache [SelRow][2]]] = Row
        try:
            ColNum = MyConfig.ColumnsToDisplay.index ( 'Trimmed Size' )
        except:
            return
        self.m_RomListCtrl.SetStringItem( SelRow, ColNum, self.FormatSize(TrimSize) )
        wx.Yield()            

    def FormatSize ( self, Number ):
        if MyConfig.ShowROMSizeIn == "MegaBits":
            return str( (Number/1024/1024)*8 )+" Mbit" 
        elif MyConfig.ShowROMSizeIn == "MegaBytes":
            return str( Number/1024/1024 )+" Mb" 
        elif MyConfig.ShowROMSizeIn == "KiloBits":
            return str( (Number/1024)*8 )+" Kbit" 
        elif MyConfig.ShowROMSizeIn == "KileBytes":
            return str( (Number/1024) )+" Kb"
        elif MyConfig.ShowROMSizeIn == "Bytes":
            return str( Number )+" B" 

#    def OnChar(self, event): # wxGlade: MyFrame.<event_handler>
#        keycode = event.GetKeyCode()
#        print event.ControlDown()
#        print keycode
#        event.Skip()

    def On_CopyTrim(self, event): # wxGlade: MyFrame.<event_handler>
        if self.m_MainFrame_menubar.FindItemById( ID_COPYTRIM ).IsChecked():
            MyConfig.CopyTrim = 1
        else:
            MyConfig.CopyTrim = 0
        
        event.Skip()

 # end of class MyFrame