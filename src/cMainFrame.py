# generated by wxGlade 0.6.1 on Fri Nov 02 11:07:38 2007

import wx #@UnusedImport
import os
import sys
import types
import shelve
import shutil
import wx.html #@Reimport
import wx.lib.filebrowsebutton as filebrowse

import anydbm #@UnusedImport
import dbhash #@UnusedImport

from ROMS import MyROMS
from ROMS import ROM as BlankROM
import GFX
import Config
import Utils
from cROMListCtrl import cROMListCtrl
from cDeviceListCtrl import cDeviceListCtrl
from cLogDialog import cLogDialog
from cAboutDialog import cAboutDialog
from cDropTarget import cDropTarget
from cROMInformation import cROMInformation
from cNFODialog import cNFODialog
from cStatisticsDialog import cStatisticsDialog
from cProgressFrame import cProgressFrame
from cTagDialog import cTagDialog
from cOptions import cOptions
from cSaveGameManager import cSaveGameManager
from cSaveGameComments import cSaveGameComments
from cSaveGameConvert import cSaveGameConvert
import cWizard

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode

# end wxGlade

STATUS_ROM    = 1
STATUS_DEVICE = 2
STATUS_FILTER = 4
STATUS_ALL    = 7

HIDDEN_ITEMS = 19

# Various Toolbar Id's
ID_TOGGLE_INFO   = wx.NewId()
ID_BROWSE_DEVICE = wx.NewId()
ID_TAG_ADD       = wx.NewId()
ID_TAG_REMOVE    = wx.NewId()
ID_TAG_RENAME    = wx.NewId()
ID_TAG_DELETE    = wx.NewId()

class cMainFrame( wx.Frame ):
    def __init__( self, *args, **kwds ):
        self.DummyFrame = kwds["DummyFrame"]
        del kwds["DummyFrame"]
        self.In_Init = True
        # begin wxGlade: cMainFrame.__init__
        kwds["style"] = wx.CAPTION|wx.CLOSE_BOX|wx.MINIMIZE_BOX|wx.MAXIMIZE_BOX|wx.SYSTEM_MENU|wx.RESIZE_BORDER|wx.TAB_TRAVERSAL|wx.CLIP_CHILDREN
        wx.Frame.__init__(self, *args, **kwds)
        self.MainFrame_Panel = wx.Panel(self, -1)
        self.MainFrame_Splitter = wx.SplitterWindow(self.MainFrame_Panel, -1, style=wx.SP_LIVE_UPDATE)
        self.Split_Panel2 = wx.Panel(self.MainFrame_Splitter, -1, style=wx.TAB_TRAVERSAL|wx.CLIP_CHILDREN)
        self.Split_Panel1 = wx.Panel(self.MainFrame_Splitter, -1)
        self.ROM_Information_Sizer_staticbox = wx.StaticBox(self.Split_Panel2, -1, _(" ROM Information "))
        self.Device_Sizer_staticbox = wx.StaticBox(self.Split_Panel2, -1, _(" Linker Device "))
        self.ROMList_Sizer_staticbox = wx.StaticBox(self.Split_Panel1, -1, _(" ROM List "))
        
        # Menu Bar
        self.MenuBar = wx.MenuBar()
        global ID_MENU_COPY; ID_MENU_COPY = wx.NewId()
        global ID_MENU_DELETE; ID_MENU_DELETE = wx.NewId()
        global ID_MENU_APPLY; ID_MENU_APPLY = wx.NewId()
        global ID_MENU_AUTO_BACKUP_SAVES; ID_MENU_AUTO_BACKUP_SAVES = wx.NewId()
        global ID_MENU_COPY_SAVES_WITH_ROM; ID_MENU_COPY_SAVES_WITH_ROM = wx.NewId()
        global ID_MENU_WIZARD; ID_MENU_WIZARD = wx.NewId()
        global ID_MENU_OPTIONS; ID_MENU_OPTIONS = wx.NewId()
        global ID_MENU_QUIT; ID_MENU_QUIT = wx.NewId()
        global ID_MENU_ROM_INFORMATION; ID_MENU_ROM_INFORMATION = wx.NewId()
        global ID_MENU_VIEW_NFO_FILE; ID_MENU_VIEW_NFO_FILE = wx.NewId()
        global ID_MENU_TRIM_FILES; ID_MENU_TRIM_FILES = wx.NewId()
        global ID_MENU_UNTRIM_FILES; ID_MENU_UNTRIM_FILES = wx.NewId()
        global ID_MENU_BACKUP_ALL_SAVE_GAMES; ID_MENU_BACKUP_ALL_SAVE_GAMES = wx.NewId()
        global ID_MENU_BACKUP_SAVE_GAME; ID_MENU_BACKUP_SAVE_GAME = wx.NewId()
        global ID_MENU_IMPORT_SAVE_GAME; ID_MENU_IMPORT_SAVE_GAME = wx.NewId()
        global ID_MENU_SAVE_GAME_MANAGER_SELECTED; ID_MENU_SAVE_GAME_MANAGER_SELECTED = wx.NewId()
        global ID_MENU_SAVE_GAME_MANAGER; ID_MENU_SAVE_GAME_MANAGER = wx.NewId()
        global ID_MENU_VIEW_STATISTICS; ID_MENU_VIEW_STATISTICS = wx.NewId()
        global ID_MENU_UPDATE_EVERYTHING; ID_MENU_UPDATE_EVERYTHING = wx.NewId()
        global ID_MENU_UPDATE_MASTER_LIST; ID_MENU_UPDATE_MASTER_LIST = wx.NewId()
        global ID_MENU_UPDATE_ROMS; ID_MENU_UPDATE_ROMS = wx.NewId()
        global ID_MENU_UPDATE_GFX; ID_MENU_UPDATE_GFX = wx.NewId()
        global ID_MENU_RECOVER_TRIM; ID_MENU_RECOVER_TRIM = wx.NewId()
        global ID_MENU_RECOVER_TAGS; ID_MENU_RECOVER_TAGS = wx.NewId()
        global ID_MENU_SHOW_TOOLBAR; ID_MENU_SHOW_TOOLBAR = wx.NewId()
        global ID_MENU_TOOLBAR_SIZE_SMALL; ID_MENU_TOOLBAR_SIZE_SMALL = wx.NewId()
        global ID_MENU_TOOLBAR_SIZE_MEDIUM; ID_MENU_TOOLBAR_SIZE_MEDIUM = wx.NewId()
        global ID_MENU_TOOLBAR_SIZE_LARGE; ID_MENU_TOOLBAR_SIZE_LARGE = wx.NewId()
        global ID_MENU_SHOW_DEVICE_LIST; ID_MENU_SHOW_DEVICE_LIST = wx.NewId()
        global ID_MENU_SHOW_SEARCH; ID_MENU_SHOW_SEARCH = wx.NewId()
        global ID_MENU_SHOW_FILTER; ID_MENU_SHOW_FILTER = wx.NewId()
        global ID_MENU_SHOW_ALTERNATING_COLOURS; ID_MENU_SHOW_ALTERNATING_COLOURS = wx.NewId()
        global ID_MENU_SMALL_PICTURES; ID_MENU_SMALL_PICTURES = wx.NewId()
        global ID_MENU_SHOW_XXXX; ID_MENU_SHOW_XXXX = wx.NewId()
        global ID_MENU_SHOW_UNKNOWN; ID_MENU_SHOW_UNKNOWN = wx.NewId()
        global ID_MENU_SHOW_ALL; ID_MENU_SHOW_ALL = wx.NewId()
        global ID_MENU_HIDE_ALL; ID_MENU_HIDE_ALL = wx.NewId()
        global ID_MENU_HIDE_SCREENSHOTS; ID_MENU_HIDE_SCREENSHOTS = wx.NewId()
        global ID_MENU_HIDE_CASE_PICTURES; ID_MENU_HIDE_CASE_PICTURES = wx.NewId()
        global ID_MENU_HIDE_ICON; ID_MENU_HIDE_ICON = wx.NewId()
        global ID_MENU_HIDE_RELEASENUMBER; ID_MENU_HIDE_RELEASENUMBER = wx.NewId()
        global ID_MENU_HIDE_TITLE; ID_MENU_HIDE_TITLE = wx.NewId()
        global ID_MENU_HIDE_LOCATION; ID_MENU_HIDE_LOCATION = wx.NewId()
        global ID_MENU_HIDE_PUBLISHER; ID_MENU_HIDE_PUBLISHER = wx.NewId()
        global ID_MENU_HIDE_RELEASE_GROUP; ID_MENU_HIDE_RELEASE_GROUP = wx.NewId()
        global ID_MENU_HIDE_GENRE; ID_MENU_HIDE_GENRE = wx.NewId()
        global ID_MENU_HIDE_INTERNAL_NAME; ID_MENU_HIDE_INTERNAL_NAME = wx.NewId()
        global ID_MENU_HIDE_SERIAL; ID_MENU_HIDE_SERIAL = wx.NewId()
        global ID_MENU_HIDE_VERSION; ID_MENU_HIDE_VERSION = wx.NewId()
        global ID_MENU_HIDE_CRC; ID_MENU_HIDE_CRC = wx.NewId()
        global ID_MENU_HIDE_SIZE; ID_MENU_HIDE_SIZE = wx.NewId()
        global ID_MENU_HIDE_WIFI; ID_MENU_HIDE_WIFI = wx.NewId()
        global ID_MENU_HIDE_SAVE_GAME_TYPE; ID_MENU_HIDE_SAVE_GAME_TYPE = wx.NewId()
        global ID_MENU_HIDE_BACKUP_SAVE_GAMES; ID_MENU_HIDE_BACKUP_SAVE_GAMES = wx.NewId()
        global ID_MENU_HIDE_LANGUAGE; ID_MENU_HIDE_LANGUAGE = wx.NewId()
        global ID_MENU_HIDE_TAGS; ID_MENU_HIDE_TAGS = wx.NewId()
        global ID_MENU_HELP; ID_MENU_HELP = wx.NewId()
        global ID_MENU_ABOUT; ID_MENU_ABOUT = wx.NewId()
        wxglade_tmp_menu = wx.Menu()
        self.Copy_to_Device = wx.MenuItem(wxglade_tmp_menu, ID_MENU_COPY, _("Add ROMs to Device"), _("Add Selected ROMs to Device"), wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.Copy_to_Device)
        self.Delete_from_Device = wx.MenuItem(wxglade_tmp_menu, ID_MENU_DELETE, _("Delete ROMs from Device"), _("Delete Selected ROMs from Device"), wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.Delete_from_Device)
        self.Apply_Changes = wx.MenuItem(wxglade_tmp_menu, ID_MENU_APPLY, _("Apply Changes to Device"), _("Apply Changes to Device"), wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.Apply_Changes)
        wxglade_tmp_menu.AppendSeparator()
        self.Auto_Backup_Saved_Games = wx.MenuItem(wxglade_tmp_menu, ID_MENU_AUTO_BACKUP_SAVES, _("Auto Backup Save Games"), _("Auto Backup Save Games"), wx.ITEM_CHECK)
        wxglade_tmp_menu.AppendItem(self.Auto_Backup_Saved_Games)
        self.Copy_Saves_with_ROM = wx.MenuItem(wxglade_tmp_menu, ID_MENU_COPY_SAVES_WITH_ROM, _("Auto Copy Latest Save Game"), _("Auto Copy Latest Save Game"), wx.ITEM_CHECK)
        wxglade_tmp_menu.AppendItem(self.Copy_Saves_with_ROM)
        wxglade_tmp_menu.AppendSeparator()
        self.Run_Startup_Wizard = wx.MenuItem(wxglade_tmp_menu, ID_MENU_WIZARD, _("Run Setup Wizard"), _("Run Setup Wizard"), wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.Run_Startup_Wizard)
        wxglade_tmp_menu.AppendSeparator()
        wxglade_tmp_menu.Append(ID_MENU_OPTIONS, _("Options"), _("Options"), wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendSeparator()
        wxglade_tmp_menu.Append(ID_MENU_QUIT, _("&Quit\tCtrl+Q"), _("Quit the Application"), wx.ITEM_NORMAL)
        self.MenuBar.Append(wxglade_tmp_menu, _("&File"))
        wxglade_tmp_menu = wx.Menu()
        self.ROM_Information = wx.MenuItem(wxglade_tmp_menu, ID_MENU_ROM_INFORMATION, _("ROM Information"), _("ROM Information"), wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.ROM_Information)
        self.View_NFO_File = wx.MenuItem(wxglade_tmp_menu, ID_MENU_VIEW_NFO_FILE, _("View NFO File"), _("View NFO File"), wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.View_NFO_File)
        self.Trim_Files = wx.MenuItem(wxglade_tmp_menu, ID_MENU_TRIM_FILES, _("Trim ROMs"), _("Trim ROMs"), wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.Trim_Files)
        self.UnTrim_Files = wx.MenuItem(wxglade_tmp_menu, ID_MENU_UNTRIM_FILES, _("UnTrim ROMs"), _("UnTrim ROMs"), wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.UnTrim_Files)
        wxglade_tmp_menu.AppendSeparator()
        self.Backup_All_Changed_Save_Games = wx.MenuItem(wxglade_tmp_menu, ID_MENU_BACKUP_ALL_SAVE_GAMES, _("Backup All Recent Save Games"), _("Backup All Recent Save Games"), wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.Backup_All_Changed_Save_Games)
        self.Backup_Save_Game = wx.MenuItem(wxglade_tmp_menu, ID_MENU_BACKUP_SAVE_GAME, _("Backup Selected Save Games"), _("Backup Selected Save Games"), wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.Backup_Save_Game)
        self.Import_Save_Game = wx.MenuItem(wxglade_tmp_menu, ID_MENU_IMPORT_SAVE_GAME, _("Import Save Game"), _("Import Save Game"), wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.Import_Save_Game)
        self.Save_Games_for_Selected_File = wx.MenuItem(wxglade_tmp_menu, ID_MENU_SAVE_GAME_MANAGER_SELECTED, _("Save Games for Selected File"), _("Save Games for Selected File"), wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.Save_Games_for_Selected_File)
        self.Save_Game_Manager = wx.MenuItem(wxglade_tmp_menu, ID_MENU_SAVE_GAME_MANAGER, _("Save Game Manager"), _("Save Game Manager"), wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.Save_Game_Manager)
        wxglade_tmp_menu.AppendSeparator()
        self.View_Statistics = wx.MenuItem(wxglade_tmp_menu, ID_MENU_VIEW_STATISTICS, _("View Statistics"), _("View Statistics"), wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.View_Statistics)
        self.MenuBar.Append(wxglade_tmp_menu, _("Actions"))
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(ID_MENU_UPDATE_EVERYTHING, _("Update Everything"), _("Update Everything"), wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendSeparator()
        wxglade_tmp_menu.Append(ID_MENU_UPDATE_MASTER_LIST, _("Update &Database"), _("Update Master List from Advanscene"), wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(ID_MENU_UPDATE_ROMS, _("Find &New ROMs"), _("Find New ROMs"), wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(ID_MENU_UPDATE_GFX, _("Update Image/NFO Database"), _("Update / Check Graphics"), wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendSeparator()
        wxglade_tmp_menu.Append(ID_MENU_RECOVER_TRIM, _("Recover Trimmed Sizes"), _("Recover Trimmed Sizes"), wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(ID_MENU_RECOVER_TAGS, _("Recover Tags"), _("Recover Tags"), wx.ITEM_NORMAL)
        self.MenuBar.Append(wxglade_tmp_menu, _("&Update"))
        wxglade_tmp_menu = wx.Menu()
        self.Show_Toolbar = wx.MenuItem(wxglade_tmp_menu, ID_MENU_SHOW_TOOLBAR, _("Show Toolbar"), _("Show Toolbar"), wx.ITEM_CHECK)
        wxglade_tmp_menu.AppendItem(self.Show_Toolbar)
        wxglade_tmp_menu_sub = wx.Menu()
        self.Toolbar_Small = wx.MenuItem(wxglade_tmp_menu_sub, ID_MENU_TOOLBAR_SIZE_SMALL, _("Small"), _("Small Toolbar"), wx.ITEM_RADIO)
        wxglade_tmp_menu_sub.AppendItem(self.Toolbar_Small)
        self.Toolbar_Medium = wx.MenuItem(wxglade_tmp_menu_sub, ID_MENU_TOOLBAR_SIZE_MEDIUM, _("Medium"), _("Medium Toolbar"), wx.ITEM_RADIO)
        wxglade_tmp_menu_sub.AppendItem(self.Toolbar_Medium)
        self.Toolbar_Large = wx.MenuItem(wxglade_tmp_menu_sub, ID_MENU_TOOLBAR_SIZE_LARGE, _("Large"), _("Large Toolbar"), wx.ITEM_RADIO)
        wxglade_tmp_menu_sub.AppendItem(self.Toolbar_Large)
        wxglade_tmp_menu.AppendMenu(wx.NewId(), _("ToolbarSize"), wxglade_tmp_menu_sub, "")
        wxglade_tmp_menu.AppendSeparator()
        self.Show_Device_List = wx.MenuItem(wxglade_tmp_menu, ID_MENU_SHOW_DEVICE_LIST, _("Show Device List"), _("Show Device List"), wx.ITEM_CHECK)
        wxglade_tmp_menu.AppendItem(self.Show_Device_List)
        self.Show_Search = wx.MenuItem(wxglade_tmp_menu, ID_MENU_SHOW_SEARCH, _("Show Search Panel"), _("Show Search Panel"), wx.ITEM_CHECK)
        wxglade_tmp_menu.AppendItem(self.Show_Search)
        self.Show_Filter = wx.MenuItem(wxglade_tmp_menu, ID_MENU_SHOW_FILTER, _("Show Filter Panel"), _("Show Filter Panel"), wx.ITEM_CHECK)
        wxglade_tmp_menu.AppendItem(self.Show_Filter)
        self.Show_Alternating_Colours = wx.MenuItem(wxglade_tmp_menu, ID_MENU_SHOW_ALTERNATING_COLOURS, _("Show Alternating Colours"), _("Show Alternating Colours"), wx.ITEM_CHECK)
        wxglade_tmp_menu.AppendItem(self.Show_Alternating_Colours)
        wxglade_tmp_menu.AppendSeparator()
        self.Use_Smaller_Pictures = wx.MenuItem(wxglade_tmp_menu, ID_MENU_SMALL_PICTURES, _("Use Smaller Images"), _("Use Smaller Images"), wx.ITEM_CHECK)
        wxglade_tmp_menu.AppendItem(self.Use_Smaller_Pictures)
        wxglade_tmp_menu.AppendSeparator()
        self.Show_XXXX_Files = wx.MenuItem(wxglade_tmp_menu, ID_MENU_SHOW_XXXX, _("Show XXXX ROMs"), _("Show XXXX (Demo) ROMs"), wx.ITEM_CHECK)
        wxglade_tmp_menu.AppendItem(self.Show_XXXX_Files)
        self.Show_Unknown_Files = wx.MenuItem(wxglade_tmp_menu, ID_MENU_SHOW_UNKNOWN, _("Show Unknown ROMs"), _("Show Unknown ROMs"), wx.ITEM_CHECK)
        wxglade_tmp_menu.AppendItem(self.Show_Unknown_Files)
        self.MenuBar.Append(wxglade_tmp_menu, _("&View"))
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(ID_MENU_SHOW_ALL, _("Show All Items"), _("Show All Items"), wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(ID_MENU_HIDE_ALL, _("Hide All Items"), _("Hide All Items"), wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendSeparator()
        self.Hide_Screenshots = wx.MenuItem(wxglade_tmp_menu, ID_MENU_HIDE_SCREENSHOTS, _("Hide Screenshot Image"), _("Hide Screenshot Image"), wx.ITEM_CHECK)
        wxglade_tmp_menu.AppendItem(self.Hide_Screenshots)
        self.Hide_Case_Pictures = wx.MenuItem(wxglade_tmp_menu, ID_MENU_HIDE_CASE_PICTURES, _("Hide Case Image"), _("Hide Case Image"), wx.ITEM_CHECK)
        wxglade_tmp_menu.AppendItem(self.Hide_Case_Pictures)
        self.Hide_Icon = wx.MenuItem(wxglade_tmp_menu, ID_MENU_HIDE_ICON, _("Hide Icon"), _("Hide Icon"), wx.ITEM_CHECK)
        wxglade_tmp_menu.AppendItem(self.Hide_Icon)
        self.Hide_ReleaseNumber = wx.MenuItem(wxglade_tmp_menu, ID_MENU_HIDE_RELEASENUMBER, _("Hide Release Number"), _("Hide Release Number"), wx.ITEM_CHECK)
        wxglade_tmp_menu.AppendItem(self.Hide_ReleaseNumber)
        self.Hide_Title = wx.MenuItem(wxglade_tmp_menu, ID_MENU_HIDE_TITLE, _("Hide Title"), _("Hide Title"), wx.ITEM_CHECK)
        wxglade_tmp_menu.AppendItem(self.Hide_Title)
        self.Hide_Location = wx.MenuItem(wxglade_tmp_menu, ID_MENU_HIDE_LOCATION, _("Hide Region"), _("Hide Region"), wx.ITEM_CHECK)
        wxglade_tmp_menu.AppendItem(self.Hide_Location)
        self.Hide_Publisher = wx.MenuItem(wxglade_tmp_menu, ID_MENU_HIDE_PUBLISHER, _("Hide Publisher"), _("Hide Publisher"), wx.ITEM_CHECK)
        wxglade_tmp_menu.AppendItem(self.Hide_Publisher)
        self.Hide_Release_Group = wx.MenuItem(wxglade_tmp_menu, ID_MENU_HIDE_RELEASE_GROUP, _("Hide Release Group"), _("Hide Release Group"), wx.ITEM_CHECK)
        wxglade_tmp_menu.AppendItem(self.Hide_Release_Group)
        self.Hide_Genre = wx.MenuItem(wxglade_tmp_menu, ID_MENU_HIDE_GENRE, _("Hide Genre"), _("Hide Genre"), wx.ITEM_CHECK)
        wxglade_tmp_menu.AppendItem(self.Hide_Genre)
        self.Hide_Internal_Name = wx.MenuItem(wxglade_tmp_menu, ID_MENU_HIDE_INTERNAL_NAME, _("Hide Internal Name"), _("Hide Internal Name"), wx.ITEM_CHECK)
        wxglade_tmp_menu.AppendItem(self.Hide_Internal_Name)
        self.Hide_Serial = wx.MenuItem(wxglade_tmp_menu, ID_MENU_HIDE_SERIAL, _("Hide Serial"), _("Hide Serial"), wx.ITEM_CHECK)
        wxglade_tmp_menu.AppendItem(self.Hide_Serial)
        self.Hide_Version = wx.MenuItem(wxglade_tmp_menu, ID_MENU_HIDE_VERSION, _("Hide Version/Dumped"), _("Hide Version/Dumped"), wx.ITEM_CHECK)
        wxglade_tmp_menu.AppendItem(self.Hide_Version)
        self.Hide_CRC = wx.MenuItem(wxglade_tmp_menu, ID_MENU_HIDE_CRC, _("Hide CRC"), _("Hide CRC"), wx.ITEM_CHECK)
        wxglade_tmp_menu.AppendItem(self.Hide_CRC)
        self.Hide_Size = wx.MenuItem(wxglade_tmp_menu, ID_MENU_HIDE_SIZE, _("Hide Size/Trimmed"), _("Hide Size/Trimmed"), wx.ITEM_CHECK)
        wxglade_tmp_menu.AppendItem(self.Hide_Size)
        self.Hide_Wifi = wx.MenuItem(wxglade_tmp_menu, ID_MENU_HIDE_WIFI, _("Hide Wi-Fi"), _("Hide Wi-Fi"), wx.ITEM_CHECK)
        wxglade_tmp_menu.AppendItem(self.Hide_Wifi)
        self.Hide_Save_Game_Type = wx.MenuItem(wxglade_tmp_menu, ID_MENU_HIDE_SAVE_GAME_TYPE, _("Hide Save Type"), _("Hide Save Type"), wx.ITEM_CHECK)
        wxglade_tmp_menu.AppendItem(self.Hide_Save_Game_Type)
        self.Hide_Backup_Save_Games = wx.MenuItem(wxglade_tmp_menu, ID_MENU_HIDE_BACKUP_SAVE_GAMES, _("Hide Save Games"), _("Hide Save Games"), wx.ITEM_CHECK)
        wxglade_tmp_menu.AppendItem(self.Hide_Backup_Save_Games)
        self.Hide_Language = wx.MenuItem(wxglade_tmp_menu, ID_MENU_HIDE_LANGUAGE, _("Hide Languages"), _("Hide Languages"), wx.ITEM_CHECK)
        wxglade_tmp_menu.AppendItem(self.Hide_Language)
        self.Hide_Tags = wx.MenuItem(wxglade_tmp_menu, ID_MENU_HIDE_TAGS, _("Hide Tags"), _("Hide Tags"), wx.ITEM_CHECK)
        wxglade_tmp_menu.AppendItem(self.Hide_Tags)
        self.MenuBar.Append(wxglade_tmp_menu, _("&Fields"))
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(ID_MENU_HELP, _("&Help"), _("Help"), wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(ID_MENU_ABOUT, _("&About"), _("About"), wx.ITEM_NORMAL)
        self.MenuBar.Append(wxglade_tmp_menu, _("Help"))
        self.SetMenuBar(self.MenuBar)
        # Menu Bar end
        self.StatusBar = self.CreateStatusBar(3, wx.ST_SIZEGRIP)
        
        # Tool Bar
        self.Toolbar = wx.ToolBar(self, -1)
        self.SetToolBar(self.Toolbar)
        # Tool Bar end
        self.Search_Label = wx.StaticText(self.Split_Panel1, -1, _("Search :"))
        self.Search_TextCtrl = wx.TextCtrl(self.Split_Panel1, -1, "", style=wx.TE_PROCESS_ENTER)
        self.Search_Button = wx.Button(self.Split_Panel1, -1, _("Search"), style=wx.BU_EXACTFIT)
        self.Clear_Button = wx.Button(self.Split_Panel1, -1, _("Clear"), style=wx.BU_EXACTFIT)
        self.Clear_All_Button = wx.Button(self.Split_Panel1, -1, _("Clear All"), style=wx.BU_EXACTFIT)
        self.Filter_Label = wx.StaticText(self.Split_Panel1, -1, _("Filter :"))
        self.ROMList = cROMListCtrl(self.Split_Panel1, -1, style=wx.LC_REPORT|wx.LC_VIRTUAL|wx.SUNKEN_BORDER|wx.WANTS_CHARS)
        self.Case_Bitmap = wx.StaticBitmap(self.Split_Panel2, -1, (GFX.catalog ["GFX_No_Case"].getBitmap()))
        self.ScreenShot_Bitmap = wx.StaticBitmap(self.Split_Panel2, -1, (GFX.catalog ["GFX_No_ScreenShot"].getBitmap()))
        self.ROM_Icon_Label = wx.StaticText(self.Split_Panel2, -1, _("Icon : "))
        self.ROM_Icon = wx.StaticBitmap(self.Split_Panel2, -1, (GFX.catalog ["GFX_No_Icon"].getBitmap()))
        self.ReleaseNumber = wx.StaticText(self.Split_Panel2, -1, _("Rel Num : "))
        self.ROM_Title = wx.StaticText(self.Split_Panel2, -1, _("Title : "))
        self.Location = wx.StaticText(self.Split_Panel2, -1, _("Region : "))
        self.Publisher = wx.StaticText(self.Split_Panel2, -1, _("Publisher : "))
        self.ReleaseGroup = wx.StaticText(self.Split_Panel2, -1, _("Release Group : "))
        self.Genre = wx.StaticText(self.Split_Panel2, -1, _("Genre : "))
        self.Internal_Name = wx.StaticText(self.Split_Panel2, -1, _("Internal Name : "))
        self.Serial = wx.StaticText(self.Split_Panel2, -1, _("Serial : "))
        self.Version = wx.StaticText(self.Split_Panel2, -1, _("Version : "))
        self.ROMCRC = wx.StaticText(self.Split_Panel2, -1, _("CRC : "))
        self.ROMSize = wx.StaticText(self.Split_Panel2, -1, _("Size : "))
        self.Wifi = wx.StaticText(self.Split_Panel2, -1, _("Wi-Fi : "))
        self.SaveType = wx.StaticText(self.Split_Panel2, -1, _("Save Type : "))
        self.SavedGames = wx.StaticText(self.Split_Panel2, -1, _("Save Games : "))
        self.Languages = wx.StaticText(self.Split_Panel2, -1, _("Languages : "))
        self.Tags = wx.StaticText(self.Split_Panel2, -1, _("Tags : "))
        self.Device_Dir_Picker = filebrowse.DirBrowseButton(self.Split_Panel2, -1, changeCallback = self.Device_Dir_Picker_Callback, dialogTitle = _("Select Device Directory") + " : ", startDirectory = Config.Config ["Device_Path"], labelText = _("Device") + " : ")
        self.Device_Refresh_Button = wx.Button(self.Split_Panel2, -1, _("Refresh"), style=wx.BU_EXACTFIT)
        self.Device_Apply_Button = wx.Button(self.Split_Panel2, -1, _("Apply"), style=wx.BU_EXACTFIT)
        self.Device_List = cDeviceListCtrl(self.Split_Panel2, -1, style=wx.LC_REPORT|wx.LC_VIRTUAL|wx.SUNKEN_BORDER|wx.WANTS_CHARS)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_MENU, self.On_Copy_to_Device, self.Copy_to_Device)
        self.Bind(wx.EVT_MENU, self.On_Delete_from_Device, self.Delete_from_Device)
        self.Bind(wx.EVT_MENU, self.On_Apply_Changes, self.Apply_Changes)
        self.Bind(wx.EVT_MENU, self.On_Auto_Backup_Saved_Games, self.Auto_Backup_Saved_Games)
        self.Bind(wx.EVT_MENU, self.On_Copy_Saves_with_ROM, self.Copy_Saves_with_ROM)
        self.Bind(wx.EVT_MENU, self.On_Run_Startup_Wizard, self.Run_Startup_Wizard)
        self.Bind(wx.EVT_MENU, self.On_Options, id=ID_MENU_OPTIONS)
        self.Bind(wx.EVT_MENU, self.On_Menu_Quit, id=ID_MENU_QUIT)
        self.Bind(wx.EVT_MENU, self.On_ROM_Information, self.ROM_Information)
        self.Bind(wx.EVT_MENU, self.On_View_NFO_File, self.View_NFO_File)
        self.Bind(wx.EVT_MENU, self.On_Trim_Files, self.Trim_Files)
        self.Bind(wx.EVT_MENU, self.On_UnTrim_Files, self.UnTrim_Files)
        self.Bind(wx.EVT_MENU, self.On_Backup_All_Saves, self.Backup_All_Changed_Save_Games)
        self.Bind(wx.EVT_MENU, self.On_Backup_Save_Game, self.Backup_Save_Game)
        self.Bind(wx.EVT_MENU, self.On_Import_Save_Game, self.Import_Save_Game)
        self.Bind(wx.EVT_MENU, self.On_Save_Games_for_Selected_File, self.Save_Games_for_Selected_File)
        self.Bind(wx.EVT_MENU, self.On_Save_Game_Manager, self.Save_Game_Manager)
        self.Bind(wx.EVT_MENU, self.On_View_Statistics, self.View_Statistics)
        self.Bind(wx.EVT_MENU, self.On_Update_Everything, id=ID_MENU_UPDATE_EVERYTHING)
        self.Bind(wx.EVT_MENU, self.On_Update_Master_List, id=ID_MENU_UPDATE_MASTER_LIST)
        self.Bind(wx.EVT_MENU, self.On_Find_New_ROMS, id=ID_MENU_UPDATE_ROMS)
        self.Bind(wx.EVT_MENU, self.On_Update_GFX, id=ID_MENU_UPDATE_GFX)
        self.Bind(wx.EVT_MENU, self.On_Recover_Trimmed_Sizes, id=ID_MENU_RECOVER_TRIM)
        self.Bind(wx.EVT_MENU, self.On_Recover_Tags, id=ID_MENU_RECOVER_TAGS)
        self.Bind(wx.EVT_MENU, self.On_Show_Toolbar, self.Show_Toolbar)
        self.Bind(wx.EVT_MENU, self.On_Toolbar_Size, self.Toolbar_Small)
        self.Bind(wx.EVT_MENU, self.On_Toolbar_Size, self.Toolbar_Medium)
        self.Bind(wx.EVT_MENU, self.On_Toolbar_Size, self.Toolbar_Large)
        self.Bind(wx.EVT_MENU, self.On_Show_Device_List, self.Show_Device_List)
        self.Bind(wx.EVT_MENU, self.On_Show_Search, self.Show_Search)
        self.Bind(wx.EVT_MENU, self.On_Show_Filter, self.Show_Filter)
        self.Bind(wx.EVT_MENU, self.On_Show_Alternating_Colours, self.Show_Alternating_Colours)
        self.Bind(wx.EVT_MENU, self.On_Use_Smaller_Pictures, self.Use_Smaller_Pictures)
        self.Bind(wx.EVT_MENU, self.On_Show_XXXX_Files, self.Show_XXXX_Files)
        self.Bind(wx.EVT_MENU, self.On_Show_Unknown_Files, self.Show_Unknown_Files)
        self.Bind(wx.EVT_MENU, self.On_Show_All_Items, id=ID_MENU_SHOW_ALL)
        self.Bind(wx.EVT_MENU, self.On_Hide_All_Items, id=ID_MENU_HIDE_ALL)
        self.Bind(wx.EVT_MENU, self.On_Hide_Item, self.Hide_Screenshots)
        self.Bind(wx.EVT_MENU, self.On_Hide_Item, self.Hide_Case_Pictures)
        self.Bind(wx.EVT_MENU, self.On_Hide_Item, self.Hide_Icon)
        self.Bind(wx.EVT_MENU, self.On_Hide_Item, self.Hide_ReleaseNumber)
        self.Bind(wx.EVT_MENU, self.On_Hide_Item, self.Hide_Title)
        self.Bind(wx.EVT_MENU, self.On_Hide_Item, self.Hide_Location)
        self.Bind(wx.EVT_MENU, self.On_Hide_Item, self.Hide_Publisher)
        self.Bind(wx.EVT_MENU, self.On_Hide_Item, self.Hide_Release_Group)
        self.Bind(wx.EVT_MENU, self.On_Hide_Item, self.Hide_Genre)
        self.Bind(wx.EVT_MENU, self.On_Hide_Item, self.Hide_Internal_Name)
        self.Bind(wx.EVT_MENU, self.On_Hide_Item, self.Hide_Serial)
        self.Bind(wx.EVT_MENU, self.On_Hide_Item, self.Hide_Version)
        self.Bind(wx.EVT_MENU, self.On_Hide_Item, self.Hide_CRC)
        self.Bind(wx.EVT_MENU, self.On_Hide_Item, self.Hide_Size)
        self.Bind(wx.EVT_MENU, self.On_Hide_Item, self.Hide_Wifi)
        self.Bind(wx.EVT_MENU, self.On_Hide_Item, self.Hide_Save_Game_Type)
        self.Bind(wx.EVT_MENU, self.On_Hide_Item, self.Hide_Backup_Save_Games)
        self.Bind(wx.EVT_MENU, self.On_Hide_Item, self.Hide_Language)
        self.Bind(wx.EVT_MENU, self.On_Hide_Item, self.Hide_Tags)
        self.Bind(wx.EVT_MENU, self.On_Help, id=ID_MENU_HELP)
        self.Bind(wx.EVT_MENU, self.On_About, id=ID_MENU_ABOUT)
        self.Bind(wx.EVT_TEXT_ENTER, self.On_Search, self.Search_TextCtrl)
        self.Bind(wx.EVT_TEXT, self.On_Search_Text, self.Search_TextCtrl)
        self.Bind(wx.EVT_BUTTON, self.On_Search, self.Search_Button)
        self.Bind(wx.EVT_BUTTON, self.On_Search_Clear, self.Clear_Button)
        self.Bind(wx.EVT_BUTTON, self.On_Search_Clear_All, self.Clear_All_Button)
        self.Bind(wx.EVT_LIST_BEGIN_DRAG, self.On_ROMList_Begin_Drag, self.ROMList)
        self.Bind(wx.EVT_LIST_ITEM_FOCUSED, self.On_List_Item_Focused, self.ROMList)
        self.Bind(wx.EVT_LIST_COL_CLICK, self.On_List_Col_Click, self.ROMList)
        self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.On_ROM_Information, self.ROMList)
        self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.On_List_Item_Selected, self.ROMList)
        self.Bind(wx.EVT_LIST_COL_END_DRAG, self.On_List_Col_Resize, self.ROMList)
        self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.On_List_Item_Deselected, self.ROMList)
        self.Bind(wx.EVT_LIST_ITEM_RIGHT_CLICK, self.On_ROMList_Right_Click, self.ROMList)
        self.Bind(wx.EVT_BUTTON, self.On_Device_Refresh, self.Device_Refresh_Button)
        self.Bind(wx.EVT_BUTTON, self.On_Device_Apply, self.Device_Apply_Button)
        self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.On_List_Item_Selected, self.Device_List)
        self.Bind(wx.EVT_LIST_ITEM_FOCUSED, self.On_List_Item_Focused, self.Device_List)
        self.Bind(wx.EVT_LIST_COL_CLICK, self.On_Device_List_Col_Click, self.Device_List)
        self.Bind(wx.EVT_LIST_ITEM_ACTIVATED, self.On_ROM_Information, self.Device_List)
        self.Bind(wx.EVT_LIST_COL_END_DRAG, self.On_List_Col_Resize, self.Device_List)
        self.Bind(wx.EVT_LIST_ITEM_DESELECTED, self.On_List_Item_Deselected, self.Device_List)
        self.Bind(wx.EVT_SPLITTER_SASH_POS_CHANGING, self.On_Sash_Changed, self.MainFrame_Splitter)
        self.Bind(wx.EVT_SPLITTER_SASH_POS_CHANGED, self.On_Sash_Changed, self.MainFrame_Splitter)
        self.Bind(wx.EVT_SPLITTER_DCLICK, self.On_Sash_Dbl_Clock, self.MainFrame_Splitter)
        # end wxGlade

        if self.Aborted == False:
            self.Bind( wx.EVT_SIZE, self.On_Window_Size )
            self.Bind( wx.EVT_MOVE, self.On_Window_Move )
            self.Bind( wx.EVT_MAXIMIZE, self.On_Window_Maximize )
            
            self.Bind( wx.EVT_CHOICE, self.On_Location, self.Location_Choice )
            self.Bind( wx.EVT_CHOICE, self.On_Language, self.Language_Choice )
            self.Bind( wx.EVT_CHOICE, self.On_Genre, self.Genre_Choice )
            self.Bind( wx.EVT_CHOICE, self.On_Size, self.Size_Choice )
    
            self.ROMList.Bind    ( wx.EVT_SET_FOCUS, self.On_List_Focus )
            self.Device_List.Bind( wx.EVT_SET_FOCUS, self.On_List_Focus )
            self.ROMList.Bind    ( wx.EVT_CHAR, self.On_List_Key_Down )
            self.Device_List.Bind( wx.EVT_CHAR, self.On_List_Key_Down )
            
            wx.EVT_TOOL ( self, ID_TOGGLE_INFO, self.On_Toggle_Info )
            wx.EVT_TOOL ( self, ID_BROWSE_DEVICE, self.On_Browse_Device )
            wx.EVT_TOOL ( self, ID_TAG_ADD, self.On_Tag_Add )
            wx.EVT_TOOL ( self, ID_TAG_REMOVE, self.On_Tag_Remove )
            wx.EVT_TOOL ( self, ID_TAG_RENAME, self.On_Tag_Rename )
            wx.EVT_TOOL ( self, ID_TAG_DELETE, self.On_Tag_Delete )
            
            self.Bind ( wx.EVT_CLOSE, self.On_Close )
            
            self.Device_List.Bind (wx.EVT_CONTEXT_MENU, self.On_Device_List_Context_Menu)
            self.ROMList.Bind     (wx.EVT_CONTEXT_MENU, self.On_ROMList_Context_Menu)
            
            self.In_Init = False
    
    #        te = wx.KeyEvent()
    #        te.SetUnicodeKey(39)
    #        wx.PostEvent(self.ROMList,te)
    #        self.On_List_Key_Down(te)
    #        wx.PostEvent(self.ROMList,te)
    #        wx.WakeUpIdle()
        
    def __set_properties( self ):
        # begin wxGlade: cMainFrame.__set_properties
        self.SetTitle(_("RToolDS"))
        _icon = wx.EmptyIcon()
        _icon.CopyFromBitmap(GFX.catalog ["GFX_Icon"].getBitmap())
        self.SetIcon(_icon)
        self.SetSize((740, 492))
        self.SetFocus()
        self.StatusBar.SetStatusWidths([-1, -1, -1])
        # statusbar fields
        StatusBar_fields = ["", "", ""]
        for i in range(len(StatusBar_fields)):
            self.StatusBar.SetStatusText(StatusBar_fields[i], i)
        self.Toolbar.Realize()
        self.ROMList.SetFocus()
        # end wxGlade

    def __do_layout( self ):
        self.Freeze()

        if Config.Config ["Use_Smaller_Pictures"] == False:
            self.CaseW = 214
            self.CaseH = 384
            self.SSW = 256
            self.SSH = 384
        else:
            self.CaseW = 214 / 2
            self.CaseH = 384 / 2
            self.SSW = 256 / 2
            self.SSH = 384 / 2
            
        if Config.Config ["Swap_SS_and_Case"]:
            self.ScreenShot_Bitmap.SetBitmap( GFX.getGFX_No_CaseImage().Scale( self.CaseW, self.CaseH, wx.IMAGE_QUALITY_NORMAL ).ConvertToBitmap() )
            self.Case_Bitmap.SetBitmap( GFX.getGFX_No_ScreenShotImage().Scale( self.SSW, self.SSH, wx.IMAGE_QUALITY_NORMAL ).ConvertToBitmap() )
        else:
            self.Case_Bitmap.SetBitmap( GFX.getGFX_No_CaseImage().Scale( self.CaseW, self.CaseH, wx.IMAGE_QUALITY_NORMAL ).ConvertToBitmap() )
            self.ScreenShot_Bitmap.SetBitmap( GFX.getGFX_No_ScreenShotImage().Scale( self.SSW, self.SSH, wx.IMAGE_QUALITY_NORMAL ).ConvertToBitmap() )

        self.Case_Bitmap.Refresh()
        self.ScreenShot_Bitmap.Refresh()
        
        # begin wxGlade: cMainFrame.__do_layout
        MainFrame_Sizer1 = wx.BoxSizer(wx.VERTICAL)
        MainFrame_Sizer2 = wx.BoxSizer(wx.HORIZONTAL)
        SplitPanel2_Sizer = wx.FlexGridSizer(2, 1, 0, 0)
        Device_Sizer = wx.StaticBoxSizer(self.Device_Sizer_staticbox, wx.HORIZONTAL)
        Device_Sizer2 = wx.FlexGridSizer(2, 1, 0, 0)
        Device_Sizer3 = wx.FlexGridSizer(1, 3, 0, 0)
        ROM_Information_Sizer = wx.StaticBoxSizer(self.ROM_Information_Sizer_staticbox, wx.HORIZONTAL)
        ROM_Information_Sizer2 = wx.FlexGridSizer(2, 1, 0, 0)
        sizer_8 = wx.FlexGridSizer(10, 1, 0, 0)
        grid_sizer_5 = wx.GridSizer(1, 1, 0, 0)
        grid_sizer_8 = wx.GridSizer(1, 2, 0, 0)
        grid_sizer_9 = wx.GridSizer(1, 2, 0, 0)
        grid_sizer_12 = wx.GridSizer(1, 2, 0, 0)
        grid_sizer_13 = wx.GridSizer(1, 2, 0, 0)
        grid_sizer_14 = wx.GridSizer(1, 2, 0, 0)
        grid_sizer_15 = wx.GridSizer(1, 2, 0, 0)
        grid_sizer_16 = wx.GridSizer(1, 1, 0, 0)
        grid_sizer_21 = wx.GridSizer(1, 2, 0, 0)
        ROM_Icon_Sizer = wx.FlexGridSizer(1, 2, 0, 0)
        Picture_Sizer = wx.BoxSizer(wx.HORIZONTAL)
        ROMList_Sizer = wx.StaticBoxSizer(self.ROMList_Sizer_staticbox, wx.HORIZONTAL)
        ROMList_Sizer2 = wx.FlexGridSizer(2, 1, 0, 0)
        Search_Filter_Sizer1 = wx.FlexGridSizer(2, 2, 0, 0)
        Filter_Sizer = wx.FlexGridSizer(2, 4, 0, 0)
        Search_Sizer = wx.FlexGridSizer(1, 4, 0, 0)
        Search_Filter_Sizer1.Add(self.Search_Label, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 3)
        Search_Sizer.Add(self.Search_TextCtrl, 0, wx.ALL|wx.EXPAND|wx.FIXED_MINSIZE, 3)
        Search_Sizer.Add(self.Search_Button, 0, wx.ALL, 3)
        Search_Sizer.Add(self.Clear_Button, 0, wx.ALL, 3)
        Search_Sizer.Add(self.Clear_All_Button, 0, wx.ALL, 3)
        Search_Sizer.AddGrowableCol(0)
        Search_Filter_Sizer1.Add(Search_Sizer, 1, wx.EXPAND, 0)
        Search_Filter_Sizer1.Add(self.Filter_Label, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 3)
        Search_Filter_Sizer1.Add(Filter_Sizer, 1, wx.EXPAND, 0)
        Search_Filter_Sizer1.AddGrowableCol(1)
        ROMList_Sizer2.Add(Search_Filter_Sizer1, 1, wx.EXPAND, 0)
        ROMList_Sizer2.Add(self.ROMList, 1, wx.EXPAND, 0)
        ROMList_Sizer2.AddGrowableRow(1)
        ROMList_Sizer2.AddGrowableCol(0)
        ROMList_Sizer.Add(ROMList_Sizer2, 1, wx.EXPAND, 0)
        self.Split_Panel1.SetSizer(ROMList_Sizer)
        Picture_Sizer.Add(self.Case_Bitmap, 0, wx.RIGHT, 6)
        Picture_Sizer.Add(self.ScreenShot_Bitmap, 0, 0, 0)
        ROM_Information_Sizer2.Add(Picture_Sizer, 1, wx.EXPAND, 0)
        ROM_Icon_Sizer.Add(self.ROM_Icon_Label, 0, wx.LEFT|wx.TOP|wx.BOTTOM, 3)
        ROM_Icon_Sizer.Add(self.ROM_Icon, 0, wx.TOP, 3)
        ROM_Icon_Sizer.AddGrowableRow(0)
        ROM_Icon_Sizer.AddGrowableCol(1)
        grid_sizer_21.Add(ROM_Icon_Sizer, 1, wx.EXPAND, 0)
        grid_sizer_21.Add(self.ReleaseNumber, 0, wx.ALL|wx.EXPAND, 3)
        sizer_8.Add(grid_sizer_21, 1, wx.EXPAND, 0)
        grid_sizer_16.Add(self.ROM_Title, 0, wx.ALL|wx.EXPAND, 3)
        sizer_8.Add(grid_sizer_16, 1, wx.EXPAND, 0)
        grid_sizer_15.Add(self.Location, 0, wx.ALL|wx.EXPAND, 3)
        grid_sizer_15.Add(self.Publisher, 0, wx.ALL|wx.EXPAND, 3)
        sizer_8.Add(grid_sizer_15, 1, wx.EXPAND, 0)
        grid_sizer_14.Add(self.ReleaseGroup, 0, wx.ALL|wx.EXPAND, 3)
        grid_sizer_14.Add(self.Genre, 0, wx.ALL|wx.EXPAND, 3)
        sizer_8.Add(grid_sizer_14, 1, wx.EXPAND, 0)
        grid_sizer_13.Add(self.Internal_Name, 0, wx.ALL|wx.EXPAND, 3)
        grid_sizer_13.Add(self.Serial, 0, wx.ALL|wx.EXPAND, 3)
        sizer_8.Add(grid_sizer_13, 1, wx.EXPAND, 0)
        grid_sizer_12.Add(self.Version, 0, wx.ALL|wx.EXPAND, 3)
        grid_sizer_12.Add(self.ROMCRC, 0, wx.ALL|wx.EXPAND, 3)
        sizer_8.Add(grid_sizer_12, 1, wx.EXPAND, 0)
        grid_sizer_9.Add(self.ROMSize, 0, wx.ALL|wx.EXPAND, 3)
        grid_sizer_9.Add(self.Wifi, 0, wx.ALL|wx.EXPAND, 3)
        sizer_8.Add(grid_sizer_9, 1, wx.EXPAND, 0)
        grid_sizer_8.Add(self.SaveType, 0, wx.ALL|wx.EXPAND, 3)
        grid_sizer_8.Add(self.SavedGames, 0, wx.ALL|wx.EXPAND, 3)
        sizer_8.Add(grid_sizer_8, 1, wx.EXPAND, 0)
        grid_sizer_5.Add(self.Languages, 0, wx.ALL|wx.EXPAND, 3)
        sizer_8.Add(grid_sizer_5, 1, wx.EXPAND, 0)
        sizer_8.Add(self.Tags, 0, wx.ALL|wx.EXPAND, 3)
        sizer_8.AddGrowableCol(0)
        ROM_Information_Sizer2.Add(sizer_8, 1, wx.EXPAND, 0)
        ROM_Information_Sizer2.AddGrowableRow(0)
        ROM_Information_Sizer2.AddGrowableCol(0)
        ROM_Information_Sizer.Add(ROM_Information_Sizer2, 1, wx.EXPAND, 0)
        SplitPanel2_Sizer.Add(ROM_Information_Sizer, 1, wx.EXPAND, 0)
        Device_Sizer3.Add(self.Device_Dir_Picker, 0, wx.RIGHT|wx.TOP|wx.BOTTOM|wx.EXPAND|wx.ALIGN_CENTER_VERTICAL, 3)
        Device_Sizer3.Add(self.Device_Refresh_Button, 0, wx.LEFT|wx.RIGHT|wx.ALIGN_CENTER_VERTICAL, 3)
        Device_Sizer3.Add(self.Device_Apply_Button, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 3)
        Device_Sizer3.AddGrowableCol(0)
        Device_Sizer2.Add(Device_Sizer3, 1, wx.EXPAND, 0)
        Device_Sizer2.Add(self.Device_List, 1, wx.EXPAND, 0)
        Device_Sizer2.AddGrowableRow(1)
        Device_Sizer2.AddGrowableCol(0)
        Device_Sizer.Add(Device_Sizer2, 1, wx.EXPAND, 0)
        SplitPanel2_Sizer.Add(Device_Sizer, 1, wx.EXPAND, 0)
        self.Split_Panel2.SetSizer(SplitPanel2_Sizer)
        SplitPanel2_Sizer.AddGrowableRow(1)
        SplitPanel2_Sizer.AddGrowableCol(0)
        self.MainFrame_Splitter.SplitVertically(self.Split_Panel1, self.Split_Panel2)
        MainFrame_Sizer2.Add(self.MainFrame_Splitter, 1, wx.ALL|wx.EXPAND, 3)
        self.MainFrame_Panel.SetSizer(MainFrame_Sizer2)
        MainFrame_Sizer1.Add(self.MainFrame_Panel, 1, wx.EXPAND, 0)
        self.SetSizer(MainFrame_Sizer1)
        self.Layout()
        # end wxGlade
        self.ROM_Information_Sizer = ROM_Information_Sizer
        self.ROM_Information_Sizer2 = ROM_Information_Sizer2
        self.SplitPanel2_Sizer = SplitPanel2_Sizer
        self.Filter_Sizer = Filter_Sizer
        self.ROMList_Sizer2 = ROMList_Sizer2
        self.Picture_Sizer = Picture_Sizer
        self.Device_Sizer = Device_Sizer
        self.ROM_Icon_Sizer = ROM_Icon_Sizer
        
        self.__Local_Init ( ["STARTUP"] )
        
        self.Thaw()
        
    def __Local_Init ( self, Options ):
        if "STARTUP" in Options:
            self.Device_Dir_Picker.browseButton.SetWindowStyle( wx.BU_EXACTFIT )
            self.Device_Dir_Picker.Refresh()

        if "STARTUP" in Options:
            self.In_Search_Clear = False
            Config.Config ["Last_Tag"] = ""
            try:
                self.Old_Sort_Col_Name = Config.Config ["Sort"]
                self.Old_Sort_Col = Config.Config ["ROMColumns"].index ( self.Old_Sort_Col_Name )
            except:
                pass
            try:
                self.Old_Cart_Sort_Col_Name = Config.Config ["Cart_Sort"]
                self.Old_Cart_Sort_Col = Config.Config ["CartColumns"].index ( self.Old_Cart_Sort_Col_Name )
            except:
                pass
            self.Hidden_Count = 0
            self.In_Device_Dir_Callback = False
            self.ToggleBackup = []
            
#            self.Find_Serials.Enable(False)
                        
        self.Aborted = False
        if "STARTUP" in Options:
            if Config.Config ["First_Run"]:
                if self.Run_Wizard () == False:
                    self.Aborted = True
                    self.Close()
                    return
                
        if "STARTUP" in Options:
            self.Check_New_Files ()

        if "STARTUP" in Options:
            self.Init_Help ()
            
            target = cDropTarget( self )
            self.Device_List.SetDropTarget( target )
            
            self.Open_Save_Comments()
#            self.Save_Comments_Shelve = shelve.open( os.path.join ( Config.Config ["Save_Path"], "RToolDSComments.dat" ) )

        if "STARTUP" in Options or "TOOLBAR" in Options:
            self.Populate_Toolbar ()
            
        if "STARTUP" in Options:
            self.Maximize( False )
            self.SetSize( Config.Config ["Window_Size"] )
            if Config.Config ["Window_Position"] [ 0 ] == -1:
                self.CentreOnScreen ()
            else:
                self.SetPosition( Config.Config ["Window_Position"] )
                
            self.Set_Sash_Position ()

            if Config.Config ["Window_Maximized"]:
                self.Maximize()

            self.Set_Sash_Position ()
            
            self.MainFrame_Splitter.SetMinimumPaneSize(1)
                
#            self.ROMList_Sizer_staticbox.SetForegroundColour( wx.SystemSettings.GetColour ( wx.SYS_COLOUR_WINDOWTEXT ) )
#            self.ROM_Information_Sizer_staticbox.SetForegroundColour( wx.SystemSettings.GetColour ( wx.SYS_COLOUR_WINDOWTEXT ) )
#            self.Device_Sizer_staticbox.SetForegroundColour( wx.SystemSettings.GetColour ( wx.SYS_COLOUR_WINDOWTEXT ) )
            
        if "STARTUP" in Options:
            self.Location_Choice = wx.Choice( self.Split_Panel1, -1, choices=[] )
            self.Language_Choice = wx.Choice( self.Split_Panel1, -1, choices=[] )
            self.Genre_Choice    = wx.Choice( self.Split_Panel1, -1, choices=[] )
            self.Size_Choice     = wx.Choice( self.Split_Panel1, -1, choices=[] )
            
            self.Filter_Sizer.Add( self.Location_Choice, 0, wx.ALL, 3 )
            self.Filter_Sizer.Add( self.Language_Choice, 0, wx.ALL, 3 )
            self.Filter_Sizer.Add( self.Genre_Choice, 0, wx.ALL, 3 )
            self.Filter_Sizer.Add( self.Size_Choice, 0, wx.ALL, 3 )
            self.ROMList_Sizer2.Layout()
            self.Filter_Min_Size = self.Filter_Sizer.GetMinSize()[0] + 7 #TODO Fudge Factor
#            print "Filter sizer min size %d" %self.Filter_Min_Size
            self.Filters_On_One_Line = True
            self.Check_Controls_Size ()
            
        if "STARTUP" in Options or "ROMS" in Options:
            self.Master_List_OK = MyROMS.Load_Master_List ()
            
        if "SORT" in Options or "ROMS" in Options:
            MyROMS.Sort_Current_List ()
            
        if "SEARCH" in Options or "SORT" in Options or "ROMS" in Options or "TAGS" in Options:
            MyROMS.Populate_Current_List ()
            
        if "SAVES" in Options:
            MyROMS.Merge_Saves ()
            
        if "STARTUP" in Options:
            if Config.Config ["Show_Device_List"] == False:
                self.Device_Sizer.ShowItems(False)
                self.Device_List.Disable()
            else:
                self.Device_Sizer.ShowItems(True)
                self.Device_List.Enable()

        if "STARTUP" in Options or "COLUMNS" in Options:
            self.ROMList.Local_Init()
            self.Device_List.Local_Init()
        
        if "STARTUP" in Options or "ICONS" in Options:
            self.LoadIcons ()

        if "STARTUP" in Options or "ROMS" in Options or "SEARCH" in Options or "SORT" in Options  or "TAGS" in Options:
            Row = self.ROMList.GetFirstSelected()
            while Row != -1:# and not dlg.Abort:
                self.ROMList.SetItemState(Row, 0, wx.LIST_STATE_SELECTED)
                Row = self.ROMList.GetNextSelected( Row )

            self.ROMList.SetItemCount ( MyROMS.Current_Count )
            if "TAGS" not in Options:
                self.ROMList.Resize_Columns()
                self.ROMList.SetItemState(0, wx.LIST_STATE_SELECTED, wx.LIST_STATE_SELECTED)
                self.ROMList.Focus(0)
            self.ROMList.Refresh()
            
        if "SORT" in Options:
            self.ROMList.SetFocus()
            
        if "STARTUP" in Options or "ROMS" in Options or "DEVICE" in Options or "SAVES" in Options or "SORTCART" in Options:
            if not self.In_Device_Dir_Callback:
                self.Device_Dir_Picker.SetValue( Config.Config ["Device_Path"] )
            if self.Device_List.Populate() == False:
                self.Device_List.Enable(False)
            self.Device_List.Resize_Columns()
            self.Device_List.Refresh()
            
        if "STARTUP" in Options:
            try:
                self.Device_List.Select( 0, True )
                self.Device_List.SetItemState( 0, wx.LIST_STATE_FOCUSED, wx.LIST_STATE_FOCUSED )
                self.Device_List.Focus( 0 )
                self.Device_List.EnsureVisible( 0 )
            except:
                pass
            
        if "STARTUP" in Options or "ROMS" in Options:
            self.Populate_Filters ()
            
        if "STARTUP" in Options or "TAGS" in Options:
            self.Populate_Tags ()
            
        if "STARTUP" in Options:
            self.Update_Main_Menu ()
            self.Show_Hide_Panels ()
        
        if "STARTUP" in Options: # This wasn't here before sash moving back bug    
            self.Device_Sizer.Layout()
            self.SplitPanel2_Sizer.Layout()
            
        if "STARTUP" in Options or "SEARCH" in Options:
            self.Current_Ctrl = self.ROMList
        
        if "STARTUP" in Options:
            self.ROMList.SetFocus()

        if "STARTUP" in Options or "SEARCH" in Options:
            if MyROMS.Current_Count > 0:
                self.ROMList.Select( 0, True )
                self.ROMList.SetItemState( 0, wx.LIST_STATE_FOCUSED, wx.LIST_STATE_FOCUSED )
                self.ROMList.Focus( 0 )
        
        if "STARTUP" in Options or "DEVICE" in Options:
            self.Enable_Tasks ()
            
        if "STARTUP" in Options:
            self.Resize_StatusBar ()
        
        if "SAVES" in Options:
            self.ROMList.Refresh()
            
        if "TAGS" in Options:
            self.Device_List.Refresh()

        self.Update_Fields( Force = True )
        self.Update_StatusBar( STATUS_ALL )
        
        if "STARTUP" in Options: # This also wasnt here before sash moving back bug
            self.MainFrame_Splitter.SendSizeEvent()
            self.MainFrame_Splitter.SetSashGravity( 1 )
        
        if "STARTUP" in Options:
            if Config.Config ["Auto_Backup_Saved_Games"]:
                self.On_Backup_Save_Game (None, All=True, In_Init=True)
        
    def On_Window_Size ( self, event ):
        if self.In_Init == False:
            if self.IsMaximized() == False and self.IsIconized() == False:
                Config.Config ["Window_Size"] = self.GetSize()
                Config.Config ["Window_Maximized"] = False
#            self.Set_Sash_Position()
            self.Check_Controls_Size ()
            self.Resize_StatusBar ()
        event.Skip ()
    
    def On_Window_Move ( self, event ):
        if self.In_Init == False:
            if self.IsMaximized() == False and self.IsIconized() == False:
                Config.Config ["Window_Position"] = self.GetScreenPosition()
                Config.Config ["Window_Maximized"] = False
#            self.Set_Sash_Position()
            self.Check_Controls_Size ()
            self.Resize_StatusBar ()
        event.Skip ()
        
    def On_Window_Maximize ( self, event ):
#        print "Maximized"
        if self.In_Init == False:
            Config.Config ["Window_Maximized"] = self.IsMaximized()
            self.Check_Controls_Size ()
            self.Resize_StatusBar ()
        event.Skip ()
        
    def On_Sash_Changed( self, event ): # wxGlade: cMainFrame.<event_handler>
        if self.In_Init == False:
            if self.IsMaximized() == False:
#                print "Not %s" % self.MainFrame_Splitter.GetSashPosition()
#                Config.Config ["Sash_Position"] = self.MainFrame_Splitter.GetSashPosition()
                Config.Config ["Sash_Position"] = event.SashPosition
            else:
#                print "MAX %s" % self.MainFrame_Splitter.GetSashPosition()
#                Config.Config ["Sash_Position_Maximized"] = self.MainFrame_Splitter.GetSashPosition()
                Config.Config ["Sash_Position_Maximized"] = event.SashPosition - 8
            self.Check_Controls_Size ()
            self.Resize_StatusBar ()
        event.Skip ()
    
    def On_Sash_Dbl_Clock( self, event ): # wxGlade: cMainFrame.<event_handler>
        event.Veto()

    def Set_Sash_Position ( self ):
#        self.MainFrame_Splitter.SendSizeEvent()
        if Config.Config ["Sash_Position"] == -1:
            tmpSize = self.GetSize() [ 0 ] - self.ROM_Information_Sizer.GetMinSize() [ 0 ] - 20 #TODO: Fudge Factor in Sash?
            self.MainFrame_Splitter.SetSashPosition( tmpSize, True )
#            print tmpSize
        else:
            self.MainFrame_Splitter.SetSashPosition( Config.Config ["Sash_Position"], True )
            
#        if Config.Config ["Window_Maximized"]:
        if self.IsMaximized():
            self.MainFrame_Splitter.SetSashPosition( Config.Config ["Sash_Position_Maximized"], True )

    def Check_Controls_Size ( self ):
        self.Layout() #TODO: Fudge
            
        Filter_Size = self.ROMList_Sizer2.GetSize()[0] + 40 #TODO Fudge Factor

        if Filter_Size < self.Filter_Min_Size:
            if self.Filters_On_One_Line:
                self.Freeze()
                self.Filter_Sizer.Clear ()
                self.Filter_Sizer.Add( self.Location_Choice, 0, wx.ALL, 3 )
                self.Filter_Sizer.Add( self.Language_Choice, 0, wx.ALL, 3 )
                self.Filter_Sizer.AddSpacer( ( 1, 1 ) )
                self.Filter_Sizer.AddSpacer( ( 1, 1 ) )
                self.Filter_Sizer.Add( self.Genre_Choice, 0, wx.ALL, 3 )
                self.Filter_Sizer.Add( self.Size_Choice, 0, wx.ALL, 3 )
                self.ROMList_Sizer2.Layout()
                self.Thaw()
                self.Filters_On_One_Line = False
        else:
            if self.Filters_On_One_Line == False:
                self.Freeze()
                self.Filter_Sizer.Clear ()
                self.Filter_Sizer.Add( self.Location_Choice, 0, wx.ALL, 3 )
                self.Filter_Sizer.Add( self.Language_Choice, 0, wx.ALL, 3 )
                self.Filter_Sizer.Add( self.Genre_Choice, 0, wx.ALL, 3 )
                self.Filter_Sizer.Add( self.Size_Choice, 0, wx.ALL, 3 )
                self.ROMList_Sizer2.Layout()
                self.Thaw()
                self.Filters_On_One_Line = True

    def On_Menu_Quit( self, event ): # wxGlade: cMainFrame.<event_handler>
        self.Close()
        
    def On_Close (self, event):
        MyROMS.Save_Master_List()
        event.Skip()
        
    def Run_Wizard ( self, UseDummy = True ):
        try:
            wx.Yield()
        except:
            pass
        DLGFX = False
        if UseDummy:
            My_Wizard = cWizard.cWizard ( self.DummyFrame )
        else:
            My_Wizard = cWizard.cWizard ( self )
        if My_Wizard.RunWizard():
            Config.Config ["ROM_Path"] = My_Wizard.GetResult ( "ROM_Path" )
            Config.Config ["Image_Path"] = My_Wizard.GetResult ( "Image_Path" )
            Config.Config ["NFO_Path"] = My_Wizard.GetResult ( "NFO_Path" )
            DLGFX = My_Wizard.GetResult ( "DLGFX" ) 

            Config.Config ["Find_Unknown"] = My_Wizard.GetResult ( "Find_Unknown" )
             
            Config.Config ["Save_Path"] = My_Wizard.GetResult ( "Save_Path" )

            Config.Config ["Device_Path"] = My_Wizard.GetResult ( "Device_Path" )
            Config.Config ["Save_Dir_On_Cart"] = My_Wizard.GetResult ( "Device_Path" )
            
            Config.Config ["Default_Device"] = My_Wizard.GetResult ( "Default_Device" )
            
            if UseDummy:
                if My_Wizard.GetResult ( "Use_Trimmed" ):
                    Config.Config ["Use_Trimmed"] = True
                    Config.Config ["ROMColumns"] = [ "Icon", "Release Number", "Name", "Size", "Trimmed" ]
                else:
                    Config.Config ["Use_Trimmed"] = False
                    Config.Config ["ROMColumns"] = [ "Icon", "Release Number", "Name", "Size" ]
            else:
                if My_Wizard.GetResult ( "Use_Trimmed" ):
                    Config.Config ["Use_Trimmed"] = True
                else:
                    Config.Config ["Use_Trimmed"] = False
                
            try:
                os.mkdir ( "cache" )
            except:
                pass
            try:
                os.mkdir ( Config.Config ["Image_Path"] )
            except:
                pass
            try:
                os.mkdir ( Config.Config ["NFO_Path"] )
            except:
                pass
            try:
                os.mkdir ( Config.Config ["Save_Path"] )
            except:
                pass
        
            if DLGFX == False:
                if UseDummy:
                    dlg = cLogDialog( self.DummyFrame, Todo = ["Master_List", "ROM_List"], Auto_Close=True )
                else:
                    dlg = cLogDialog( self, Todo = ["Master_List", "ROM_List"], Auto_Close=Config.Config ["AutoCloseUpdate"] )
                dlg.ShowModal()
                dlg.Destroy()
            else:
                if UseDummy:
                    dlg = cLogDialog( self.DummyFrame, Todo = ["Master_List", "ROM_List", "GFX"], Auto_Close=True )
                else:
                    dlg = cLogDialog( self, Todo = ["Master_List", "ROM_List", "GFX"], Auto_Close=Config.Config ["AutoCloseUpdate"] )
                dlg.ShowModal()
                dlg.Destroy()
                
            if Config.Config ["Default_Device"] == "SuperCard DS One (.sav)":
                Config.Config ["UseShortSaveName"] = True
            else:
                Config.Config ["UseShortSaveName"] = False
            
            Config.Config ["First_Run"] = False
            return True
        else:
            return False

    def Check_New_Files ( self ):
        try:
            wx.Yield()
        except:
            pass
        if os.path.isfile( "RToolDS_Trimmed.dat.new" ) and os.path.isfile ("RToolDS_Trimmed.dat"):
            Res = wx.MessageBox( _('A New Trim Data File Has Been Created by the Installer\n\nDo You Wish to Overwrite Your Existing One?'), _('New Trim Data File'), wx.YES_NO| wx.ICON_QUESTION )
            if Res == wx.YES:
                try:
                    MyROMS.Close_Trimmed_Shelve ()
                    os.unlink( "RToolDS_Trimmed.dat" )
                    os.rename( "RToolDS_Trimmed.dat.new", "RToolDS_Trimmed.dat" )
                    os.utime( "RToolDS_Trimmed.dat", None )
                except:
                    pass
                MyROMS.Open_Trimmed_Shelve()
            else:
                try:
                    os.unlink( "RToolDS_Trimmed.dat.new" )
                except:
                    pass
        else:
            if os.path.isfile ("RToolDS_Trimmed.dat.new"):
                os.rename( "RToolDS_Trimmed.dat.new", "RToolDS_Trimmed.dat" )
                os.utime( "RToolDS_Trimmed.dat", None )
                
    def Init_Help ( self ):
        def _addBook( filename ):
            if not self.help.AddBook( filename ):
                pass
#                wx.MessageBox("Unable to open: " + filename,
#                              "Error", wx.OK|wx.ICON_EXCLAMATION)

        wx.FileSystem.AddHandler( wx.ZipFSHandler() )
        self.help = wx.html.HtmlHelpController()
        _addBook( os.path.join ( os.path.split(sys.argv[0])[0], "Help.htb" ))

    def LoadIcons ( self ):
        To_Process = MyROMS.Master_List_Count

        dlg = cProgressFrame ( self )
        dlg.DisableGuage2()
        dlg.DisableCancelButton ()
        dlg.Proccessing_Text.SetLabel ( _( "Loading Icons..." ) )
        dlg.Guage1.SetRange ( To_Process )
        dlg.MakeModal()
        dlg.CenterOnScreen()
        dlg.Show()
        dlg.Update()

        self.ROMList.IconDict = {}
        self.ROMList.IconList = wx.ImageList ( 32, 32 )
        
        No_Icon = GFX.getGFX_No_IconBitmap()
        self.ROMList.IconList.Add ( No_Icon )
        self.ROMList.IconDict [0] = 0
        Count = 1
        MyROMS.Process_All = True
        Processed = 0
        for ROM in MyROMS:
            if ROM.Found:
                if ROM.Comment [0] != "U":
                    Image_Filename = os.path.join ( Config.Config ["Image_Path"], "%04d.png" % ROM.Image_Number )
                else:
                    Image_Filename = os.path.join ( Config.Config ["Image_Path"], os.path.splitext( os.path.basename ( ROM.Archive_File ) )[0] + ".png" )
                if os.path.isfile( Image_Filename ):
                    try:
                        self.ROMList.IconList.Add ( wx.Image( Image_Filename, wx.BITMAP_TYPE_PNG ).ConvertToBitmap() )
                    except:
                        self.ROMList.IconList.Add ( No_Icon )
                else:
                    self.ROMList.IconList.Add ( No_Icon )
                self.ROMList.IconDict [ROM.Image_Number] = Count
                Count += 1
            wx.YieldIfNeeded()
            Processed += 1
            dlg.Guage1.SetValue ( Processed )
            dlg.Update()

        dlg.MakeModal( False )
        dlg.Destroy()

        MyROMS.Process_All = False
        
        self.Device_List.IconDict = self.ROMList.IconDict
        self.Device_List.IconList = self.ROMList.IconList
        
        self.ROMList.UpdateIcons()
        self.Device_List.UpdateIcons()
        
    def On_Update_Master_List( self, event ): # wxGlade: cMainFrame.<event_handler>
        try:
            wx.Yield()
        except:
            pass
#        self.ROMList.Freeze()
        dlg = cLogDialog( self, Todo = ["Master_List"], Auto_Close=False )
        dlg.ShowModal()
        
#        if "Failed" in dlg.Todo:
#            Success = False
#        else:
#            Success = True
        
        dlg.Destroy()
        self.__Local_Init( ["ROMS", "GFX", "ICONS"] )
#        self.ROMList.Thaw()

    def On_Find_New_ROMS( self, event ): # wxGlade: cMainFrame.<event_handler>
        try:
            wx.Yield()
        except:
            pass
#        self.ROMList.Freeze()
        dlg = cLogDialog( self, Todo = ["ROM_List"], Auto_Close=False )
        dlg.ShowModal()
        
#        if "Failed" in dlg.Todo:
#            Success = False
#        else:
#            Success = True
        dlg.Destroy()
        
        self.__Local_Init( ["ROMS", "GFX", "ICONS"] )
#        self.ROMList.Thaw()
        
    def On_Update_GFX( self, event ): # wxGlade: cMainFrame.<event_handler>
        try:
            wx.Yield()
        except:
            pass
#        self.ROMList.Freeze()
        dlg = cLogDialog( self, Todo = ["GFX"], Auto_Close=False )
        dlg.ShowModal()
        
#        if "Failed" in dlg.Todo:
#            Success = False
#        else:
#            Success = True
        
        dlg.Destroy()
        self.__Local_Init( ["ROMS", "GFX", "ICONS"] )
#        self.ROMList.Thaw()

    def On_Update_Everything( self, event ): # wxGlade: cMainFrame.<event_handler>
        try:
            wx.Yield()
        except:
            pass
#        self.ROMList.Freeze()
        dlg = cLogDialog( self, Todo = ["Master_List", "ROM_List", "GFX"], Auto_Close=False )
        dlg.ShowModal()
        
#        if "Failed" in dlg.Todo:
#            Success = False
#        else:
#            Success = True
        
        dlg.Destroy()
        self.__Local_Init( ["ROMS", "GFX", "ICONS"] )
#        self.ROMList.Thaw()

    def Resize_StatusBar ( self ):
        try:
            self.StatusBar.SetStatusWidths( [self.MainFrame_Splitter.GetSashPosition()+4, -1, 80] ) #TODO: Fudge
        except:
            pass

    def Update_StatusBar ( self, Position ):
        if Position & STATUS_ROM:
            Count = self.ROMList.GetSelectedItemCount()
            Size = self.ROMList.Get_Selected_ROM_Size()
            Text  = " " + _( "Total ROMs" )
            Text += " %d, " % MyROMS.Current_Count
            Text += _( "Selected ROMs" ) +  " (%d / %s) " % ( Count, Utils.Format_Normal_Size( Size, True ) )
            self.StatusBar.SetStatusText ( Text, 0 )
        
        if Position & STATUS_DEVICE:
            Size = self.Device_List.Drive_Size
            Free = self.Device_List.Drive_Free
            Text  = " " + _( "Device Size" )
            Text += " %s, " % Utils.Format_Normal_Size( Size )
            Text += _( "Free Space" ) +  " %s" % Utils.Format_Normal_Size( Free )
            if Config.Config ["Show_Device_List"] == False:
                Text = ""
            self.StatusBar.SetStatusText ( Text, 1 )
            
        if Position & STATUS_FILTER:
            Filter = False
            if self.Language_Choice.GetSelection() != 0 or self.Location_Choice.GetSelection() != 0 or self.Genre_Choice.GetSelection() != 0 or self.Size_Choice.GetSelection() != 0:
                Filter = True
            if self.Search_TextCtrl.GetValue() == "" and Filter == False:
                self.StatusBar.SetStatusText ( "Filter : Off", 2 )
            else:
                self.StatusBar.SetStatusText ( "Filter : On", 2 )
        
    def Search ( self ):
        Current_Search = self.Search_TextCtrl.GetValue()

        if len ( Current_Search ) > -1 and not self.In_Search_Clear:
            Config.Config ["Current_Search"] = Current_Search
            self.__Local_Init( "SEARCH" )
    
    def On_Search( self, event ): # wxGlade: cMainFrame.<event_handler>
        self.Search ()

    def On_Search_Text( self, event ): # wxGlade: cMainFrame.<event_handler>
        if Config.Config ["RealTime_Search"]:
            self.Search ()

    def On_Search_Clear( self, event ): # wxGlade: cMainFrame.<event_handler>
        try:
            wx.Yield()
        except:
            pass
        self.In_Search_Clear = True
        self.Search_TextCtrl.SetValue( "" )
        Config.Config ["Current_Search"] = ""
        self.In_Search_Clear = False
        self.__Local_Init( "SEARCH" )
        self.ROMList.SetFocus()
        
    def On_Search_Clear_All( self, event ): # wxGlade: cMainFrame.<event_handler>
        try:
            wx.Yield()
        except:
            pass
        Config.Config ["Filter_Location"] = 255
        Config.Config ["Filter_Language"] = 0
        Config.Config ["Filter_Genre"] = _( "All Genres" )
        Config.Config ["Filter_Size"] = 0
        Config.Config ["Filter_Exact_Size"] = False
        self.Location_Choice.SetSelection( 0 )
        self.Language_Choice.SetSelection( 0 )
        self.Genre_Choice.SetSelection ( 0 )
        self.Size_Choice.SetSelection ( 0 )
        self.On_Search_Clear( event )

    def Populate_Filters ( self ):
        self.Freeze()
        
        self.Location_Choice.Clear()
        self.Location_Choice.Append ( Config.Config ["Locations"][255], 255 )
        tmp = Utils.Sort_Dict(Config.Config ["Locations"])
        for LocationKey in tmp:
            if LocationKey != 255:
                self.Location_Choice.Append ( Config.Config ["Locations"][LocationKey], LocationKey )
        self.Location_Choice.SetSelection( self.Location_Choice.FindString( Config.Config ["Locations"][Config.Config ["Filter_Location"]] ) )

        self.Language_Choice.Clear()
        self.Language_Choice.Append ( Config.Config ["Languages"][0], 0 )
        tmp = Utils.Sort_Dict(Config.Config ["Languages"])
        for LanguageKey in tmp:
            if LanguageKey > 0:
                self.Language_Choice.Append ( Config.Config ["Languages"][LanguageKey], LanguageKey )
        self.Language_Choice.Append ( "Unknown", -1 )
        self.Language_Choice.SetSelection( self.Language_Choice.FindString( Config.Config ["Languages"][Config.Config ["Filter_Language"]] ) )
        
        self.Genre_Choice.Clear()
        self.Genre_Choice.Append ( "All Genres", "All Genres" )
        for Genre in MyROMS.Genres:
            self.Genre_Choice.Append ( Genre, Genre )
        self.Genre_Choice.Append ( "Unknown", "Unknown" )
        self.Genre_Choice.SetSelection ( self.Genre_Choice.FindString ( Config.Config ["Filter_Genre"] ) )
                
        self.Size_Choice.Clear()
        for Size in Config.Config ["Sizes"]:
            if Size == 0:
                self.Size_Choice.Append( _( "Any Size" ), 0 )
            else:
                self.Size_Choice.Append( "<= " + Utils.Format_ROM_Size( Size, True ), Size )
                if Config.Config ["Filter_Use_Exact_Sizes"]:
                    self.Size_Choice.Append( "= " + Utils.Format_ROM_Size( Size, True ), Size )
        if Config.Config ["Filter_Size"] == 0:
            self.Size_Choice.SetSelection ( 0 )
        else:
            if Config.Config ["Filter_Exact_Size"] == False:
                Str = "<= " + Utils.Format_ROM_Size( Config.Config ["Filter_Size"], True )
            else:
                Str = "= " + Utils.Format_ROM_Size( Config.Config ["Filter_Size"], True )
            self.Size_Choice.SetSelection ( self.Size_Choice.FindString ( Str ) )

        self.Thaw()
            
    def Populate_Tags ( self ):
        self.Freeze()
        self.Tag_Choice.Clear()
        self.Tag_Choice.Append( _( "All ROMs" ) )
        self.Tag_Choice.Append( _( "Hidden ROMs" ) )
        for Tag in MyROMS.Get_All_Tags():
            self.Tag_Choice.Append ( Tag )
        self.Tag_Choice.SetSelection ( self.Tag_Choice.FindString ( Config.Config ["Current_Tag"] ) )
        self.Thaw()
        
    def Handle_Filter( self, event, Var ):
        if self.In_Init:
            event.Skip()
        else:
            Key = event.GetClientData()
            if Key != Config.Config [Var] or Var == "Filter_Size":
                Config.Config [Var] = Key
                self.__Local_Init( "SEARCH" )

    def On_Location ( self, event ):
        self.Handle_Filter( event, "Filter_Location" )
    
    def On_Language ( self, event ):
        self.Handle_Filter( event, "Filter_Language" )

    def On_Genre ( self, event ):
        self.Handle_Filter( event, "Filter_Genre" )

    def On_Size( self, event ): # wxGlade: MyMainFrame.<event_handler>
        if self.Size_Choice.GetStringSelection()[0] == "=":
            Config.Config ["Filter_Exact_Size"] = True
        else:
            Config.Config ["Filter_Exact_Size"] = False
            
        self.Handle_Filter( event, "Filter_Size" )
        
    def Update_Pictures ( self, ROM ):
        if not Config.Config ["Swap_SS_and_Case"]:
            if not Config.Config ["Hide_Case_Pictures"]:
                self.Case_Bitmap.SetBitmap( Utils.Get_Case ( ROM, self.CaseW, self.CaseH ) )
    
            if not Config.Config ["Hide_Screenshots"]:
                self.ScreenShot_Bitmap.SetBitmap( Utils.Get_Screenshot ( ROM, self.SSW, self.SSH ) )
        else:
            if not Config.Config ["Hide_Case_Pictures"]:
                self.ScreenShot_Bitmap.SetBitmap( Utils.Get_Case ( ROM, self.CaseW, self.CaseH ) )
    
            if not Config.Config ["Hide_Screenshots"]:
                self.Case_Bitmap.SetBitmap( Utils.Get_Screenshot ( ROM, self.SSW, self.SSH ) )
            
    def Update_Fields ( self, Force = False ):
        if self.In_Init and Force == False:
            return

        Item = self.Current_Ctrl.GetFocusedItem()
        if Item == -1:
            ROM=BlankROM()
        else:
            ROM = self.Current_Ctrl.Get_ROM ( Item )
            
        self.Update_Pictures ( ROM )

        Language_String = _( "Languages" ) + " : "
        for Language in Config.Config ["Languages"]:
            if Language < 1:
                continue
            if ROM.Language & Language:
                Language_String +=  Config.Config ["Languages"][Language]+ ", "
        Language_String = Language_String[:-2]
        if Language_String == _( "Languages" ) + " ":
            Language_String = _( "Languages" ) + " : " + _( "Unknown" )
        self.Languages.SetLabel( Language_String )
        
        try:
            self.Location.SetLabel( _( "Region" )  + " : " + Config.Config ["Locations"][ROM.Location] )
        except:
            self.Location.SetLabel( _( "Region" ) + " : " + _( "Unknown" ) )
        
        self.Genre.SetLabel( _( "Genre : " ) + ROM.Genre )
        
#        if Config.Config ["Use_Trimmed"]:
#            if ROM.Trimmed:
#                ROMSize_String = _( "Trimmed Size : %s     Official Size : %s" ) % ( Utils.Format_ROM_Size ( ROM.Effective_Size ), Utils.Format_ROM_Size( ROM.ROM_Size ) )
#            else:
#                ROMSize_String = _( "Trimmed Size : N/A     Official Size : %s" ) % Utils.Format_ROM_Size( ROM.ROM_Size )
#        else:
#            ROMSize_String = _( "ROM Size : " )
#            ROMSize_String += Utils.Format_ROM_Size ( ROM.ROM_Size )

        if Config.Config ["Use_Trimmed"]:
            if ROM.Trimmed:
                ROMSize_String = _( "Size : %s, Trimmed : %s" ) % ( Utils.Format_ROM_Size( ROM.ROM_Size ), Utils.Format_ROM_Size ( ROM.Effective_Size ) )
            else:
                ROMSize_String = _( "Size : %s, Trimmed : N/A" ) % Utils.Format_ROM_Size( ROM.ROM_Size )
        else:
            ROMSize_String = _( "Size : " )
            ROMSize_String += Utils.Format_ROM_Size ( ROM.ROM_Size )

        self.ROMSize.SetLabel( ROMSize_String )
        
        if Item == -1:
            self.SavedGames.SetLabel( _( "Save Games : N/A" ))    
        else:
            if self.Current_Ctrl == self.ROMList:
                self.SavedGames.SetLabel( _( "Save Games : %d" ) % ROM.Saves )
            else:
                try:
                    Save = self.Device_List.Get_Save_Name ( Item )
                except:
                    Save = ["No","N/A","N/A","N/A"]
                if Save [0] == "No":
                    self.SavedGames.SetLabel( _( "Save on Device : None" ) )
                else:
                    self.SavedGames.SetLabel( _( "Save Date : %s" ) % Save [2])
                
        self.ReleaseGroup.SetLabel( _( "Release Group : %s" ) % ROM.Source_ROM )
        
        if ROM.ROM_CRC == "":
            self.ROMCRC.SetLabel( _( "CRC : Unknown" ))
        else:
            self.ROMCRC.SetLabel( _( "CRC : %s" ) % ROM.ROM_CRC )

        self.Publisher.SetLabel( _( "Publisher : %s" ) % ROM.Publisher )

        self.Internal_Name.SetLabel( _( "Internal Name : %s" ) % ROM.Internal_Name )

        if ROM.Serial == "":
            self.Serial.SetLabel( _( "Serial : Unknown" ) )
        else:
            self.Serial.SetLabel( _( "Serial : %s" ) % ROM.Serial )

        self.Version.SetLabel( _( "Version : %s, Dumped : %s" ) % (ROM.Version, ROM.Dump_Date ) )

        self.Wifi.SetLabel( _( "Wi-Fi : " ) + ROM.Wifi)

        self.SaveType.SetLabel( _( "Save Type : %s" ) % ROM.Save_Type )
        
        Str = ", "
        Str = Str.join ( Utils.cSort (ROM.Tags) )
        if Str == "":
            Str = _( "Tags" ) + " : " + _( "None" )
        else:
            Str = _( "Tags" ) + " : " + Str
        
        self.Tags.SetLabel ( Str )
        
        if ROM.Title == "":
            self.ROM_Title.SetLabel ( _("Title : Unknown"))
        else:
            self.ROM_Title.SetLabel ( _("Title : %s") % ROM.Title )
        
        self.ReleaseNumber.SetLabel( _("Rel No : %s") % ROM.Comment)
        
        try:
            if Item == -1:
                self.ROM_Icon.SetBitmap(GFX.catalog ["GFX_No_Icon"].getBitmap())
            else:
                self.ROM_Icon.SetBitmap(self.Current_Ctrl.Get_Item_Icon(Item))
        except:
            self.ROM_Icon.SetBitmap(GFX.catalog ["GFX_No_Icon"].getBitmap())
    
    def On_List_Focus ( self, event ):
        if event.EventObject.FocusedItem != -1 and self.In_Init == False:
            self.Current_Ctrl = event.EventObject
            try:
                self.Update_Fields ()
                self.Enable_Tasks()
            except:
                pass

        event.Skip()
    
    def On_List_Item_Focused( self, event ): # wxGlade: cMainFrame.<event_handler>
#        print "Focus"
        self.Update_Fields ()
        self.Update_StatusBar( STATUS_ROM|STATUS_DEVICE )
        self.Enable_Tasks()
        event.Skip()
#        if self.Virtual:
#            if self.InCtrlA == False:
#                self.ROMS_Selected_Count = self.ROMList.GetSelectedItemCount()
#                try:
#                    self.ROMS_Selected_Size = self.ROMList.CalcROMSizeTotal ()
#                except:
#                    self.ROMS_Selected_Size = 0
#
#                self.UpdateStatusBar ()

    def On_List_Item_Deselected( self, event ): # wxGlade: cMainFrame.<event_handler>
        self.Enable_Tasks()
        self.Update_StatusBar( STATUS_ROM|STATUS_DEVICE )
        event.Skip()

    def On_List_Item_Selected( self, event ): # wxGlade: cMainFrame.<event_handler>
        self.Enable_Tasks()
        self.Update_StatusBar( STATUS_ROM|STATUS_DEVICE )
        event.Skip()

    def On_List_Col_Click( self, event ): # wxGlade: cMainFrame.<event_handler>
        ColName = Config.Config ["ROMColumns"][event.m_col]
        ColNum = event.m_col
        
        if ColName != "Icon":
            if self.Old_Sort_Col_Name == ColName:
                Config.Config ["Sort_Reverse"] = not Config.Config ["Sort_Reverse"]
            Config.Config ["Sort"] = ColName
            self.__Local_Init( ["SORT"] )
            self.Old_Sort_Col_Name = ColName
            self.Old_Sort_Col = ColNum

    def On_Device_List_Col_Click(self, event): # wxGlade: cMainFrame.<event_handler>
        ColName = Config.Config ["CartColumns"][event.m_col]
        ColNum = event.m_col
        
        if ColName != "Icon":
            if self.Old_Cart_Sort_Col_Name == ColName:
                Config.Config ["Cart_Sort_Reverse"] = not Config.Config ["Cart_Sort_Reverse"]
            Config.Config ["Cart_Sort"] = ColName
            self.__Local_Init( ["SORTCART"] )
            self.Old_Cart_Sort_Col_Name = ColName
            self.Old_Cart_Sort_Col = ColNum

    def On_List_Col_Resize( self, event ): # wxGlade: cMainFrame.<event_handler>
        ColNum  = event.Column
        
        if sys.platform == "win32":
            ColSize = event.m_item.Width
        else:
            ColSize = self.Current_Ctrl.GetColumnWidth ( ColNum )

        if event.EventObject == self.ROMList:
            CtrlStr = "ROM"
        else:
            CtrlStr = "Cart"
            
        ColName = Config.Config [CtrlStr + "Columns"][ColNum]

        Config.Config [CtrlStr + "Column_Sizes"][ColName] = ColSize
        
        self.Current_Ctrl.Refresh()

    def On_List_Key_Down( self, event ): # wxGlade: cMainFrame.<event_handler>
#        print "keydown"
        if event.ControlDown() and event.GetUnicodeKey() == 1: # Select All (Ctrl-A)
            for Count in range ( 0, event.EventObject.GetItemCount() ):
                event.EventObject.Select( Count, True )
            self.Enable_Tasks()
        elif event.GetUnicodeKey () == 9: # Tab
            if event.EventObject == self.ROMList:
                self.Device_List.SetFocus()
            else:
                self.ROMList.SetFocus()
        else:
#            print event.GetUnicodeKey()
            event.Skip()

    def Show_Hide_Item ( self, Item, Field, Key ):
        Hide = Config.Config [Key]
        Item.Check ( Hide )
        if Hide and Field.IsShown () == 1:
            Field.Hide()
            self.Hidden_Count += 1
        elif Hide == False and Field.IsShown () == False:
            Field.Show()
            self.Hidden_Count -= 1
            
        if self.Hidden_Count == HIDDEN_ITEMS:
            self.ROM_Information_Sizer_staticbox.Hide()
        else:
            self.ROM_Information_Sizer_staticbox.Show()
        
        if not self.In_Init:
            self.Enable_Tasks()
            
    def Enable_Tasks ( self ): #TODO Finish Enable Tasks
        Device_Enabled = self.Device_List.IsEnabled()
        if self.FindFocus() == self.ROMList:
            ROMList_Focus = True
        else:
            ROMList_Focus = False
        if self.FindFocus() == self.Device_List:
            Device_List_Focus = True
        else:
            Device_List_Focus = False

        if self.Current_Ctrl.GetSelectedItemCount() == 1:
            One_Selected = True
            ROM = self.Current_Ctrl.Get_ROM( self.Current_Ctrl.GetFocusedItem() )
            if ROM.Saves > 0:
                Save_Game = True
            else:
                Save_Game = False
        else:
            One_Selected = False
            Save_Game = False
            
        if self.Current_Ctrl.GetSelectedItemCount() == 0:
            Nothing_Selected = True
        else:
            Nothing_Selected = False
            
        if Config.Config ["Current_Tag"] == _("All ROMs"):
            All_ROMS = True
            Hidden_ROMS = False
        elif  Config.Config ["Current_Tag"] == _("Hidden ROMs"):
            All_ROMS = False
            Hidden_ROMS = True
        else:
            All_ROMS = False
            Hidden_ROMS = False
        
        self.Apply_Changes.Enable( Device_Enabled and len ( self.Device_List.Pending ) > 0 )
        self.Toolbar.EnableTool( ID_MENU_APPLY, Device_Enabled and len ( self.Device_List.Pending ) >0 )
        self.Device_Apply_Button.Enable( Device_Enabled and len ( self.Device_List.Pending )>0 )
        
        self.Copy_to_Device.Enable( Device_Enabled and ROMList_Focus and MyROMS.Current_Count > 0 )
        self.Toolbar.EnableTool( ID_MENU_COPY, Device_Enabled and ROMList_Focus and MyROMS.Current_Count>0 )
        
        self.Delete_from_Device.Enable( Device_Enabled and Device_List_Focus and not Nothing_Selected )
        self.Toolbar.EnableTool( ID_MENU_DELETE, Device_Enabled and Device_List_Focus and not Nothing_Selected )
        
        self.Toolbar.EnableTool( ID_BROWSE_DEVICE, Device_Enabled )

#        self.ROM_Information.Enable( MyROMS.Current_Count>0 )
#        self.Toolbar.EnableTool( ID_MENU_ROM_INFORMATION, MyROMS.Current_Count>0 )
#        self.View_NFO_File.Enable( MyROMS.Current_Count>0 )
#        self.Toolbar.EnableTool( ID_MENU_VIEW_NFO_FILE, MyROMS.Current_Count>0 )

        self.ROM_Information.Enable( One_Selected )
        self.Toolbar.EnableTool( ID_MENU_ROM_INFORMATION, One_Selected )
        self.View_NFO_File.Enable( One_Selected )
        self.Toolbar.EnableTool( ID_MENU_VIEW_NFO_FILE, One_Selected )
        
        self.Trim_Files.Enable( ROMList_Focus and MyROMS.Current_Count>0 )
        self.Toolbar.EnableTool( ID_MENU_TRIM_FILES, ROMList_Focus and MyROMS.Current_Count>0 )
        
        self.UnTrim_Files.Enable( ROMList_Focus and MyROMS.Current_Count>0 )
        self.Toolbar.EnableTool( ID_MENU_UNTRIM_FILES, ROMList_Focus and MyROMS.Current_Count>0 )

        self.View_Statistics.Enable( MyROMS.Master_List_Count>0 )
        self.Toolbar.EnableTool( ID_MENU_VIEW_STATISTICS, MyROMS.Master_List_Count>0 )
        
        self.Import_Save_Game.Enable( MyROMS.Master_List_Count>0 and ROMList_Focus and One_Selected )
        self.Toolbar.EnableTool( ID_MENU_IMPORT_SAVE_GAME, MyROMS.Master_List_Count>0 and ROMList_Focus and One_Selected )
        
        self.Backup_Save_Game.Enable( Device_Enabled and Device_List_Focus )
        self.Toolbar.EnableTool( ID_MENU_BACKUP_SAVE_GAME, Device_Enabled and Device_List_Focus )
        
        self.Backup_All_Changed_Save_Games.Enable( Device_Enabled and self.Device_List.GetItemCount()>0)
        self.Toolbar.EnableTool( ID_MENU_BACKUP_ALL_SAVE_GAMES, Device_Enabled and self.Device_List.GetItemCount()>0)

        self.Save_Games_for_Selected_File.Enable( One_Selected and Save_Game )
        self.Toolbar.EnableTool( ID_MENU_SAVE_GAME_MANAGER_SELECTED, One_Selected and Save_Game )
        
#        print "%d of %d" % (self.Hidden_Count,HIDDEN_ITEMS) 
        if self.Hidden_Count == HIDDEN_ITEMS:
            self.Toolbar.ToggleTool( ID_TOGGLE_INFO, True )
        else:
            self.Toolbar.ToggleTool( ID_TOGGLE_INFO, False )

#        self.Toolbar.AddTool( ID_MENU_SAVE_GAME_MANAGER, eval ( "GFX.getGFX_Icon_SaveGameMgr"+ToolSize+"Bitmap" )(), isToggle=False, shortHelpString=_( "Save Game Manager" ), longHelpString=_( "Save Game Manager" ) )

        self.Toolbar.EnableTool( ID_TAG_ADD, not Nothing_Selected )

        self.Toolbar.EnableTool( ID_TAG_REMOVE, not All_ROMS and not Nothing_Selected )

        self.Toolbar.EnableTool( ID_TAG_RENAME, not All_ROMS and not Hidden_ROMS )

        self.Toolbar.EnableTool( ID_TAG_DELETE, not All_ROMS and not Hidden_ROMS )

    def Update_Main_Menu ( self ):
        self.Show_Hide_Item ( self.Hide_Screenshots, self.ScreenShot_Bitmap, "Hide_Screenshots" )
        self.Show_Hide_Item ( self.Hide_Case_Pictures, self.Case_Bitmap, "Hide_Case_Pictures" )
        self.Show_Hide_Item ( self.Hide_Language, self.Languages, "Hide_Language" )
        self.Show_Hide_Item ( self.Hide_Location, self.Location, "Hide_Location" )
        self.Show_Hide_Item ( self.Hide_Genre, self.Genre, "Hide_Genre" )
        self.Show_Hide_Item ( self.Hide_Size, self.ROMSize, "Hide_Size" )
        self.Show_Hide_Item ( self.Hide_Backup_Save_Games, self.SavedGames, "Hide_Backup_Save_Games" )
        self.Show_Hide_Item ( self.Hide_CRC, self.ROMCRC, "Hide_CRC" )
        self.Show_Hide_Item ( self.Hide_Publisher, self.Publisher, "Hide_Publisher" )
        self.Show_Hide_Item ( self.Hide_Release_Group, self.ReleaseGroup, "Hide_Release_Group" )
        self.Show_Hide_Item ( self.Hide_Save_Game_Type, self.SaveType, "Hide_Save_Game_Type" )
        self.Show_Hide_Item ( self.Hide_Internal_Name, self.Internal_Name, "Hide_Internal_Name" )
        self.Show_Hide_Item ( self.Hide_Version, self.Version, "Hide_Version" )
        self.Show_Hide_Item ( self.Hide_Serial, self.Serial, "Hide_Serial" )
        self.Show_Hide_Item ( self.Hide_Wifi, self.Wifi, "Hide_Wifi" )
        self.Show_Hide_Item ( self.Hide_Tags, self.Tags, "Hide_Tags" )
        self.Show_Hide_Item ( self.Hide_Icon, self.ROM_Icon, "Hide_Icon" )
        self.Show_Hide_Item ( self.Hide_ReleaseNumber, self.ReleaseNumber, "Hide_ReleaseNumber" )
        self.Show_Hide_Item ( self.Hide_Title, self.ROM_Title, "Hide_Title" )
        
        self.Show_Device_List.Check( Config.Config ["Show_Device_List"] )
        self.Show_Search.Check( Config.Config ["Show_Search"] )
        self.Show_Filter.Check( Config.Config ["Show_Filter"] )
        self.Show_Alternating_Colours.Check( Config.Config ["Show_Alternate_Colours"] )
        
        self.Auto_Backup_Saved_Games.Check(Config.Config ["Auto_Backup_Saved_Games"] )
        self.Copy_Saves_with_ROM.Check(Config.Config ["AutoCopySaves"])
        
        self.Show_XXXX_Files.Check ( Config.Config ["Show_XXXX_Files"] )
        self.Show_Unknown_Files.Check ( Config.Config ["Show_Unknown_Files"] )
        
        self.Use_Smaller_Pictures.Check ( Config.Config ["Use_Smaller_Pictures"] )
        
        if self.ROM_Icon.IsShown() == False:
            self.ROM_Icon_Label.Show(False)
        else:
            self.ROM_Icon_Label.Show(True)

        self.SplitPanel2_Sizer.Layout()
        
    def On_Hide_Item( self, event ): # wxGlade: cMainFrame.<event_handler>
        if type ( event ) == types.BooleanType:
            All = True
            Id = -1
            Checked = event
        else:
            All = False
            Id = event.Id
            Checked = bool ( event.Int )
            
        if Id == ID_MENU_HIDE_SCREENSHOTS or All:
            Config.Config ["Hide_Screenshots"] = Checked
            self.Show_Hide_Item ( self.Hide_Screenshots, self.ScreenShot_Bitmap, "Hide_Screenshots" )
        if Id == ID_MENU_HIDE_CASE_PICTURES or All:
            Config.Config ["Hide_Case_Pictures"] = Checked
            self.Show_Hide_Item ( self.Hide_Case_Pictures, self.Case_Bitmap, "Hide_Case_Pictures" )
        if Id == ID_MENU_HIDE_LANGUAGE or All:
            Config.Config ["Hide_Language"] = Checked
            self.Show_Hide_Item ( self.Hide_Language, self.Languages, "Hide_Language" )
        if Id == ID_MENU_HIDE_LOCATION or All:
            Config.Config ["Hide_Location"] = Checked
            self.Show_Hide_Item ( self.Hide_Location, self.Location, "Hide_Location" )
        if Id == ID_MENU_HIDE_GENRE or All:
            Config.Config ["Hide_Genre"] = Checked
            self.Show_Hide_Item ( self.Hide_Genre, self.Genre, "Hide_Genre" )
        if Id == ID_MENU_HIDE_SIZE or All:
            Config.Config ["Hide_Size"] = Checked
            self.Show_Hide_Item ( self.Hide_Size, self.ROMSize, "Hide_Size" )
        if Id == ID_MENU_HIDE_BACKUP_SAVE_GAMES or All:
            Config.Config ["Hide_Backup_Save_Games"] = Checked
            self.Show_Hide_Item ( self.Hide_Backup_Save_Games, self.SavedGames, "Hide_Backup_Save_Games" )
        if Id == ID_MENU_HIDE_CRC or All:
            Config.Config ["Hide_CRC"] = Checked
            self.Show_Hide_Item ( self.Hide_CRC, self.ROMCRC, "Hide_CRC" )
        if Id == ID_MENU_HIDE_PUBLISHER or All:
            Config.Config ["Hide_Publisher"] = Checked
            self.Show_Hide_Item ( self.Hide_Publisher, self.Publisher, "Hide_Publisher" )
        if Id == ID_MENU_HIDE_RELEASE_GROUP or All:
            Config.Config ["Hide_Release_Group"] = Checked
            self.Show_Hide_Item ( self.Hide_Release_Group, self.ReleaseGroup, "Hide_Release_Group" )
        if Id == ID_MENU_HIDE_SAVE_GAME_TYPE or All:
            Config.Config ["Hide_Save_Game_Type"] = Checked
            self.Show_Hide_Item ( self.Hide_Save_Game_Type, self.SaveType, "Hide_Save_Game_Type" )
        if Id == ID_MENU_HIDE_INTERNAL_NAME or All:
            Config.Config ["Hide_Internal_Name"] = Checked
            self.Show_Hide_Item ( self.Hide_Internal_Name, self.Internal_Name, "Hide_Internal_Name" )
        if Id == ID_MENU_HIDE_VERSION or All:
            Config.Config ["Hide_Version"] = Checked
            self.Show_Hide_Item ( self.Hide_Version, self.Version, "Hide_Version" )
        if Id == ID_MENU_HIDE_SERIAL or All:
            Config.Config ["Hide_Serial"] = Checked
            self.Show_Hide_Item ( self.Hide_Serial, self.Serial, "Hide_Serial" )
        if Id == ID_MENU_HIDE_WIFI or All:
            Config.Config ["Hide_Wifi"] = Checked
            self.Show_Hide_Item ( self.Hide_Wifi, self.Wifi, "Hide_Wifi" )
        if Id == ID_MENU_HIDE_TAGS or All:
            Config.Config ["Hide_Tags"] = Checked
            self.Show_Hide_Item ( self.Hide_Tags, self.Tags, "Hide_Tags" )
        if Id == ID_MENU_HIDE_ICON or All:
            Config.Config ["Hide_Icon"] = Checked
            self.Show_Hide_Item ( self.Hide_Icon, self.ROM_Icon, "Hide_Icon" )
        if Id == ID_MENU_HIDE_RELEASENUMBER or All:
            Config.Config ["Hide_ReleaseNumber"] = Checked
            self.Show_Hide_Item ( self.Hide_ReleaseNumber, self.ReleaseNumber, "Hide_ReleaseNumber" )
        if Id == ID_MENU_HIDE_TITLE or All:
            Config.Config ["Hide_Title"] = Checked
            self.Show_Hide_Item ( self.Hide_Title, self.ROM_Title, "Hide_Title" )

        if Id == ID_MENU_HIDE_SCREENSHOTS or Id == ID_MENU_HIDE_CASE_PICTURES or All:
            self.On_Use_Smaller_Pictures (event, Change=False)
            
        if self.ROM_Icon.IsShown() == False:
            self.ROM_Icon_Label.Show(False)
        else:
            self.ROM_Icon_Label.Show(True)
        
        self.SplitPanel2_Sizer.Layout()

    def On_Show_All_Items( self, event ): # wxGlade: cMainFrame.<event_handler>
        try:
            wx.Yield()
        except:
            pass
        self.On_Hide_Item( False )
        
    def On_Hide_All_Items( self, event ): # wxGlade: cMainFrame.<event_handler>
        try:
            wx.Yield()
        except:
            pass
        self.On_Hide_Item( True )
    
    def On_Toggle_Info ( self, event ):
        try:
            wx.Yield()
        except:
            pass
        if event.Int == 0: # Show Info
            if self.ToggleBackup == []:
                self.On_Show_All_Items ( event )
            else:
                Config.Config ["Hide_Screenshots"] = self.ToggleBackup[0]
                Config.Config ["Hide_Case_Pictures"] = self.ToggleBackup[1]
                Config.Config ["Hide_Language"] = self.ToggleBackup[2]
                Config.Config ["Hide_Location"] = self.ToggleBackup[3]
                Config.Config ["Hide_Genre"] = self.ToggleBackup[4]
                Config.Config ["Hide_Size"] = self.ToggleBackup[5]
                Config.Config ["Hide_Backup_Save_Games"] = self.ToggleBackup[6]
                Config.Config ["Hide_CRC"] = self.ToggleBackup[7]
                Config.Config ["Hide_Publisher"] = self.ToggleBackup[8]
                Config.Config ["Hide_Release_Group"] = self.ToggleBackup[9]
                Config.Config ["Hide_Save_Game_Type"] = self.ToggleBackup[10]
                Config.Config ["Hide_Internal_Name"] = self.ToggleBackup[11]
                Config.Config ["Hide_Serial"] = self.ToggleBackup[12]
                Config.Config ["Hide_Version"] = self.ToggleBackup[13]
                Config.Config ["Hide_Wifi"] = self.ToggleBackup[14]
                Config.Config ["Hide_Tags"] = self.ToggleBackup[15]
                Config.Config ["Hide_Icon"] = self.ToggleBackup[16]
                Config.Config ["Hide_ReleaseNumber"] = self.ToggleBackup[17]
                Config.Config ["Hide_Title"] = self.ToggleBackup[18]
                self.Update_Main_Menu()
        else:
            self.ToggleBackup = [
                Config.Config ["Hide_Screenshots"], 
                Config.Config ["Hide_Case_Pictures"], 
                Config.Config ["Hide_Language"], 
                Config.Config ["Hide_Location"], 
                Config.Config ["Hide_Genre"], 
                Config.Config ["Hide_Size"], 
                Config.Config ["Hide_Backup_Save_Games"], 
                Config.Config ["Hide_CRC"], 
                Config.Config ["Hide_Publisher"], 
                Config.Config ["Hide_Release_Group"], 
                Config.Config ["Hide_Save_Game_Type"] , 
                Config.Config ["Hide_Internal_Name"], 
                Config.Config ["Hide_Serial"], 
                Config.Config ["Hide_Version"] , 
                Config.Config ["Hide_Wifi"], 
                Config.Config ["Hide_Tags"],
                Config.Config ["Hide_Icon"],
                Config.Config ["Hide_ReleaseNumber"],
                Config.Config ["Hide_Title"]
            ]
            self.On_Hide_Item( True )
#        self.__Local_Init( ["DEVICE"] )
#        self.Update_Fields()
        self.On_Use_Smaller_Pictures(event, Change=False)

    def Populate_Toolbar ( self ):
        if Config.Config ["Show_Toolbar"]:
            self.Toolbar.Show()
            self.Show_Toolbar.Check( True )
        else:
            self.Toolbar.Hide()
            self.Show_Toolbar.Check( False )
            
        ToolSize = Config.Config ["Toolbar_Size"]
            
        if ToolSize == "16":
            self.Toolbar_Small.Check()
        elif ToolSize == "24":
            self.Toolbar_Medium.Check()
        else:
            self.Toolbar_Large.Check()

        self.Toolbar.ClearTools()
        
        self.Toolbar.SetToolBitmapSize( ( int( ToolSize ), int( ToolSize ) ) )

        self.Toolbar.AddTool( ID_MENU_COPY, eval ( "GFX.getGFX_Icon_Add"+ToolSize+"Bitmap" )(), isToggle=False, shortHelpString=self.Copy_to_Device.GetItemLabel(), longHelpString=self.Copy_to_Device.GetHelp() )
        self.Toolbar.AddTool( ID_MENU_DELETE, eval ( "GFX.getGFX_Icon_DeleteFromCart"+ToolSize+"Bitmap" )(), isToggle=False, shortHelpString=self.Delete_from_Device.GetItemLabel(), longHelpString=self.Delete_from_Device.GetHelp() )
        self.Toolbar.AddTool( ID_MENU_APPLY, eval ( "GFX.getGFX_Icon_Apply"+ToolSize+"Bitmap" )(), isToggle=False, shortHelpString=self.Apply_Changes.GetItemLabel(), longHelpString=self.Apply_Changes.GetHelp() )

        self.Toolbar.AddSeparator()
    
        self.Toolbar.AddTool( ID_MENU_ROM_INFORMATION, eval ( "GFX.getGFX_Icon_MoreInfo"+ToolSize+"Bitmap" )(), isToggle=False, shortHelpString=_( "More ROM Information" ), longHelpString=_( "More ROM Information" ) )
        self.Toolbar.AddTool( ID_MENU_VIEW_NFO_FILE, eval ( "GFX.getGFX_Icon_NFO"+ToolSize+"Bitmap" )(), isToggle=False, shortHelpString=_( "View NFO File" ), longHelpString=_( "View NFO File" ) )
        self.Toolbar.AddTool( ID_MENU_TRIM_FILES, eval ( "GFX.getGFX_Icon_Trim"+ToolSize+"Bitmap" )(), isToggle=False, shortHelpString=_( "Trim ROMs" ), longHelpString=_( "Trim ROMs" ) )
        self.Toolbar.AddTool( ID_MENU_UNTRIM_FILES, eval ( "GFX.getGFX_Icon_UnTrim"+ToolSize+"Bitmap" )(), isToggle=False, shortHelpString=_( "UnTrim ROMs" ), longHelpString=_( "UnTrim ROMs" ) )

        self.Toolbar.AddSeparator()

        self.Toolbar.AddTool( ID_MENU_BACKUP_ALL_SAVE_GAMES, eval ( "GFX.getGFX_Icon_SaveGame"+ToolSize+"Bitmap" )(), isToggle=False, shortHelpString=_( "Backup All Recent Save Games" ), longHelpString=_( "Backup All Recent Save Games" ) )
        self.Toolbar.AddTool( ID_MENU_IMPORT_SAVE_GAME, eval ( "GFX.getGFX_Icon_ImportSave"+ToolSize+"Bitmap" )(), isToggle=False, shortHelpString=_( "Import Save Game" ), longHelpString=_( "Import Save Game" ) )
        self.Toolbar.AddTool( ID_MENU_BACKUP_SAVE_GAME, eval ( "GFX.getGFX_Icon_SaveGameSelected"+ToolSize+"Bitmap" )(), isToggle=False, shortHelpString=_( "Backup Selected Save Games" ), longHelpString=_( "Backup Selected Save Games" ) )
        self.Toolbar.AddTool( ID_MENU_SAVE_GAME_MANAGER_SELECTED, eval ( "GFX.getGFX_Icon_SaveGameBackupSelected"+ToolSize+"Bitmap" )(), isToggle=False, shortHelpString=_( "Save Game for Selected File" ), longHelpString=_( "Save Game for Selected File" ) )
        self.Toolbar.AddTool( ID_MENU_SAVE_GAME_MANAGER, eval ( "GFX.getGFX_Icon_SaveGameMgr"+ToolSize+"Bitmap" )(), isToggle=False, shortHelpString=_( "Save Game Manager" ), longHelpString=_( "Save Game Manager" ) )

        self.Toolbar.AddSeparator()
            
        self.Toolbar.AddTool( ID_MENU_VIEW_STATISTICS, eval ( "GFX.getGFX_Icon_Statistics"+ToolSize+"Bitmap" )(), isToggle=False, shortHelpString=_( "View ROM Statistics" ), longHelpString=_( "View ROM Statistics" ) )
        self.Toolbar.AddTool( ID_MENU_OPTIONS, eval ( "GFX.getGFX_Icon_Options"+ToolSize+"Bitmap" )(), isToggle=False, shortHelpString=_( "Options" ), longHelpString=_( "Options" ) )
        self.Toolbar.AddTool( ID_MENU_UPDATE_EVERYTHING, eval ( "GFX.getGFX_Icon_E"+ToolSize+"Bitmap" )(), isToggle=False, shortHelpString=_( "Update Everything" ), longHelpString=_( "Update Release List, My ROMS and GFX Files" ) )
        self.Toolbar.AddTool( ID_BROWSE_DEVICE, eval ( "GFX.getGFX_Icon_Browse"+ToolSize+"Bitmap" )(), isToggle=False, shortHelpString=_( "Browse Device" ), longHelpString=_( "Browse Device" ) )
        self.Toolbar.AddTool( ID_TOGGLE_INFO, eval ( "GFX.getGFX_Icon_InfoOn"+ToolSize+"Bitmap" )(), isToggle=True, shortHelpString=_( "Toggle ROM Information" ), longHelpString=_( "Toggle ROM Information" ) )
            
        self.Toolbar.AddSeparator()
    
        self.Toolbar.AddControl( wx.StaticText( self.Toolbar, -1, label=_( "Current Tag" )+ " : ", style=wx.ALIGN_CENTER_HORIZONTAL ) )
    
        cbID = wx.NewId()
        self.Tag_Choice = wx.Choice( self.Toolbar, cbID, choices=[""], size=( 150, -1 ) )
        self.Toolbar.AddControl( self.Tag_Choice )
        self.Bind ( wx.EVT_CHOICE, self.On_Choose_Tag, id=cbID )
    
        self.Toolbar.AddSeparator()
    
        self.Toolbar.AddTool( ID_TAG_ADD, eval ( "GFX.getGFX_Icon_TagAdd"+ToolSize+"Bitmap" )(), isToggle=False, shortHelpString=_( "Add Tag to ROMs" ), longHelpString=_( "Add Tag to ROMs" ) )
        self.Toolbar.AddTool( ID_TAG_REMOVE, eval ( "GFX.getGFX_Icon_TagRemove"+ToolSize+"Bitmap" )(), isToggle=False, shortHelpString=_( "Remove Tag from ROMs" ), longHelpString=_( "Remove Tag from ROMs" ) )
        self.Toolbar.AddTool( ID_TAG_RENAME, eval ( "GFX.getGFX_Icon_TagRename"+ToolSize+"Bitmap" )(), isToggle=False, shortHelpString=_( "Rename Current Tag" ), longHelpString=_( "Rename Current Tag" ) )
        self.Toolbar.AddTool( ID_TAG_DELETE, eval ( "GFX.getGFX_Icon_TagDelete"+ToolSize+"Bitmap" )(), isToggle=False, shortHelpString=_( "Delete Current Tag" ), longHelpString=_( "Delete Current Tag" ) )

        self.Toolbar.Realize()
        
        self.Populate_Tags()

    def On_Show_Toolbar( self, event ): # wxGlade: cMainFrame.<event_handler>
        Config.Config ["Show_Toolbar"] = bool ( event.Int )
        self.Populate_Toolbar ()
        self.Enable_Tasks()

    def On_Toolbar_Size( self, event ): # wxGlade: cMainFrame.<event_handler>
        if event.Id == ID_MENU_TOOLBAR_SIZE_SMALL:
            Config.Config ["Toolbar_Size"] = "16"
        elif event.Id == ID_MENU_TOOLBAR_SIZE_MEDIUM:
            Config.Config ["Toolbar_Size"] = "24"
        else:
            Config.Config ["Toolbar_Size"] = "32"

        self.Populate_Toolbar()
        self.Enable_Tasks()

    def Show_Hide_Panels ( self ):
        self.Search_Label.Show( Config.Config ["Show_Search"] )
        self.Search_TextCtrl.Show( Config.Config ["Show_Search"] )
        self.Search_Button.Show( Config.Config ["Show_Search"] )
        self.Clear_Button.Show( Config.Config ["Show_Search"] )
        self.Clear_All_Button.Show( Config.Config ["Show_Search"] )

        self.Filter_Label.Show( Config.Config ["Show_Filter"] )
        self.Location_Choice.Show( Config.Config ["Show_Filter"] )
        self.Language_Choice.Show( Config.Config ["Show_Filter"] )
        self.Genre_Choice.Show( Config.Config ["Show_Filter"] )
        self.Size_Choice.Show( Config.Config ["Show_Filter"] )
        
        self.ROMList_Sizer2.Layout()
        self.ROMList.Refresh()
    
    def On_Show_Device_List(self, event): # wxGlade: cMainFrame.<event_handler>
        Config.Config ["Show_Device_List"] = not Config.Config ["Show_Device_List"]
        if Config.Config ["Show_Device_List"] == False:
            self.Device_Sizer.ShowItems(False)
            self.Device_List.Disable()
        else:
            self.Device_Sizer.ShowItems(True)
            self.Device_List.Enable()
            
        self.Device_Sizer.Layout()
        self.SplitPanel2_Sizer.Layout()
        self.Enable_Tasks()
        self.Update_StatusBar(STATUS_ALL)

    def On_Show_Search( self, event ): # wxGlade: cMainFrame.<event_handler>
        Config.Config ["Show_Search"] = not Config.Config ["Show_Search"]
        self.Show_Hide_Panels()

    def On_Show_Filter( self, event ): # wxGlade: cMainFrame.<event_handler>
        Config.Config ["Show_Filter"] = not Config.Config ["Show_Filter"]
        self.Show_Hide_Panels()

    def On_Show_Alternating_Colours( self, event ): # wxGlade: cMainFrame.<event_handler>
        Config.Config ["Show_Alternate_Colours"] = not Config.Config ["Show_Alternate_Colours"]
        self.ROMList.UpdateColour()
        self.ROMList.Refresh()
        self.Device_List.UpdateColour()
        self.Device_List.Refresh()

    def On_Show_XXXX_Files( self, event ): # wxGlade: cMainFrame.<event_handler>
        Config.Config ["Show_XXXX_Files"] = not Config.Config ["Show_XXXX_Files"]
        if not self.In_Init:
            self.__Local_Init( "SEARCH" )

    def On_Show_Unknown_Files( self, event ): # wxGlade: cMainFrame.<event_handler>
        Config.Config ["Show_Unknown_Files"] = not Config.Config ["Show_Unknown_Files"]
        if not self.In_Init:
            self.__Local_Init( "SEARCH" )

    def On_Copy_to_Device( self, event ): # wxGlade: cMainFrame.<event_handler>
        self.SetCursor( wx.StockCursor( wx.CURSOR_WAIT ) )

        Row = self.ROMList.GetFirstSelected()
        while Row != -1:
            ROM = self.ROMList.Get_ROM ( Row )
            if self.Device_List.Add_Pending ( ROM ) == False:
                wx.MessageBox("There is not enough space on the Device" ,
                              "Out of Space", wx.OK|wx.ICON_EXCLAMATION)
                break

            Row = self.ROMList.GetNextSelected( Row )

        self.SetCursor( wx.StockCursor( wx.CURSOR_ARROW ) )
        
        self.__Local_Init( ["DEVICE"] )

    def On_Delete_from_Device( self, event ): # wxGlade: cMainFrame.<event_handler>
        try:
            wx.Yield()
        except:
            pass
        self.SetCursor( wx.StockCursor( wx.CURSOR_WAIT ) )

        self.Device_List.Delete_Selected ()

        self.SetCursor( wx.StockCursor( wx.CURSOR_ARROW ) )
        
        self.__Local_Init( ["DEVICE"] )

    def On_Apply_Changes( self, event ): # wxGlade: cMainFrame.<event_handler>
        try:
            wx.Yield()
        except:
            pass
        self.SetCursor( wx.StockCursor( wx.CURSOR_WAIT ) )
        
        self.Device_List.Apply_Pending()

        self.SetCursor( wx.StockCursor( wx.CURSOR_ARROW ) )
        
        self.__Local_Init( ["DEVICE"] )

    def On_Help( self, event ): # wxGlade: cMainFrame.<event_handler>
        self.help.DisplayContents()

    def On_About( self, event ): # wxGlade: cMainFrame.<event_handler>
        dlg = cAboutDialog ( self )
        dlg.TitleText.SetLabel ( _( "RToolDS Version %s" ) % Config.Version_String )
#        dlg.Fit()
        dlg.ShowModal()
        dlg.Destroy()

    def On_Browse_Device ( self, event ):
        try:
            wx.Yield()
        except:
            pass
        if sys.platform == "win32":
            os.startfile( Config.Config ["Device_Path"] )
                
    def Device_Dir_Picker_Callback ( self, event ):
        if self.In_Init:
            return
        TmpDir = event.GetString()
        if TmpDir != "" and self.In_Init == False and len ( TmpDir ) > 2 and TmpDir != Config.Config ["Device_Path"]:
            self.In_Device_Dir_Callback = True
            Config.Config ["Device_Path"] = TmpDir
            Config.Config ["Save_Dir_On_Cart"] = TmpDir
#            if sys.platform == "win32":
#                c = os.path.splitdrive(Config.Config["Device_Path"])[0]
#                s = os.path.splitdrive(Config.Config["Save_Dir_On_Cart"])[0]
#                if c != s:
#                    Config.Config["Save_Dir_On_Cart"] = c[0] + Config.Config["Save_Dir_On_Cart"][1:]
            self.Freeze()
            self.__Local_Init( ["DEVICE"] )
            self.In_Device_Dir_Callback = False
            self.Device_Dir_Picker.startDirectory = Config.Config ["Device_Path"]
            self.Thaw()

    def On_Device_Refresh( self, event ): # wxGlade: cMainFrame.<event_handler>
        try:
            wx.Yield()
        except:
            pass
        self.Device_List.Clear_Pending()
        self.__Local_Init( ["DEVICE"] )
        if self.Current_Ctrl == self.ROMList:
            self.Current_Ctrl.SetFocus()

    def On_Device_Apply( self, event ): # wxGlade: cMainFrame.<event_handler>
        try:
            wx.Yield()
        except:
            pass
        self.On_Apply_Changes( event )

    def On_ROMList_Begin_Drag( self, event ): # wxGlade: cMainFrame.<event_handler>
        if self.Device_List.IsEnabled() == False:
            return
        
        data = wx.CustomDataObject( "RToolDS_DD" )
        data.SetData( "NA" )

        dropSource = wx.DropSource( self )
        dropSource.SetData( data )
        result = dropSource.DoDragDrop( wx.Drag_AllowMove )

        if result == wx.DragMove or result == wx.DragCopy:
            self.On_Copy_to_Device ( event )

    def On_ROM_Information( self, event ): # wxGlade: cMainFrame.<event_handler>
        try:
            wx.Yield()
        except:
            pass
        if self.Current_Ctrl == self.Device_List:
            From_Device = True
        else:
            From_Device = False
            
        dlg = cROMInformation ( self, Current_Ctrl=self.Current_Ctrl, Save_Comments_Shelve=self.Save_Comments_Shelve, Device_List=self.Device_List, From_Device=From_Device )
        dlg.ShowModal()
        dlg.Destroy()

    def On_View_NFO_File( self, event ): # wxGlade: cMainFrame.<event_handler>
        try:
            wx.Yield()
        except:
            pass
        dlg = cNFODialog ( self, Current_Ctrl=self.Current_Ctrl )
        dlg.ShowModal()
        dlg.Destroy()

    def On_View_Statistics( self, event ): # wxGlade: cMainFrame.<event_handler>
        try:
            wx.Yield()
        except:
            pass
        dlg = cStatisticsDialog ( self )
        dlg.ShowModal()
        dlg.Destroy()

    def On_Trim_Files( self, event ): # wxGlade: cMainFrame.<event_handler>
        try:
            wx.Yield()
        except:
            pass
        self.SetCursor( wx.StockCursor( wx.CURSOR_WAIT ) )

        To_Process = self.ROMList.GetSelectedItemCount()

        dlg = cProgressFrame ( self )
        dlg.DisableGuage2()
        dlg.Proccessing_Text.SetLabel ( _( "Analysing Selected ROMs for Trimmed Sizes" ) )
        dlg.Guage1.SetRange ( To_Process )
        dlg.MakeModal()
        dlg.Center()
        dlg.Show()
        dlg.Update()

        Processed = 0
        Row = self.ROMList.GetFirstSelected()
        while Row != -1:# and not dlg.Abort:
            ROM = self.ROMList.Get_ROM( Row )
            self.ROMList.EnsureVisible( Row )
            if not ROM.Trimmed:
                dummy_OK, dummy_TrimmedSize = ROM.Trim ()
                self.ROMList.Refresh()
                
            Processed += 1
            dlg.Guage1.SetValue ( Processed )
            dlg.Update()
            Row = self.ROMList.GetNextSelected( Row )
            wx.YieldIfNeeded()
            if dlg.Abort:
                break

        self.SetCursor( wx.StockCursor( wx.CURSOR_ARROW ) )
        
        dlg.MakeModal( False )
        dlg.Destroy()
#        self.__Local_Init( ["SORT"] )
        self.__Local_Init( [] )

    def On_UnTrim_Files( self, event ): # wxGlade: cMainFrame.<event_handler>
        try:
            wx.Yield()
        except:
            pass
        self.SetCursor( wx.StockCursor( wx.CURSOR_WAIT ) )

        Row = self.ROMList.GetFirstSelected()
        while Row != -1:# and not dlg.Abort:
            ROM = self.ROMList.Get_ROM( Row )
            self.ROMList.EnsureVisible( Row )
            if ROM.Trimmed:
                dummy_OK, dummy_TrimmedSize = ROM.Un_Trim ()
                self.ROMList.Refresh()
            Row = self.ROMList.GetNextSelected( Row )

        self.SetCursor( wx.StockCursor( wx.CURSOR_ARROW ) )
        
#        self.__Local_Init( ["SORT"] )
        self.__Local_Init( [] )

    def On_Recover_Trimmed_Sizes( self, event ): # wxGlade: cMainFrame.<event_handler>
        try:
            wx.Yield()
        except:
            pass
        self.SetCursor( wx.StockCursor( wx.CURSOR_WAIT ) )
        
        Trimmed_Shelve = MyROMS.Get_Trimmed_Shelve () 
        MyROMS.Process_All = True
        
        for ROM in MyROMS:
            if Trimmed_Shelve.has_key( str ( ROM.ROM_CRC ) ):
                ROM.Trimmed = True
                ROM.Effective_Size = Trimmed_Shelve [str ( ROM.ROM_CRC )][0]
                ROM.Trimmed_CRC = Trimmed_Shelve [str ( ROM.ROM_CRC )][1]

        MyROMS.Process_All = False
        
        self.SetCursor( wx.StockCursor( wx.CURSOR_ARROW ) )
        
        self.__Local_Init( ["SORT"] )
        
    def On_Choose_Tag ( self, event ):
        if event == None or self.Tag_Choice.GetStringSelection() != Config.Config ["Current_Tag"]:
            Config.Config ["Current_Tag"] = self.Tag_Choice.GetStringSelection()
            self.__Local_Init( ["SORT"] )
            self.Enable_Tasks()

    def On_Tag_Add ( self, event ):
        dlg = cTagDialog ( self )
        
        Result = dlg.ShowModal()

        Tag = dlg.Tag_Combo.GetValue()

        if Result == wx.ID_OK and Tag != _( "All ROMs" ):# and Tag != _( "Hidden ROMs" ):
            Config.Config ["Last_Tag"] = Tag
                
            Row = self.Current_Ctrl.GetFirstSelected()
            while Row != -1:
                ROM = self.Current_Ctrl.Get_ROM ( Row )
                
                if ROM.Add_Tag ( Tag ) == True and Tag != _("Hidden ROMs"): # Tag isn't in the list...
                    self.TagChoice.Append( Tag )
                    
                Row = self.Current_Ctrl.GetNextSelected( Row )
    
        dlg.Destroy()
        
        self.__Local_Init( ["TAGS"] ) # had SORT
        self.Enable_Tasks()
        
    def On_Tag_Last (self, event):
        Tag = Config.Config ["Last_Tag"]
        Row = self.Current_Ctrl.GetFirstSelected()
        while Row != -1:
            ROM = self.Current_Ctrl.Get_ROM ( Row )
            
            if ROM.Add_Tag ( Tag ) == True and Tag != _("Hidden ROMs"): # Tag isn't in the list...
                self.TagChoice.Append( Tag )
                
            Row = self.Current_Ctrl.GetNextSelected( Row )
        self.__Local_Init( ["TAGS" ] ) # had SORT
        self.Enable_Tasks()
    
    def On_Tag_Remove ( self, event ):
        Row = self.Current_Ctrl.GetFirstSelected()
        while Row != -1:
            ROM = self.Current_Ctrl.Get_ROM ( Row )
            
            ROM.Remove_Tag ( self.Tag_Choice.GetStringSelection() )
            
            Row = self.Current_Ctrl.GetNextSelected( Row )
        
        self.__Local_Init( ["TAGS", "SORT" ] ) # had SORT

        if self.Current_Ctrl.GetItemCount() == 0 and self.Tag_Choice.GetStringSelection() != _( "Hidden ROMs" ):
            Config.Config ["Current_Tag"] = _( "All ROMs" )
            MyROMS.Remove_Tag ( self.Tag_Choice.GetStringSelection() )

        self.__Local_Init( ["TAGS" ] ) # had SORT
        self.Enable_Tasks()

    def On_Tag_Rename ( self, event ):
        dlg = wx.TextEntryDialog(self, _('New Tag Name for %s') % self.Tag_Choice.GetStringSelection(), _('Rename Tag'), '')
        if dlg.ShowModal() == wx.ID_OK:
            Res = True
            New_Tag = dlg.GetValue()
        else:
            Res = False
        dlg.Destroy()
           
        if Res == True:
            MyROMS.Rename_Tag ( self.Tag_Choice.GetStringSelection(), New_Tag )
            
            Config.Config ["Current_Tag"] = New_Tag
            
            self.__Local_Init( ["TAGS" ] ) # had SORT
            self.Enable_Tasks()
    
    def On_Tag_Delete ( self, event ):
        Res = wx.MessageBox( _( 'Are you sure you want to delete the current tag?' ), _( 'Delete Tag' ), wx.YES_NO| wx.ICON_QUESTION )
        if Res == wx.YES:
            MyROMS.Delete_Tag ( self.Tag_Choice.GetStringSelection() )
            
            Config.Config ["Current_Tag"] = _( "All ROMs" )
            
            self.__Local_Init( ["TAGS", "SORT", "SEARCH" ] ) # had SORT
            self.Enable_Tasks()

    def On_Recover_Tags( self, event ): # wxGlade: cMainFrame.<event_handler>
        self.SetCursor( wx.StockCursor( wx.CURSOR_WAIT ) )
        
        Tag_Shelve = MyROMS.Get_Tag_Shelve () 
        MyROMS.Process_All = True
        
        for ROM in MyROMS:
            if Tag_Shelve.has_key( str ( ROM.ROM_CRC ) ):
                ROM.Tags = Tag_Shelve [str ( ROM.ROM_CRC )]

        MyROMS.Process_All = False
        
        self.SetCursor( wx.StockCursor( wx.CURSOR_ARROW ) )
        
        self.__Local_Init( ["TAGS" ] ) # had SORT

    def On_Options( self, event ): # wxGlade: cMainFrame.<event_handler>
        try:
            wx.Yield()
        except:
            pass
        old_unknown = Config.Config ["Unknown_Name"]
        dlg = cOptions ( self )
        
        Result = dlg.ShowModal ()
        ColumnsChanged = dlg.ColumnsChanged
        
        dlg.Destroy ()
        
        if old_unknown != Config.Config ["Unknown_Name"]:
            self.Rename_Unknowns()
        
        self.Process_Options(Result, ColumnsChanged)
        
    def Process_Options (self, Result, ColumnsChanged):
        if Result == wx.ID_OK:
            self.In_Init = True
#            self.In_Device_Dir_Callback = True
            self.Device_List.Clear_Pending()
            if ColumnsChanged:
                self.__Local_Init ( ["ROMS", "DEVICE", "COLUMNS", "SEARCH"] ) # Did have "GFX"
            else:
                self.__Local_Init ( ["ROMS", "DEVICE", "SEARCH"] )
            self.In_Init = False
#            self.In_Device_Dir_Callback = False
        self.On_Recover_Tags (None)
        self.ROMList.UpdateIcons()
        self.Device_List.UpdateIcons()
        self.ROMList.UpdateColour()
        self.Device_List.UpdateColour()
        self.ROM_Information_Sizer.Layout()
        self.Picture_Sizer.Layout()
        self.Case_Bitmap.Refresh()
        self.ScreenShot_Bitmap.Refresh()
        self.Update_Main_Menu()
        
    def On_Backup_All_Saves( self, event ): # wxGlade: cMainFrame.<event_handler>
        try:
            wx.Yield()
        except:
            pass
        self.On_Backup_Save_Game( event, All=True )

    def On_Backup_Save_Game( self, event, All=False, In_Init=False ): # wxGlade: cMainFrame.<event_handler>
        try:
            wx.Yield()
        except:
            pass
        self.SetCursor( wx.StockCursor( wx.CURSOR_WAIT ) )

        To_Process = self.Device_List.GetSelectedItemCount()

        dlg = cProgressFrame ( self )
        dlg.DisableGuage2()
        dlg.Proccessing_Text.SetLabel ( _( "Copying Save Games" ) )
        dlg.Guage1.SetRange ( To_Process )
        dlg.MakeModal()
        dlg.CenterOnScreen()
        dlg.Show()
        dlg.Update()

        Processed = 0
        Save_ROMS = []
        Finished = False
        
        if not All:
            Row = self.Device_List.GetFirstSelected()
        else:
            Items = self.Device_List.GetItemCount()
            Row = 0
            
        while not Finished:# and not dlg.Abort:
            try:
                ROM = self.Device_List.Get_ROM( Row )
            except:
                Finished = True
                continue
            if self.Device_List.Is_Pending(ROM) == False:
                Save = self.Device_List.Get_Save_Name ( Row )
                if Save[1] != "":
                    try:
                        if self.In_Init == False and In_Init == False:
                            Utils.Add_Save ( ROM, Save[1], self.Save_Comments_Shelve, Save_ROMS )
                        else:
                            Utils.Add_Save ( ROM, Save[1], self.Save_Comments_Shelve, Save_ROMS, Auto=True )
                    except:
                        pass
            Processed += 1
            dlg.Guage1.SetValue ( Processed )
            dlg.Update()
            if not All:
                Row = self.Device_List.GetNextSelected( Row )
                if Row == -1:
                    Finished = True
            else:
                Row += 1
                if Row == Items:
                    Finished = True
            if dlg.Abort:
                break

        self.SetCursor( wx.StockCursor( wx.CURSOR_ARROW ) )
        
        dlg.MakeModal( False )
        dlg.Destroy()
        
        if self.In_Init == False and In_Init == False:
            if Save_ROMS != [] and Config.Config ["Use_Save_Comments"]:
                dlg = cSaveGameComments ( self )
                dlg.Populate ( Save_ROMS, self.Save_Comments_Shelve )
                dlg.ShowModal()
                dlg.Destroy()
            elif Save_ROMS != []:
                wx.MessageBox( _( 'Save Games Backup Successfull.' ), _( 'Save Backup' ), wx.OK| wx.ICON_INFORMATION )
            else:
                wx.MessageBox( _( 'Nothing to Backup.' ), _( 'Save Backup' ), wx.OK| wx.ICON_INFORMATION )
    
            self.__Local_Init( ["DEVICE", "SAVES"] ) # had SORT
            

    def On_Import_Save_Game( self, event ): # wxGlade: cMainFrame.<event_handler>
        try:
            wx.Yield()
        except:
            pass
        ROM = self.ROMList.Get_ROM( self.ROMList.GetFocusedItem() )

        dlg = wx.FileDialog( self, message=_( "Select a Save File to Import to %s" ) %( ROM.Title ), defaultDir=Config.Config["Last_Import_Path"], defaultFile="", style=wx.FD_OPEN | wx.FD_FILE_MUST_EXIST )

        if dlg.ShowModal() != wx.ID_OK:
            return
        
        Import_Filename = dlg.GetPath ()
        Config.Config ["Last_Import_Path"] = os.path.split( Import_Filename )[0]

        dlg.Destroy()

        TempFilename = Utils.Create_Temp_Filename ()
        shutil.copy2( Import_Filename, TempFilename )

        if Config.Config ["Convert_Imports"]:
            dlg = cSaveGameConvert ( self, Save_File = TempFilename, ROM=ROM, InSGM=False )
            Result = dlg.ShowModal()
            dlg.Destroy()
        else:
            Result = wx.ID_OK
        
        if Result:
            Save_ROMS = []

            Utils.Add_Save ( ROM, TempFilename, self.Save_Comments_Shelve, Save_ROMS )
        
        try:
            os.unlink( TempFilename )
        except:
            pass

        if Save_ROMS != [] and Config.Config ["Use_Save_Comments"]:
            dlg = cSaveGameComments ( self )
            dlg.Populate ( Save_ROMS, self.Save_Comments_Shelve )
            dlg.ShowModal()
            dlg.Destroy()
        elif Save_ROMS != []:
            wx.MessageBox( _( 'Save Game Import Successfull.' ), _( 'Save Import' ), wx.OK| wx.ICON_INFORMATION )
        else:
            wx.MessageBox( _( 'Nothing to Import.' ), _( 'Save Import' ), wx.OK| wx.ICON_INFORMATION )

#        self.__Local_Init( ["DEVICE", "ROMS"] ) # had SORT
        self.__Local_Init (["SAVES"])

    def On_Save_Games_for_Selected_File( self, event ): # wxGlade: cMainFrame.<event_handler>
        try:
            wx.Yield()
        except:
            pass
        ROM = self.Current_Ctrl.Get_ROM ( self.Current_Ctrl.GetFocusedItem() )
        dlg = cSaveGameManager ( self, Save_Comments_Shelve=self.Save_Comments_Shelve, Select="%s - %s" % ( ROM.Comment, ROM.Title ) )
        
        dlg.ShowModal ()
        
        Result = wx.ID_CANCEL
        if dlg.Result == wx.ID_OK:
            ColumnsChanged = dlg.ColumnsChanged
            Result = wx.ID_OK
        
        dlg.Destroy()
        
        self.__Local_Init( ["SAVES"] )
        if Result == wx.ID_OK:
            self.Process_Options(Result, ColumnsChanged)

    def On_Save_Game_Manager( self, event ): # wxGlade: cMainFrame.<event_handler>
        try:
            wx.Yield()
        except:
            pass
        dlg = cSaveGameManager ( self, Save_Comments_Shelve=self.Save_Comments_Shelve, Select="" )
        
        dlg.ShowModal ()
    
        Result = wx.ID_CANCEL
        if dlg.Result == wx.ID_OK:
            ColumnsChanged = dlg.ColumnsChanged
            Result = wx.ID_OK
        
        dlg.Destroy()
        
        self.__Local_Init( ["SAVES"] )
        if Result == wx.ID_OK:
            self.Process_Options(Result, ColumnsChanged)

    def On_ROMList_Right_Click( self, event ): # wxGlade: cMainFrame.<event_handler>
        event.Skip()

    def On_Use_Smaller_Pictures(self, event, Change=True): # wxGlade: cMainFrame.<event_handler>
        if Change:
            Config.Config ["Use_Smaller_Pictures"] = not Config.Config ["Use_Smaller_Pictures"]
        
        if Config.Config ["Use_Smaller_Pictures"] == False:
            self.CaseW = 214
            self.CaseH = 384
            self.SSW = 256
            self.SSH = 384
        else:
            self.CaseW = 214 / 2
            self.CaseH = 384 / 2
            self.SSW = 256 / 2
            self.SSH = 384 / 2
        
        if not self.In_Init:
            self.Update_Pictures(self.Current_Ctrl.Get_ROM(self.Current_Ctrl.GetFocusedItem()))
            self.Case_Bitmap.Refresh()
            self.ScreenShot_Bitmap.Refresh()

            self.Picture_Sizer.Layout()
            self.SplitPanel2_Sizer.Layout()
            self.Layout()
            
            self.__Local_Init("GFX")
#            self.MainFrame_Splitter.SendSizeEvent()

    def On_Run_Startup_Wizard(self, event): # wxGlade: cMainFrame.<event_handler>
        Res = wx.MessageBox( _( "Are you sure you want to Run the Setup Wizard?\n\nThis will Delete All of RToolDS's Settings\nDownloaded Content will be Preserved" ), _( 'Setup Wizard' ), wx.YES_NO| wx.ICON_QUESTION )
        if Res == wx.YES:
            self.Run_Wizard(False)
            self.Device_List.Clear_Pending()
            self.__Local_Init( ["SORT", "ROMS", "ICONS", "DEVICE", "SAVES" ] )

    def On_Device_List_Context_Menu( self, event ): # wxGlade: cMainFrame.<event_handler>
        if not hasattr( self, "Popup_Device_List_Delete" ):
            self.Popup_Device_List_Delete = wx.NewId()
            self.Bind( wx.EVT_MENU, self.On_Delete_from_Device, id=self.Popup_Device_List_Delete )
            self.Popup_Device_List_Browse = wx.NewId()
            self.Bind( wx.EVT_MENU, self.On_Browse_Device, id=self.Popup_Device_List_Browse )
            self.Popup_Device_List_Backup_Selected = wx.NewId()
            self.Bind( wx.EVT_MENU, self.On_Backup_Save_Game, id=self.Popup_Device_List_Backup_Selected )
            self.Popup_Device_List_Backup_All = wx.NewId()
            self.Bind( wx.EVT_MENU, self.On_Backup_All_Saves, id=self.Popup_Device_List_Backup_All )
            self.Popup_Device_List_Delete_Save = wx.NewId()
            self.Bind( wx.EVT_MENU, self.On_Delete_Save, id=self.Popup_Device_List_Delete_Save )
        Menu = wx.Menu()
        if self.Delete_from_Device.IsEnabled():
            Item = wx.MenuItem( Menu, self.Popup_Device_List_Delete, _("Delete ROMs from Device") )
            Menu.AppendItem( Item )
        if self.Backup_Save_Game.IsEnabled():
            Item = wx.MenuItem( Menu, self.Popup_Device_List_Delete_Save, _("Delete Save Games from Device") )
            Menu.AppendItem( Item )
        if self.Device_List.IsEnabled():
            Item = wx.MenuItem( Menu, self.Popup_Device_List_Browse, _("Browse Device with Explorer") )
            Menu.AppendItem( Item )
        if self.Backup_Save_Game.IsEnabled():
            Item = wx.MenuItem( Menu, self.Popup_Device_List_Backup_Selected, _("Backup Selected Save Games") )
            Menu.AppendItem( Item )
        if self.Backup_All_Changed_Save_Games.IsEnabled():
            Item = wx.MenuItem( Menu, self.Popup_Device_List_Backup_All, _("Backup All Recent Save Games") )
            Menu.AppendItem( Item )
        self.PopupMenu( Menu )
        Menu.Destroy()

    def On_ROMList_Context_Menu (self, event):
        if not hasattr( self, "Popup_ROMList_Copy" ):
            self.Popup_ROMList_Copy = wx.NewId()
            self.Bind( wx.EVT_MENU, self.On_Copy_to_Device, id=self.Popup_ROMList_Copy )
            self.Popup_ROMList_Trim = wx.NewId()
            self.Bind( wx.EVT_MENU, self.On_Trim_Files, id=self.Popup_ROMList_Trim )
            self.Popup_ROMList_UnTrim = wx.NewId()
            self.Bind( wx.EVT_MENU, self.On_UnTrim_Files, id=self.Popup_ROMList_UnTrim )
            self.Popup_ROMList_ROM_Information = wx.NewId()
            self.Bind( wx.EVT_MENU, self.On_ROM_Information, id=self.Popup_ROMList_ROM_Information )
            self.Popup_ROMList_View_NFO_File = wx.NewId()
            self.Bind( wx.EVT_MENU, self.On_View_NFO_File, id=self.Popup_ROMList_View_NFO_File )
            self.Popup_ROMList_Save_Game_Manager = wx.NewId()
            self.Bind( wx.EVT_MENU, self.On_Save_Game_Manager, id=self.Popup_ROMList_Save_Game_Manager )
            self.Popup_ROMList_Import_Save_Game = wx.NewId()
            self.Bind( wx.EVT_MENU, self.On_Import_Save_Game, id=self.Popup_ROMList_Import_Save_Game )
            self.Popup_ROMList_Tag_Add = wx.NewId()
            self.Bind( wx.EVT_MENU, self.On_Tag_Add, id=self.Popup_ROMList_Tag_Add )
            self.Popup_ROMList_Tag_Last = wx.NewId()
            self.Bind( wx.EVT_MENU, self.On_Tag_Last, id=self.Popup_ROMList_Tag_Last )
            self.Popup_ROMList_Tag_Remove = wx.NewId()
            self.Bind( wx.EVT_MENU, self.On_Tag_Remove, id=self.Popup_ROMList_Tag_Remove )

        Menu = wx.Menu()
        if self.Device_List.IsEnabled():
            Item = wx.MenuItem( Menu, self.Popup_ROMList_Copy, _("Add ROMs to Device") )
            Menu.AppendItem( Item )
        if self.Trim_Files.IsEnabled():
            Item = wx.MenuItem( Menu, self.Popup_ROMList_Trim, _("Trim ROMs") )
            Menu.AppendItem( Item )
            Item = wx.MenuItem( Menu, self.Popup_ROMList_UnTrim, _("UnTrim ROMs") )
            Menu.AppendItem( Item )
        if self.ROM_Information.IsEnabled():
            Item = wx.MenuItem( Menu, self.Popup_ROMList_ROM_Information, _("More Information") )
            Menu.AppendItem( Item )
        if self.View_NFO_File.IsEnabled():
            Item = wx.MenuItem( Menu, self.Popup_ROMList_View_NFO_File, _("View NFO File") )
            Menu.AppendItem( Item )
        if self.Save_Game_Manager.IsEnabled():
            Item = wx.MenuItem( Menu, self.Popup_ROMList_Save_Game_Manager, _("Save Game Manager") )
            Menu.AppendItem( Item )
        if self.Import_Save_Game.IsEnabled():
            Item = wx.MenuItem( Menu, self.Popup_ROMList_Import_Save_Game, _("Import Save Game") )
            Menu.AppendItem( Item )
        if self.Toolbar.GetToolEnabled(ID_TAG_ADD):
            Item = wx.MenuItem( Menu, self.Popup_ROMList_Tag_Add, _("Add Tag to ROMs") )
            Menu.AppendItem( Item )
            if Config.Config ["Last_Tag"] != "":
                Item = wx.MenuItem( Menu, self.Popup_ROMList_Tag_Last, _("Add Tag to ROMs - %s") % (Config.Config ["Last_Tag"]))
                Menu.AppendItem( Item )
        if self.Toolbar.GetToolEnabled(ID_TAG_REMOVE):
            Item = wx.MenuItem( Menu, self.Popup_ROMList_Tag_Remove, _("Remove Tag from ROMs") )
            Menu.AppendItem( Item )
            
        self.PopupMenu( Menu )
        Menu.Destroy()

    def On_Auto_Backup_Saved_Games(self, event): # wxGlade: cMainFrame.<event_handler>
        Config.Config ["Auto_Backup_Saved_Games"] = not Config.Config ["Auto_Backup_Saved_Games"]

    def On_Find_Serials(self, event): # wxGlade: cMainFrame.<event_handler>
        File = open ("c:\serials.txt","wt")
        for ROM in MyROMS:
            if ROM.Found:
                if os.path.splitext(ROM.Archive_File)[1].lower() == ".zip":
                    Country, CalcSerial = ROM.Get_Country()
                    File.write ( "%s - %s - %s - %s\n" % (Country, ROM.Serial, CalcSerial, os.path.split(ROM.Archive_File)[1]) )
        File.close()
        wx.MessageBox( _( 'Finished.' ), _( 'Serials' ), wx.OK| wx.ICON_INFORMATION )
        
    def On_Delete_Save (self, event):
        try:
            wx.Yield()
        except:
            pass
        self.SetCursor( wx.StockCursor( wx.CURSOR_WAIT ) )

        self.Device_List.Delete_Selected_Saves ()

        self.SetCursor( wx.StockCursor( wx.CURSOR_ARROW ) )
        
        self.__Local_Init( ["DEVICE"] )

    def On_Copy_Saves_with_ROM(self, event): # wxGlade: cMainFrame.<event_handler>
        Config.Config ["AutoCopySaves"] = not Config.Config ["AutoCopySaves"]

    def Open_Save_Comments(self):
        while True:
            try:
                self.Save_Comments_Shelve = shelve.open( os.path.join ( Config.Config ["Save_Path"], "RToolDSComments.dat" ) )
                break
            except:
                wx.MessageBox( _('Save Game Database Path is Invalid.\n\nPlease Select a Valid Directory.'), _('Error'), wx.OK| wx.ICON_ERROR )
                dlg = wx.DirDialog(self, "Choose a directory:",
                                   style=wx.DD_DEFAULT_STYLE
                                       | wx.DD_DIR_MUST_EXIST, defaultPath = os.getcwd()
                           )
                if dlg.ShowModal() == wx.ID_OK:
                    Config.Config ["Save_Path"] = dlg.GetPath()
                    
    def Rename_Unknowns (self):
        MyROMS.Process_All = True

        for ROM in MyROMS:
            if ROM.Comment[0] == "U":
                if Config.Config ["Unknown_Name"] == "FILENAME":
                    ROM.Title = os.path.splitext( ROM.ROM_File )[0]
                else:
                    ROM.Title = os.path.splitext( os.path.basename ( ROM.Archive_File ) )[0]
                
        MyROMS.Process_All = False
        MyROMS.Save_Master_List()

# end of class cMainFrame